var Engine;(()=>{"use strict";var t={d:(s,i)=>{for(var e in i)t.o(i,e)&&!t.o(s,e)&&Object.defineProperty(s,e,{enumerable:!0,get:i[e]})},o:(t,s)=>Object.prototype.hasOwnProperty.call(t,s)},s={};(()=>{var i,e,h,n,o,a;t.d(s,{default:()=>f}),function(t){t[t.Opening=0]="Opening",t[t.Endgame=1]="Endgame",t[t.MiddleGame=2]="MiddleGame"}(i||(i={})),function(t){t[t.a8=0]="a8",t[t.b8=1]="b8",t[t.c8=2]="c8",t[t.d8=3]="d8",t[t.e8=4]="e8",t[t.f8=5]="f8",t[t.g8=6]="g8",t[t.h8=7]="h8",t[t.a7=8]="a7",t[t.b7=9]="b7",t[t.c7=10]="c7",t[t.d7=11]="d7",t[t.e7=12]="e7",t[t.f7=13]="f7",t[t.g7=14]="g7",t[t.h7=15]="h7",t[t.a6=16]="a6",t[t.b6=17]="b6",t[t.c6=18]="c6",t[t.d6=19]="d6",t[t.e6=20]="e6",t[t.f6=21]="f6",t[t.g6=22]="g6",t[t.h6=23]="h6",t[t.a5=24]="a5",t[t.b5=25]="b5",t[t.c5=26]="c5",t[t.d5=27]="d5",t[t.e5=28]="e5",t[t.f5=29]="f5",t[t.g5=30]="g5",t[t.h5=31]="h5",t[t.a4=32]="a4",t[t.b4=33]="b4",t[t.c4=34]="c4",t[t.d4=35]="d4",t[t.e4=36]="e4",t[t.f4=37]="f4",t[t.g4=38]="g4",t[t.h4=39]="h4",t[t.a3=40]="a3",t[t.b3=41]="b3",t[t.c3=42]="c3",t[t.d3=43]="d3",t[t.e3=44]="e3",t[t.f3=45]="f3",t[t.g3=46]="g3",t[t.h3=47]="h3",t[t.a2=48]="a2",t[t.b2=49]="b2",t[t.c2=50]="c2",t[t.d2=51]="d2",t[t.e2=52]="e2",t[t.f2=53]="f2",t[t.g2=54]="g2",t[t.h2=55]="h2",t[t.a1=56]="a1",t[t.b1=57]="b1",t[t.c1=58]="c1",t[t.d1=59]="d1",t[t.e1=60]="e1",t[t.f1=61]="f1",t[t.g1=62]="g1",t[t.h1=63]="h1",t[t.no_sq=64]="no_sq"}(e||(e={})),function(t){t[t.White=0]="White",t[t.Black=1]="Black",t[t.Both=2]="Both"}(h||(h={})),function(t){t[t.rook=0]="rook",t[t.bishop=1]="bishop"}(n||(n={})),function(t){t[t.wk=1]="wk",t[t.wq=2]="wq",t[t.bk=4]="bk",t[t.bq=8]="bq"}(o||(o={})),function(t){t[t.P=0]="P",t[t.N=1]="N",t[t.B=2]="B",t[t.R=3]="R",t[t.Q=4]="Q",t[t.K=5]="K",t[t.p=6]="p",t[t.n=7]="n",t[t.b=8]="b",t[t.r=9]="r",t[t.q=10]="q",t[t.k=11]="k"}(a||(a={}));const r=["a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1"],c=[7,15,15,15,3,15,15,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,12,15,15,14],l=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n,65n];let p=1804289383;function d(){let t=p;return t^=t<<13,t^=t>>>17,t^=t<<5,p=t,BigInt.asUintN(32,BigInt(t))}function b(){const t=BigInt.asUintN(64,0xffffn&d()),s=BigInt.asUintN(64,0xffffn&d()),i=BigInt.asUintN(64,0xffffn&d()),e=BigInt.asUintN(64,0xffffn&d());return BigInt.asUintN(64,BigInt(t|s<<16n|i<<32n|e<<48n))}class k{constructor(t){this.name="KhepriChess",this.version="0.5.0",this.author="Kurt Peters",this.bitboards=[0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n],this.occupancies=[0n,0n,0n],this.side=-1,this.enpassant=e.no_sq,this.castle=0,this.nodesCount=0,this.gamePhase=i.Opening,this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.asciiPieces="PNBRQKpnbrqk",this.unicodePieces=["♙","♘","♗","♖","♕","♔","♟︎","♞","♝","♜","♛","♚"],this.moveStack=[],this.pawnAttacks=Array.from(Array(2),(()=>new Array(64))),this.knightAttacks=Array(64),this.kingAttacks=Array(64),this.bishopMasks=Array(64),this.bishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.bishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.rookMasks=Array(64),this.rookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.rookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.asciiEncodePieces={P:a.P,N:a.N,B:a.B,R:a.R,Q:a.Q,K:a.K,p:a.p,n:a.n,b:a.b,r:a.r,q:a.q,k:a.k},this.promotedPieces={[a.Q]:"q",[a.R]:"r",[a.B]:"b",[a.N]:"n",[a.q]:"q",[a.r]:"r",[a.b]:"b",[a.n]:"n"},this.rookMagicNumbers=[0x8a80104000800020n,0x140002000100040n,0x2801880a0017001n,0x100081001000420n,0x200020010080420n,0x3001c0002010008n,0x8480008002000100n,0x2080088004402900n,0x800098204000n,0x2024401000200040n,0x100802000801000n,0x120800800801000n,0x208808088000400n,0x2802200800400n,0x2200800100020080n,0x801000060821100n,0x80044006422000n,0x100808020004000n,0x12108a0010204200n,0x140848010000802n,0x481828014002800n,0x8094004002004100n,0x4010040010010802n,0x20008806104n,0x100400080208000n,0x2040002120081000n,0x21200680100081n,0x20100080080080n,0x2000a00200410n,0x20080800400n,0x80088400100102n,0x80004600042881n,0x4040008040800020n,0x440003000200801n,0x4200011004500n,0x188020010100100n,0x14800401802800n,0x2080040080800200n,0x124080204001001n,0x200046502000484n,0x480400080088020n,0x1000422010034000n,0x30200100110040n,0x100021010009n,0x2002080100110004n,0x202008004008002n,0x20020004010100n,0x2048440040820001n,0x101002200408200n,0x40802000401080n,0x4008142004410100n,0x2060820c0120200n,0x1001004080100n,0x20c020080040080n,0x2935610830022400n,0x44440041009200n,0x280001040802101n,0x2100190040002085n,0x80c0084100102001n,0x4024081001000421n,0x20030a0244872n,0x12001008414402n,0x2006104900a0804n,0x1004081002402n],this.bishopMagicNumbers=[0x40040844404084n,0x2004208a004208n,0x10190041080202n,0x108060845042010n,0x581104180800210n,0x2112080446200010n,0x1080820820060210n,0x3c0808410220200n,0x4050404440404n,0x21001420088n,0x24d0080801082102n,0x1020a0a020400n,0x40308200402n,0x4011002100800n,0x401484104104005n,0x801010402020200n,0x400210c3880100n,0x404022024108200n,0x810018200204102n,0x4002801a02003n,0x85040820080400n,0x810102c808880400n,0xe900410884800n,0x8002020480840102n,0x220200865090201n,0x2010100a02021202n,0x152048408022401n,0x20080002081110n,0x4001001021004000n,0x800040400a011002n,0xe4004081011002n,0x1c004001012080n,0x8004200962a00220n,0x8422100208500202n,0x2000402200300c08n,0x8646020080080080n,0x80020a0200100808n,0x2010004880111000n,0x623000a080011400n,0x42008c0340209202n,0x209188240001000n,0x400408a884001800n,0x110400a6080400n,0x1840060a44020800n,0x90080104000041n,0x201011000808101n,0x1a2208080504f080n,0x8012020600211212n,0x500861011240000n,0x180806108200800n,0x4000020e01040044n,0x300000261044000an,0x802241102020002n,0x20906061210001n,0x5a84841004010310n,0x4010801011c04n,0xa010109502200n,0x4a02012000n,0x500201010098b028n,0x8040002811040900n,0x28000010020204n,0x6000020202d0240n,0x8918844842082200n,0x4010011029020020n],this.pieceValue=[[82,337,365,477,1025,12e3,-82,-337,-365,-477,-1025,-12e3],[94,281,297,512,936,12e3,-94,-281,-297,-512,-936,-12e3]],this.pieceSquareValues=[[[0,0,0,0,0,0,0,0,98,134,61,95,68,126,34,-11,-6,7,26,31,65,56,25,-20,-14,13,6,21,23,12,17,-23,-27,-2,-5,12,17,6,10,-25,-26,-4,-4,-10,3,3,33,-12,-35,-1,-20,-23,-15,24,38,-22,0,0,0,0,0,0,0,0],[-167,-89,-34,-49,61,-97,-15,-107,-73,-41,72,36,23,62,7,-17,-47,60,37,65,84,129,73,44,-9,17,19,53,37,69,18,22,-13,4,16,13,28,19,21,-8,-23,-9,12,10,19,17,25,-16,-29,-53,-12,-3,-1,18,-14,-19,-105,-21,-58,-33,-17,-28,-19,-23],[-29,4,-82,-37,-25,-42,7,-8,-26,16,-18,-13,30,59,18,-47,-16,37,43,40,35,50,37,-2,-4,5,19,50,37,37,7,-2,-6,13,13,26,34,12,10,4,0,15,15,15,14,27,18,10,4,15,16,0,7,21,33,1,-33,-3,-14,-21,-13,-12,-39,-21],[32,42,32,51,63,9,31,43,27,32,58,62,80,67,26,44,-5,19,26,36,17,45,61,16,-24,-11,7,26,24,35,-8,-20,-36,-26,-12,-1,9,-7,6,-23,-45,-25,-16,-17,3,0,-5,-33,-44,-16,-20,-9,-1,11,-6,-71,-19,-13,1,17,16,7,-37,-26],[-28,0,29,12,59,44,43,45,-24,-39,-5,1,-16,57,28,54,-13,-17,7,8,29,56,47,57,-27,-27,-16,-16,-1,17,-2,1,-9,-26,-9,-10,-2,-4,3,-3,-14,2,-11,-2,-5,2,14,5,-35,-8,11,2,8,15,-3,1,-1,-18,-9,10,-15,-25,-31,-50],[-65,23,16,-15,-56,-34,2,13,29,-1,-20,-7,-8,-4,-38,-29,-9,24,2,-16,-20,6,22,-22,-17,-20,-12,-27,-30,-25,-14,-36,-49,-1,-27,-39,-46,-44,-33,-51,-14,-14,-22,-46,-44,-30,-15,-27,1,7,-8,-64,-43,-16,9,8,-15,36,12,-54,8,-28,24,14]],[[0,0,0,0,0,0,0,0,178,173,158,134,147,132,165,187,94,100,85,67,56,53,82,84,32,24,13,5,-2,4,17,17,13,9,-3,-7,-7,-8,3,-1,4,7,-6,1,0,-5,-1,-8,13,8,8,10,13,0,2,-7,0,0,0,0,0,0,0,0],[-58,-38,-13,-28,-31,-27,-63,-99,-25,-8,-25,-2,-9,-25,-24,-52,-24,-20,10,9,-1,-9,-19,-41,-17,3,22,22,22,11,8,-18,-18,-6,16,25,16,17,4,-18,-23,-3,-1,15,10,-3,-20,-22,-42,-20,-10,-5,-2,-20,-23,-44,-29,-51,-23,-15,-22,-18,-50,-64],[-14,-21,-11,-8,-7,-9,-17,-24,-8,-4,7,-12,-3,-13,-4,-14,2,-8,0,-1,-2,6,0,4,-3,9,12,9,14,10,3,2,-6,3,13,19,7,10,-3,-9,-12,-3,8,10,13,3,-7,-15,-14,-18,-7,-1,4,-9,-15,-27,-23,-9,-23,-5,-9,-16,-5,-17],[13,10,18,15,12,12,8,5,11,13,13,11,-3,3,8,3,7,7,7,5,4,-3,-5,-3,4,3,13,1,2,1,-1,2,3,5,8,4,-5,-6,-8,-11,-4,0,-5,-1,-7,-12,-8,-16,-6,-6,0,2,-9,-9,-11,-3,-9,2,3,-1,-5,-13,4,-20],[-9,22,22,27,27,19,10,20,-17,20,32,41,58,25,30,0,-20,6,9,49,47,35,19,9,3,22,24,45,57,40,57,36,-18,28,19,47,31,34,39,23,-16,-27,15,6,9,17,10,5,-22,-23,-30,-16,-16,-23,-36,-32,-33,-28,-22,-43,-5,-32,-20,-41],[-74,-35,-18,-18,-11,15,4,-17,-12,17,14,17,17,38,23,11,10,17,23,15,20,45,44,13,-8,22,24,27,26,33,26,3,-18,-4,21,24,27,23,9,-11,-19,-3,11,21,23,16,7,-9,-27,-11,4,13,14,4,-5,-17,-53,-34,-21,-11,-28,-14,-24,-43]]],this.hashKey=0n,this.pieceKeys=Array.from(Array(12),(()=>new Array(64))),this.enpassantKeys=[],this.castleKeys=[],this.sideKey=0n,this.hashSize=0,this.hashExact=0,this.hashAlpha=1,this.hashBeta=2,this.hashNoMove=0,this.hashTable={key:new BigUint64Array(this.hashSize),depth:new Uint8Array(this.hashSize),flag:new Uint8Array(this.hashSize),score:new Int32Array(this.hashSize),move:new Uint32Array(this.hashSize)},this.INFINITY=5e4,this.MATE_SCORE=49e3,this.maxPly=64,this.IS_MATE=this.MATE_SCORE-2*this.maxPly,this.ply=0,this.killerMoves=Array(2).fill(0).map((()=>Array(this.maxPly).fill(0))),this.historyMoves=Array(64).fill(0).map((()=>Array(64).fill(0))),this.pvLength=[],this.pvTable=Array(this.maxPly).fill(0).map((()=>Array(this.maxPly).fill(0))),this.followPv=!1,this.scorePv=!1,this.fileMasks=Array(64).fill(0n),this.rankMasks=Array(64).fill(0n),this.isolatedMasks=Array(64).fill(0n),this.wPassedMasks=Array(64).fill(0n),this.bPassedMasks=Array(64).fill(0n),this.doubledPenalty=15,this.isolatedPenalty=7,this.passedBonus=[0,2,4,10,15,25,50,200],this.fileSemiOpenScore=7,this.fileOpenScore=15,this.timing={startTime:0,moveTime:0},this.shouldStop=!1,this.totalMoves=0,this.InitJumperAttacks(),this.InitSliderAttacks(n.bishop),this.InitSliderAttacks(n.rook),this.InitHashKeys(),this.InitHashTable(),this.InitEvalMasks(),t=t||k.positions.start,this.ParseFEN(t)}SetBit(t,s){return t|1n<<l[s]}RemoveBit(t,s){return t&~(1n<<l[s])}GetBit(t,s){return t&1n<<l[s]}CountBits(t){const s=Number(0xffffffffn&t),i=Number(t>>32n);function e(t){return 16843009*((t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135)>>24}return e(s)+e(i)}GetLS1B(t){return t?this.CountBits((t&-t)-1n):-1}SetOccupancy(t,s,i){let e=0n;for(let h=0;h<s;h++){const s=this.GetLS1B(i);i=this.RemoveBit(i,s),t&1<<h&&(e|=1n<<l[s])}return BigInt.asUintN(64,e)}PrintBitboard(t){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){const h=8*s+e;e||(i+=8-s+"  "),i+=" "+(this.GetBit(t,h)?"1":"0")}console.log(`${i} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${t}`)}PrintBoard(t=!1){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){let h=8*s+e,n=-1;e||(i+=8-s+" ");for(let t=a.P;t<=a.k;t++)this.GetBit(this.bitboards[t],h)&&(n=t);i+=t?-1===n?" . ":` ${this.unicodePieces[n]}`:-1===n?" . ":` ${this.asciiPieces[n]} `}console.log(`${i} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(0===this.side?"white":"black")),console.log(`En passant: ${this.enpassant!==e.no_sq?r[this.enpassant]:"no"}`),console.log(`Castling rights: ${this.castle&o.wk?"K":"-"}${this.castle&o.wq?"Q":"-"}${this.castle&o.bk?"k":"-"}${this.castle&o.bq?"q":"-"}`),console.log(`Hash key: ${this.hashKey.toString(16)}`),console.log("\r\n")}PrintAttackedSquares(t){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){const h=8*s+e;e||(i+=8-s+"  "),i+=` ${this.IsSquareAttacked(h,t)} `}console.log(`${i} \r\n`)}console.log("\r\n    a  b  c  d  e  f  g  h")}PrintMove(t){console.log(`${r[this.GetMoveSource(t)]}${r[this.GetMoveTarget(t)]}${this.GetMovePromoted(t)?this.promotedPieces[this.GetMovePromoted(t)]:""}`)}PrintMoveList(t){if(0===t.list.length)return void console.log("No moves in move list.");const s=[];for(let i=0;i<t.list.length;i++){const e=t.list[i];s.push({Move:`${r[this.GetMoveSource(e)]}${r[this.GetMoveTarget(e)]}${this.GetMovePromoted(e)?this.promotedPieces[this.GetMovePromoted(e)]:" "}`,Piece:`${this.unicodePieces[this.GetMovePiece(e)]}`,Capture:""+(this.GetMoveCapture(e)?1:0),Double:""+(this.GetMoveDouble(e)?1:0),EnPassant:""+(this.GetMoveEnPassant(e)?1:0),Castle:""+(this.GetMoveCastling(e)?1:0)})}console.table(s),console.log(`Total number of moves: ${t.list.length}`)}PrintMoveScores(t){const s=[];for(let i=0;i<t.list.length;i++)s.push({move:`${r[this.GetMoveSource(t.list[i])]}${r[this.GetMoveTarget(t.list[i])]}${this.GetMovePromoted(t.list[i])?this.promotedPieces[this.GetMovePromoted(t.list[i])]:" "}`,score:this.ScoreMove(t.list[i])});console.table(s)}ParseFEN(t){this.bitboards=[0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n],this.occupancies=[0n,0n,0n],this.side=0,this.enpassant=e.no_sq,this.castle=0;let s=t.split(" ")[0].split("/");for(let t=0;t<8;t++){let i=s[t],e=0;for(const s of i){let i=8*t+e;if(s.toLocaleLowerCase()>="a"&&s.toLocaleLowerCase()<="z"){let t=this.asciiEncodePieces[s];this.bitboards[t]=this.SetBit(this.bitboards[t],i),e++}else s>="1"&&s<="8"?e+=parseInt(s,10):console.error(`Invalid FEN character: ${s}`)}}this.side="w"===t.split(" ")[1]?h.White:h.Black;const i=t.split(" ")[2].split("");for(const t of i)switch(t){case"K":this.castle|=o.wk;break;case"Q":this.castle|=o.wq;break;case"k":this.castle|=o.bk;break;case"q":this.castle|=o.bq}const n=t.split(" ")[3];if("-"!==n){const t="abcdefgh".indexOf(n.split("")[0]),s=8-parseInt(n[1],10);this.enpassant=8*s+t}else this.enpassant=e.no_sq;for(let t=a.P;t<=a.K;t++)this.occupancies[h.White]|=this.bitboards[t];for(let t=a.p;t<=a.k;t++)this.occupancies[h.Black]|=this.bitboards[t];this.occupancies[h.Both]|=this.occupancies[h.White]|this.occupancies[h.Black],this.hashKey=this.GenerateHashKeys()}InitHashKeys(){for(let t=a.P;t<=a.k;t++)for(let s=0;s<64;s++)this.pieceKeys[t][s]=b();for(let t=0;t<64;t++)this.enpassantKeys[t]=b();for(let t=0;t<16;t++)this.castleKeys[t]=b();this.sideKey=b()}GenerateHashKeys(){let t,s=0n;for(let i=a.P;i<=a.k;i++)for(t=this.bitboards[i];t;){const e=this.GetLS1B(t);s^=this.pieceKeys[i][e],t=this.RemoveBit(t,e)}return this.enpassant!==e.no_sq&&(s^=this.enpassantKeys[this.enpassant]),s^=this.castleKeys[this.castle],this.side===h.Black&&(s^=this.sideKey),s}MaskPawnAttacks(t,s){let i=0n,e=0n;return e=this.SetBit(e,s),t?(e<<7n&this.notHFile&&(i|=e<<7n),e<<9n&this.notAFile&&(i|=e<<9n)):(e>>7n&this.notAFile&&(i|=e>>7n),e>>9n&this.notHFile&&(i|=e>>9n)),BigInt.asUintN(64,i)}MaskKnightAttacks(t){let s=0n,i=0n;return i=this.SetBit(i,t),i>>17n&this.notHFile&&(s|=i>>17n),i>>15n&this.notAFile&&(s|=i>>15n),i>>10n&this.notHGFile&&(s|=i>>10n),i>>6n&this.notABFile&&(s|=i>>6n),i<<17n&this.notAFile&&(s|=i<<17n),i<<15n&this.notHFile&&(s|=i<<15n),i<<10n&this.notABFile&&(s|=i<<10n),i<<6n&this.notHGFile&&(s|=i<<6n),BigInt.asUintN(64,s)}MaskKingAttacks(t){let s=0n,i=0n;return i=this.SetBit(i,t),i>>8n&&(s|=i>>8n),i>>9n&this.notHFile&&(s|=i>>9n),i>>7n&this.notAFile&&(s|=i>>7n),i>>1n&this.notHFile&&(s|=i>>1n),i<<8n&&(s|=i<<8n),i<<9n&this.notAFile&&(s|=i<<9n),i<<7n&this.notHFile&&(s|=i<<7n),i<<1n&this.notAFile&&(s|=i<<1n),BigInt.asUintN(64,s)}MaskBishopAttacks(t){let s=0n;const i=Math.floor(t/8),e=t%8;for(let t=i+1,h=e+1;t<=6&&h<=6;t++,h++)s|=1n<<8n*BigInt(t)+BigInt(h);for(let t=i-1,h=e+1;t>=1&&h<=6;t--,h++)s|=1n<<8n*BigInt(t)+BigInt(h);for(let t=i+1,h=e-1;t<=6&&h>=1;t++,h--)s|=1n<<8n*BigInt(t)+BigInt(h);for(let t=i-1,h=e-1;t>=1&&h>=1;t--,h--)s|=1n<<8n*BigInt(t)+BigInt(h);return BigInt.asUintN(64,s)}GenerateBishopAttacksFly(t,s){let i=0n;const e=Math.floor(t/8),h=t%8;for(let t=e+1,n=h+1;t<=7&&n<=7&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t++,n++);for(let t=e-1,n=h+1;t>=0&&n<=7&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t--,n++);for(let t=e+1,n=h-1;t<=7&&n>=0&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t++,n--);for(let t=e-1,n=h-1;t>=0&&n>=0&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t--,n--);return BigInt.asUintN(64,i)}GetBishopAttacks(t,s){return s=BigInt.asUintN(64,s&this.bishopMasks[t]),s=BigInt.asUintN(64,s*this.bishopMagicNumbers[t]),s>>=64n-this.bishopRelevantBits[t],this.bishopAttacks[t][Number(s)]}MaskRookAttacks(t){let s=0n;const i=Math.floor(t/8),e=t%8;for(let t=i+1;t<=6;t++)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=i-1;t>=1;t--)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=e+1;t<=6;t++)s|=1n<<8n*BigInt(i)+BigInt(t);for(let t=e-1;t>=1;t--)s|=1n<<8n*BigInt(i)+BigInt(t);return BigInt.asUintN(64,s)}GenerateRookAttacksFly(t,s){let i=0n;const e=Math.floor(t/8),h=t%8;for(let t=e+1;t<=7&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t++);for(let t=e-1;t>=0&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t--);for(let t=h+1;t<=7&&(i|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&s));t++);for(let t=h-1;t>=0&&(i|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&s));t--);return BigInt.asUintN(64,i)}GetRookAttacks(t,s){return s=BigInt.asUintN(64,s&this.rookMasks[t]),s=BigInt.asUintN(64,s*this.rookMagicNumbers[t]),s>>=64n-this.rookRelevantBits[t],this.rookAttacks[t][Number(s)]}GetQueenAttacks(t,s){return this.GetBishopAttacks(t,s)|this.GetRookAttacks(t,s)}InitSliderAttacks(t){for(let s=0;s<64;s++){this.bishopMasks[s]=this.MaskBishopAttacks(s),this.rookMasks[s]=this.MaskRookAttacks(s);const i=t?this.bishopMasks[s]:this.rookMasks[s],e=this.CountBits(i),h=1<<e;for(let n=0;n<h;n++)if(t){const t=this.SetOccupancy(n,e,i),h=BigInt.asUintN(64,t*this.bishopMagicNumbers[s])>>64n-this.bishopRelevantBits[s];this.bishopAttacks[s][Number(h)]=this.GenerateBishopAttacksFly(s,t)}else{const t=this.SetOccupancy(n,e,i),h=BigInt.asUintN(64,t*this.rookMagicNumbers[s])>>64n-this.rookRelevantBits[s];this.rookAttacks[s][Number(h)]=this.GenerateRookAttacksFly(s,t)}}}InitJumperAttacks(){for(let t=0;t<64;t++)this.pawnAttacks[h.White][t]=this.MaskPawnAttacks(h.White,t),this.pawnAttacks[h.Black][t]=this.MaskPawnAttacks(h.Black,t),this.knightAttacks[t]=this.MaskKnightAttacks(t),this.kingAttacks[t]=this.MaskKingAttacks(t)}IsSquareAttacked(t,s){let i,e,n,o,r;return s===h.White?(i=this.bitboards[a.B]|this.bitboards[a.Q],e=this.bitboards[a.R]|this.bitboards[a.Q],n=this.bitboards[a.P],o=this.bitboards[a.N],r=this.bitboards[a.K]):(i=this.bitboards[a.b]|this.bitboards[a.q],e=this.bitboards[a.r]|this.bitboards[a.q],n=this.bitboards[a.p],o=this.bitboards[a.n],r=this.bitboards[a.k]),this.pawnAttacks[1^s][t]&n||this.knightAttacks[t]&o||this.GetBishopAttacks(t,this.occupancies[h.Both])&i||this.GetRookAttacks(t,this.occupancies[h.Both])&e||this.kingAttacks[t]&r?1:0}FindMagicNumber(t,s,i){const e=new BigUint64Array(4096),h=new BigUint64Array(4096),n=new BigUint64Array(4096),o=i?this.MaskBishopAttacks(t):this.MaskRookAttacks(t),a=1n<<s;for(let s=0;s<a;s++)e[s]=this.SetOccupancy(s,Number(a),o),h[s]=i?this.GenerateBishopAttacksFly(t,e[s]):this.GenerateRookAttacksFly(t,e[s]);for(let t=0;t<1e8;t++){const t=BigInt.asUintN(64,b()&b()&b());if(this.CountBits(o*t&0xff00000000000000n)<6)continue;let i;for(let i=0,o=0;!o&&i<a;i++){const a=Number(BigInt.asIntN(16,e[i]*t>>64n-s));0n===n[a]?n[a]=h[i]:n[a]!==h[i]&&(o=1)}if(!i)return BigInt.asUintN(64,t)}return console.log("Magic number failed!"),0n}InitMagicNumbers(){for(let t=0;t<64;t++){let s=this.FindMagicNumber(t,this.bishopRelevantBits[t],n.bishop).toString(16);s.length%2&&(s="0"+s),console.log(`0x${s}n`)}}GeneratePawnMoves(t,s,i,n){const o=~this.occupancies[h.Both];let r,c=t===h.White?a.P:a.p;const p=(s,i)=>(t===h.White?i<<8n:i>>8n)&s,d=p(i,o),b=((s,i)=>{const e=t===h.White?0x000000ff00000000n:0x00000000ff000000n,n=(t===h.White?(i&e)<<8n:(i&e)>>8n)&i;return p(s,n)})(i,o);for(;i;){const o=this.GetLS1B(i),p=t===h.White?o-8:o+8;for(n||(this.GetBit(i,o)&d&&((t===h.White?p<=e.h8:p>=e.a1)?(this.AddMove(s,this.EncodeMove(o,p,c,t===h.White?a.Q:a.q,0,0,0,0)),this.AddMove(s,this.EncodeMove(o,p,c,t===h.White?a.R:a.r,0,0,0,0)),this.AddMove(s,this.EncodeMove(o,p,c,t===h.White?a.B:a.b,0,0,0,0)),this.AddMove(s,this.EncodeMove(o,p,c,t===h.White?a.N:a.n,0,0,0,0))):this.AddMove(s,this.EncodeMove(o,p,c,0,0,0,0,0))),this.GetBit(i,o)&b&&this.AddMove(s,this.EncodeMove(o,t===h.White?o-16:o+16,c,0,0,1,0,0))),r=this.pawnAttacks[t][o]&this.occupancies[t===h.White?h.Black:h.White];r;){const i=this.GetLS1B(r);(t===h.White?i<=e.h8:i>=e.a1)?(this.AddMove(s,this.EncodeMove(o,i,c,t===h.White?a.Q:a.q,1,0,0,0)),this.AddMove(s,this.EncodeMove(o,i,c,t===h.White?a.R:a.r,1,0,0,0)),this.AddMove(s,this.EncodeMove(o,i,c,t===h.White?a.B:a.b,1,0,0,0)),this.AddMove(s,this.EncodeMove(o,i,c,t===h.White?a.N:a.n,1,0,0,0))):this.AddMove(s,this.EncodeMove(o,i,c,0,1,0,0,0)),r=this.RemoveBit(r,i)}if(this.enpassant!==e.no_sq){const t=this.pawnAttacks[this.side][o]&1n<<l[this.enpassant];if(t){const i=this.GetLS1B(t);this.AddMove(s,this.EncodeMove(o,i,c,0,1,0,1,0))}}i=this.RemoveBit(i,o)}}GenerateMoves(t,s=!1){let i;const n=this.bitboards[a.P],r=this.bitboards[a.p];this.GeneratePawnMoves(this.side,t,this.side===h.White?n:r,s);for(let n=a.P;n<=a.k;n++){if(i=this.bitboards[n],s||(this.side===h.White?n===a.K&&(this.castle&o.wk&&(this.GetBit(this.occupancies[h.Both],e.f1)||this.GetBit(this.occupancies[h.Both],e.g1)||this.IsSquareAttacked(e.e1,h.Black)||this.IsSquareAttacked(e.f1,h.Black)||this.AddMove(t,this.EncodeMove(e.e1,e.g1,n,0,0,0,0,1))),this.castle&o.wq&&(this.GetBit(this.occupancies[h.Both],e.d1)||this.GetBit(this.occupancies[h.Both],e.c1)||this.GetBit(this.occupancies[h.Both],e.b1)||this.IsSquareAttacked(e.e1,h.Black)||this.IsSquareAttacked(e.d1,h.Black)||this.AddMove(t,this.EncodeMove(e.e1,e.c1,n,0,0,0,0,1)))):n===a.k&&(this.castle&o.bk&&(this.GetBit(this.occupancies[h.Both],e.f8)||this.GetBit(this.occupancies[h.Both],e.g8)||this.IsSquareAttacked(e.e8,h.White)||this.IsSquareAttacked(e.f8,h.White)||this.AddMove(t,this.EncodeMove(e.e8,e.g8,n,0,0,0,0,1))),this.castle&o.bq&&(this.GetBit(this.occupancies[h.Both],e.d8)||this.GetBit(this.occupancies[h.Both],e.c8)||this.GetBit(this.occupancies[h.Both],e.b8)||this.IsSquareAttacked(e.e8,h.White)||this.IsSquareAttacked(e.d8,h.White)||this.AddMove(t,this.EncodeMove(e.e8,e.c8,n,0,0,0,0,1))))),this.side===h.White?n===a.N:n===a.n)for(;i;){const e=this.GetLS1B(i);let o=this.knightAttacks[e]&~this.occupancies[this.side];for(;o;){const i=this.GetLS1B(o),a=this.GetBit(this.side===h.White?this.occupancies[h.Black]:this.occupancies[h.White],i);s||a?a&&this.AddMove(t,this.EncodeMove(e,i,n,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,n,0,0,0,0,0)),o=this.RemoveBit(o,i)}i=this.RemoveBit(i,e)}if(this.side===h.White?n===a.B:n===a.b)for(;i;){const e=this.GetLS1B(i);let o=this.GetBishopAttacks(e,this.occupancies[h.Both])&~this.occupancies[this.side];for(;o;){const i=this.GetLS1B(o),a=this.GetBit(this.side===h.White?this.occupancies[h.Black]:this.occupancies[h.White],i);s||a?a&&this.AddMove(t,this.EncodeMove(e,i,n,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,n,0,0,0,0,0)),o=this.RemoveBit(o,i)}i=this.RemoveBit(i,e)}if(this.side===h.White?n===a.R:n===a.r)for(;i;){const e=this.GetLS1B(i);let o=this.GetRookAttacks(e,this.occupancies[h.Both])&~this.occupancies[this.side];for(;o;){const i=this.GetLS1B(o),a=this.GetBit(this.side===h.White?this.occupancies[h.Black]:this.occupancies[h.White],i);s||a?a&&this.AddMove(t,this.EncodeMove(e,i,n,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,n,0,0,0,0,0)),o=this.RemoveBit(o,i)}i=this.RemoveBit(i,e)}if(this.side===h.White?n===a.Q:n===a.q)for(;i;){const e=this.GetLS1B(i);let o=this.GetQueenAttacks(e,this.occupancies[h.Both])&~this.occupancies[this.side];for(;o;){const i=this.GetLS1B(o),a=this.GetBit(this.side===h.White?this.occupancies[h.Black]:this.occupancies[h.White],i);s||a?a&&this.AddMove(t,this.EncodeMove(e,i,n,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,n,0,0,0,0,0)),o=this.RemoveBit(o,i)}i=this.RemoveBit(i,e)}if(this.side===h.White?n===a.K:n===a.k)for(;i;){const e=this.GetLS1B(i);let o=this.kingAttacks[e]&~this.occupancies[this.side];for(;o;){const i=this.GetLS1B(o),a=this.GetBit(this.side===h.White?this.occupancies[h.Black]:this.occupancies[h.White],i);s||a?a&&this.AddMove(t,this.EncodeMove(e,i,n,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,n,0,0,0,0,0)),o=this.RemoveBit(o,i)}i=this.RemoveBit(i,e)}}}EncodeMove(t,s,i,e,h,n,o,a){return t|s<<6|i<<12|e<<16|h<<20|n<<21|o<<22|a<<23}GetMoveSource(t){return 63&t}GetMoveTarget(t){return(4032&t)>>6}GetMovePiece(t){return(61440&t)>>12}GetMovePromoted(t){return(983040&t)>>16}GetMoveCapture(t){return 1048576&t}GetMoveDouble(t){return 2097152&t}GetMoveEnPassant(t){return 4194304&t}GetMoveCastling(t){return 8388608&t}AddMove(t,s){t.list.push(s)}TakeBack(){const t=this.moveStack.pop();this.bitboards=t.bitboards,this.occupancies=t.occupancies,this.side=t.side,this.enpassant=t.enpassant,this.castle=t.castle,this.hashKey=t.hashKey}MakeMove(t){this.moveStack.push({bitboards:this.bitboards.slice(0),occupancies:this.occupancies.slice(0),side:this.side,enpassant:this.enpassant,castle:this.castle,hashKey:this.hashKey});const s=63&t,i=(4032&t)>>6,n=(61440&t)>>12,o=(983040&t)>>16,r=1048576&t,l=2097152&t,p=4194304&t,d=8388608&t;if(this.bitboards[n]=this.RemoveBit(this.bitboards[n],s),this.bitboards[n]=this.SetBit(this.bitboards[n],i),this.hashKey^=this.pieceKeys[n][s],this.hashKey^=this.pieceKeys[n][i],r){let t,s;this.side===h.White?(t=a.p,s=a.k):(t=a.P,s=a.K);for(let e=t;e<=s;e++)if(this.GetBit(this.bitboards[e],i)){this.bitboards[e]=this.RemoveBit(this.bitboards[e],i),this.hashKey^=this.pieceKeys[e][i];break}}if(o&&(this.side===h.White?(this.bitboards[n]=this.RemoveBit(this.bitboards[a.P],i),this.hashKey^=this.pieceKeys[a.P][i]):(this.bitboards[n]=this.RemoveBit(this.bitboards[a.p],i),this.hashKey^=this.pieceKeys[a.p][i]),this.bitboards[o]=this.SetBit(this.bitboards[o],i),this.hashKey^=this.pieceKeys[o][i]),p&&(this.side===h.White?(this.bitboards[a.p]=this.RemoveBit(this.bitboards[a.p],i+8),this.hashKey^=this.pieceKeys[a.p][i+8]):(this.bitboards[a.P]=this.RemoveBit(this.bitboards[a.P],i-8),this.hashKey^=this.pieceKeys[a.P][i-8])),this.enpassant!==e.no_sq&&(this.hashKey^=this.enpassantKeys[this.enpassant]),this.enpassant=e.no_sq,l){const t=i+8*(-1)**this.side;this.enpassant=t,this.hashKey^=this.enpassantKeys[t]}if(d)switch(i){case e.g1:this.bitboards[a.R]=this.RemoveBit(this.bitboards[a.R],e.h1),this.bitboards[a.R]=this.SetBit(this.bitboards[a.R],e.f1),this.hashKey^=this.pieceKeys[a.R][e.h1],this.hashKey^=this.pieceKeys[a.R][e.f1];break;case e.c1:this.bitboards[a.R]=this.RemoveBit(this.bitboards[a.R],e.a1),this.bitboards[a.R]=this.SetBit(this.bitboards[a.R],e.d1),this.hashKey^=this.pieceKeys[a.R][e.a1],this.hashKey^=this.pieceKeys[a.R][e.d1];break;case e.g8:this.bitboards[a.r]=this.RemoveBit(this.bitboards[a.r],e.h8),this.bitboards[a.r]=this.SetBit(this.bitboards[a.r],e.f8),this.hashKey^=this.pieceKeys[a.r][e.h8],this.hashKey^=this.pieceKeys[a.r][e.f8];break;case e.c8:this.bitboards[a.r]=this.RemoveBit(this.bitboards[a.r],e.a8),this.bitboards[a.r]=this.SetBit(this.bitboards[a.r],e.d8),this.hashKey^=this.pieceKeys[a.r][e.a8],this.hashKey^=this.pieceKeys[a.r][e.d8]}return this.hashKey^=this.castleKeys[this.castle],this.castle&=c[s]&c[i],this.hashKey^=this.castleKeys[this.castle],this.occupancies=[0n,0n,0n],this.occupancies[h.White]=this.bitboards[a.P]|this.bitboards[a.N]|this.bitboards[a.B]|this.bitboards[a.R]|this.bitboards[a.Q]|this.bitboards[a.K],this.occupancies[h.Black]=this.bitboards[a.p]|this.bitboards[a.n]|this.bitboards[a.b]|this.bitboards[a.r]|this.bitboards[a.q]|this.bitboards[a.k],this.occupancies[h.Both]=this.occupancies[h.White]|this.occupancies[h.Black],this.side^=1,this.hashKey^=this.sideKey,this.IsSquareAttacked(this.side===h.White?this.GetLS1B(this.bitboards[a.k]):this.GetLS1B(this.bitboards[a.K]),this.side)?(this.TakeBack(),0):1}InitHashTable(t=16*this.hashSize/1048576||32){t>512||t<1?(this.hashSize=2097152,console.log(`Unable to set hash table size to ${t}. Setting to default of 32MB`)):(this.hashSize=1048576*t/16,console.log(`Hash table size set to: ${t}MB`)),this.hashTable={key:new BigUint64Array(this.hashSize),depth:new Uint8Array(this.hashSize),flag:new Uint8Array(this.hashSize),score:new Int32Array(this.hashSize),move:new Uint32Array(this.hashSize)}}WriteHash(t,s,i,e){const h=Number(this.hashKey%BigInt(this.hashSize));if(i>this.MATE_SCORE&&(i+=this.ply),i<-this.MATE_SCORE&&(i-=this.ply),this.hashTable.key[h]=this.hashKey,this.hashTable.key[h]<0n||0n===this.hashTable.key[h])throw new Error(`Bad hash key: ${this.hashTable.key[h]} (${this.hashKey})`);this.hashTable.score[h]=i,this.hashTable.flag[h]=s,this.hashTable.depth[h]=t,this.hashTable.move[h]=e}ProbeHash(){const t=Number(this.hashKey%BigInt(this.hashSize)),s={key:this.hashTable.key[t],depth:this.hashTable.depth[t],flag:this.hashTable.flag[t],score:this.hashTable.score[t],move:this.hashTable.move[t]};return s.key===this.hashKey?s:this.hashNoMove}SetFileRankMask(t,s){let i=0n;for(let e=0;e<8;e++)for(let h=0;h<8;h++){const n=8*e+h;-1!==t&&h===t&&(i|=this.SetBit(i,n)),-1!==s&&e===s&&(i|=this.SetBit(i,n))}return i}InitEvalMasks(){for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=8*t+s;this.fileMasks[i]|=this.SetFileRankMask(s,-1),this.rankMasks[i]|=this.SetFileRankMask(-1,t),this.isolatedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s+1,-1),this.wPassedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s,-1)|this.SetFileRankMask(s+1,-1),this.bPassedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s,-1)|this.SetFileRankMask(s+1,-1);for(let e=0;e<8-t;e++)this.wPassedMasks[i]&=~this.rankMasks[8*(7-e)+s];for(let e=0;e<t+1;e++)this.bPassedMasks[i]&=~this.rankMasks[8*e+s]}}CheckTime(){const t=Date.now()-this.timing.startTime;this.timing.moveTime&&t>=this.timing.moveTime&&(this.shouldStop=!0)}Evaluate(){let t=0,s=0,e=24;for(let h=a.P;h<=a.k;h++){let n=this.bitboards[h];if(n){const o=this.CountBits(n);for(t+=o*this.pieceValue[i.Opening][h],s+=o*this.pieceValue[i.Opening][h];n;){let o=this.GetLS1B(n);if(h<=5?(t+=this.pieceSquareValues[i.Opening][h][o],s+=this.pieceSquareValues[i.Endgame][h][o]):(t-=this.pieceSquareValues[i.Opening][h-6][56^o],s-=this.pieceSquareValues[i.Endgame][h-6][56^o]),h!==a.Q&&h!==a.q||(e-=4),h!==a.N&&h!==a.n||(e-=1),h!==a.B&&h!==a.b||(e-=1),h===a.P&&(0n!==this.GetBit(this.bitboards[a.P],o+8)&&(t-=this.doubledPenalty,s-=this.doubledPenalty),0n===(this.bitboards[a.P]&this.isolatedMasks[o])&&(t-=this.isolatedPenalty,s-=this.isolatedPenalty),0n===(this.wPassedMasks[o]&this.bitboards[a.p]))){const i=7-(o>>3);t+=this.passedBonus[i],s+=this.passedBonus[i]}if(h===a.p&&(0n!==this.GetBit(this.bitboards[a.p],o-8)&&(t+=this.doubledPenalty,s+=this.doubledPenalty),0n===(this.bitboards[a.p]&this.isolatedMasks[56^o])&&(t+=this.isolatedPenalty,s+=this.isolatedPenalty),0n===(this.bPassedMasks[o]&this.bitboards[a.P]))){const i=7-((56^o)>>3);t-=this.passedBonus[i],s-=this.passedBonus[i]}h===a.R&&(0n===(this.bitboards[a.P]&this.fileMasks[o])&&(t+=this.fileSemiOpenScore,s+=this.fileSemiOpenScore),0n===((this.bitboards[a.P]|this.bitboards[a.p])&this.fileMasks[o])&&(t+=this.fileOpenScore,s+=this.fileOpenScore),e-=2),h===a.r&&(0n===(this.bitboards[a.p]&this.fileMasks[56^o])&&(t-=this.fileSemiOpenScore,s-=this.fileSemiOpenScore),0n===((this.bitboards[a.P]|this.bitboards[a.p])&this.fileMasks[56^o])&&(t-=this.fileOpenScore,s-=this.fileOpenScore),e-=2),n=this.RemoveBit(n,o)}}}return e=(256*e+12)/24|0,((t*(256-e)+s*e)/256|0)*(-1)**this.side}Search(t){this.followPv=!1,this.scorePv=!1,this.nodesCount=0,this.killerMoves=Array(2).fill(0).map((()=>Array(this.maxPly).fill(0))),this.historyMoves=Array(64).fill(0).map((()=>Array(64).fill(0))),this.pvLength=[],this.pvTable=Array(this.maxPly).fill(0).map((()=>Array(this.maxPly).fill(0))),this.timing.startTime=Date.now();let s=-this.INFINITY,i=this.INFINITY,e=-this.INFINITY,h=-this.INFINITY;for(let n=1;!this.shouldStop&&n<=t;n++){for(this.followPv=!0,n>=4&&(h=50,s=Math.max(e-h,-this.INFINITY),i=Math.min(e+h,this.INFINITY));e=this.Negamax(s,i,n,!0),!this.shouldStop;){if(e<=s)i=(s+i)/2,s=Math.max(e-h,-this.INFINITY);else{if(!(e>=i))break;i=Math.min(e+h,this.INFINITY)}h+=Math.floor(h/4)+5}if(this.shouldStop)break;const t=()=>e<-this.IS_MATE?"mate "+(-this.MATE_SCORE-e)/-2:e>this.IS_MATE?"mate "+(this.MATE_SCORE-e+1)/2:`cp ${e}`,o=()=>{let t="";for(let s=0;s<this.pvLength[0];s++)t+=`${r[this.GetMoveSource(this.pvTable[0][s])]}${r[this.GetMoveTarget(this.pvTable[0][s])]}${this.GetMovePromoted(this.pvTable[0][s])?this.promotedPieces[this.GetMovePromoted(this.pvTable[0][s])]:""}`,t+=" ";return t};if(console.log(`info score ${t()} depth ${n} nodes ${this.nodesCount} time ${Date.now()-this.timing.startTime} pv ${o()}`),e>this.IS_MATE||e<-this.IS_MATE)break}return console.log(`bestmove ${r[this.GetMoveSource(this.pvTable[0][0])]}${r[this.GetMoveTarget(this.pvTable[0][0])]}${this.GetMovePromoted(this.pvTable[0][0])?this.promotedPieces[this.GetMovePromoted(this.pvTable[0][0])]:""}`),`${r[this.GetMoveSource(this.pvTable[0][0])]}${r[this.GetMoveTarget(this.pvTable[0][0])]}${this.GetMovePromoted(this.pvTable[0][0])?this.promotedPieces[this.GetMovePromoted(this.pvTable[0][0])]:""}`}Negamax(t,s,n,o){let r=0,c=0,l=-this.INFINITY,p=this.hashAlpha,d=0;const b=s>1+t;if(this.pvLength[this.ply]=this.ply,this.nodesCount++,this.CheckTime(),this.shouldStop)return 0;const k=this.ProbeHash();if(d="number"!=typeof k?k.move:this.hashNoMove,this.ply&&!b&&"number"!=typeof k){let i=k.score;if(k.depth>=n&&(i>this.MATE_SCORE&&(i-=this.ply),i<-this.MATE_SCORE&&(i+=this.ply),k.flag===this.hashExact||(k.flag===this.hashBeta?k.score>=s:k.score<=t)))return i}if(this.ply&&this.IsRepetition())return 0;if(0===n)return this.Quiescence(t,s);if(this.ply>=this.maxPly)return this.Evaluate();const f=this.MATE_SCORE-this.ply;if(f<s&&(s=f,t>=f))return f;if(-f>t&&(t=-f,s<=-f))return-f;const u=this.IsSquareAttacked(this.side===h.White?this.GetLS1B(this.bitboards[a.K]):this.GetLS1B(this.bitboards[a.k]),1^this.side);if(u&&n++,o&&!u&&!b){const h=this.Evaluate();if(this.ply&&n>2&&h>=s&&(this.moveStack.push({bitboards:this.bitboards.slice(0),occupancies:this.occupancies.slice(0),side:this.side,enpassant:this.enpassant,castle:this.castle,hashKey:this.hashKey}),this.enpassant!==e.no_sq&&(this.hashKey^=this.enpassantKeys[this.enpassant]),this.side^=1,this.enpassant=e.no_sq,this.hashKey^=this.sideKey,this.ply++,l=-this.Negamax(-s,1-s,n-3,!1),this.ply--,this.TakeBack(),l>=s))return s;if(n<2){let e=h+this.pieceValue[i.Opening][a.P];if(e<s){if(1===n){let i=this.Quiescence(t,s);return Math.max(i,e)}if(e+=2*this.pieceValue[i.Opening][a.P],e<s&&n<=3){let i=this.Quiescence(t,s);if(i<s)return Math.max(i,e)}}}}const v={list:[]};this.GenerateMoves(v),this.followPv&&this.EnabledPVScoring(v),v.list=this.SortMoves(v,d);for(let i=0;i<v.list.length;i++)if(this.ply++,this.MakeMove(v.list[i])){if(c++,n>=3&&r>=4&&!u&&!this.GetMoveCapture(v.list[i])&&!this.GetMovePromoted(v.list[i])){const i=r<=6?1:Math.floor(n/3);l=-this.Negamax(-t-1,-t,n-1-i,!0),l>t&&(l=-this.Negamax(-s,-t,n-1,!0))}else l=-this.Negamax(-s,-t,n-1,!0);if(this.ply--,this.TakeBack(),this.shouldStop)return 0;if(r++,l>t){p=this.hashExact,d=v.list[i],this.GetMoveCapture(v.list[i])||(this.historyMoves[this.GetMoveSource(v.list[i])][this.GetMoveTarget(v.list[i])]+=n*n),t=l,this.pvTable[this.ply][this.ply]=v.list[i];for(let t=this.ply+1;t<this.pvLength[this.ply+1];t++)this.pvTable[this.ply][t]=this.pvTable[this.ply+1][t];this.pvLength[this.ply]=this.pvLength[this.ply+1]}if(l>=s)return this.WriteHash(n,this.hashBeta,l,v.list[i]),this.GetMoveCapture(v.list[i])||(this.killerMoves[1][this.ply]=this.killerMoves[0][this.ply],this.killerMoves[0][this.ply]=v.list[i]),s}else this.ply--;return c?(this.WriteHash(n,p,l,d),t):u?-this.MATE_SCORE+this.ply:0}Quiescence(t,s){if(this.nodesCount++,this.ply>=this.maxPly)return this.Evaluate();const i=this.Evaluate();if(i>=s)return s;if(i<t-900)return t;t<i&&(t=i);const e={list:[]};this.GenerateMoves(e,!0),e.list=this.SortMoves(e);for(let i=0;i<e.list.length;i++){if(this.ply++,!this.MakeMove(e.list[i])){this.ply--;continue}let h=-this.Quiescence(-s,-t);if(this.ply--,this.TakeBack(),this.shouldStop)return 0;if(h>t&&(t=h,h>=s))return s}return t}IsRepetition(){let t=0;for(let s=4;s<=this.moveStack.length;s+=2)this.moveStack[this.moveStack.length-s].hashKey===this.hashKey&&t++;return t>=2}EnabledPVScoring(t){this.followPv=!1;for(let s=0;s<t.list.length;s++)this.pvTable[0][this.ply]===t.list[s]&&(this.scorePv=!0,this.followPv=!0)}ScoreMove(t){if(this.scorePv&&this.pvTable[0][this.ply]===t)return this.scorePv=!1,this.INFINITY;if(this.GetMoveCapture(t)){let s,i,e=a.P;this.side===h.White?(s=a.p,i=a.k):(s=a.P,i=a.K);for(let h=s;h<=i;h++)if(this.GetBit(this.bitboards[h],this.GetMoveTarget(t))){e=h;break}return Math.abs(this.pieceValue[this.gamePhase][Math.abs(e)])-(this.GetMovePiece(t)+1)+1e4}return this.killerMoves[0][this.ply]===t?9e3:this.killerMoves[1][this.ply]===t?8e3:this.historyMoves[this.GetMoveSource(t)][this.GetMoveTarget(t)]}SortMoves(t,s=0){const i=t.list.map(((t,i)=>{let e=0;return e=t===s?3e4:this.ScoreMove(t),{i,value:e}}));return i.sort(((t,s)=>t.value<s.value?1:t.value>s.value?-1:0)),i.map((s=>t.list[s.i]))}Perft(t){const s=Date.now(),i={list:[]};this.GenerateMoves(i);for(let s=0;s<i.list.length;s++){if(!this.MakeMove(i.list[s]))continue;let e=this.PerftDriver(t-1);console.log(`${r[this.GetMoveSource(i.list[s])]}${r[this.GetMoveTarget(i.list[s])]}: ${e}`),this.TakeBack()}console.log(`Time taken: ${Date.now()-s} ms`),console.log(`Nodes: ${this.nodesCount.toLocaleString()}`)}PerftDriver(t){let s=0;if(0===t)return this.nodesCount++,1;const i={list:[]};this.GenerateMoves(i);for(let e=0;e<i.list.length;e++)this.MakeMove(i.list[e])&&(s+=this.PerftDriver(t-1),this.TakeBack());return s}ParseUCIMove(t){const s={list:[]};this.GenerateMoves(s);for(let i=0;i<s.list.length;i++)if(r[this.GetMoveSource(s.list[i])]+r[this.GetMoveTarget(s.list[i])]+(this.GetMovePromoted(s.list[i])?this.promotedPieces[this.GetMovePromoted(s.list[i])]:"")===t)return s.list[i];return 0}ParseUCIPosition(t){const s=t.split(" ").slice(1).join(" ");s.startsWith("startpos")?this.ParseFEN(k.positions.start):s.startsWith("fen")?this.ParseFEN(s.split(" ").slice(1).join(" ")):this.ParseFEN(k.positions.start);const i=s.split("moves ").slice(1).join(" ").split(" ").filter((t=>""!=t));this.totalMoves=i.length;for(let s=0;s<i.length;s++){const e=this.ParseUCIMove(i[s]);if(!e){console.error("Unable to parse UCI command"),console.log(`Command: ${t}`),console.log(`Invalid move: ${i[s]}`);break}this.MakeMove(e)}this.PrintBoard(!0)}ParseUCIGo(t){this.timing.startTime=0,this.timing.moveTime=0,this.shouldStop=!1;let s=parseInt((t.match(/movetime (\d+)/)||[])[1])||0,i=parseInt((t.match(/depth (\d+)/)||[])[1])||64;if(!s){let i,e,n=parseInt((t.match(/movestogo (\d+)/)||[])[1])||35;this.side===h.White?(e=parseInt((t.match(/winc (\d+)/)||[])[1])||0,i=parseInt((t.match(/wtime (\d+)/)||[])[1])||0):(e=parseInt((t.match(/binc (\d+)/)||[])[1])||0,i=parseInt((t.match(/btime (\d+)/)||[])[1])||0),n=this.totalMoves<=20?45-this.totalMoves:25,s=i/n+e}return(i>64||i<=0)&&(i=64),console.log(`Move time: ${s}`),this.timing.moveTime=s,this.Search(i)}}k.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const f=k})(),Engine=s.default})();