var Engine;(()=>{"use strict";var t={d:(s,i)=>{for(var e in i)t.o(i,e)&&!t.o(s,e)&&Object.defineProperty(s,e,{enumerable:!0,get:i[e]})},o:(t,s)=>Object.prototype.hasOwnProperty.call(t,s)},s={};(()=>{var i,e,n,h,a,o;t.d(s,{default:()=>f}),function(t){t[t.Opening=0]="Opening",t[t.Endgame=1]="Endgame",t[t.MiddleGame=2]="MiddleGame"}(i||(i={})),function(t){t[t.a8=0]="a8",t[t.b8=1]="b8",t[t.c8=2]="c8",t[t.d8=3]="d8",t[t.e8=4]="e8",t[t.f8=5]="f8",t[t.g8=6]="g8",t[t.h8=7]="h8",t[t.a7=8]="a7",t[t.b7=9]="b7",t[t.c7=10]="c7",t[t.d7=11]="d7",t[t.e7=12]="e7",t[t.f7=13]="f7",t[t.g7=14]="g7",t[t.h7=15]="h7",t[t.a6=16]="a6",t[t.b6=17]="b6",t[t.c6=18]="c6",t[t.d6=19]="d6",t[t.e6=20]="e6",t[t.f6=21]="f6",t[t.g6=22]="g6",t[t.h6=23]="h6",t[t.a5=24]="a5",t[t.b5=25]="b5",t[t.c5=26]="c5",t[t.d5=27]="d5",t[t.e5=28]="e5",t[t.f5=29]="f5",t[t.g5=30]="g5",t[t.h5=31]="h5",t[t.a4=32]="a4",t[t.b4=33]="b4",t[t.c4=34]="c4",t[t.d4=35]="d4",t[t.e4=36]="e4",t[t.f4=37]="f4",t[t.g4=38]="g4",t[t.h4=39]="h4",t[t.a3=40]="a3",t[t.b3=41]="b3",t[t.c3=42]="c3",t[t.d3=43]="d3",t[t.e3=44]="e3",t[t.f3=45]="f3",t[t.g3=46]="g3",t[t.h3=47]="h3",t[t.a2=48]="a2",t[t.b2=49]="b2",t[t.c2=50]="c2",t[t.d2=51]="d2",t[t.e2=52]="e2",t[t.f2=53]="f2",t[t.g2=54]="g2",t[t.h2=55]="h2",t[t.a1=56]="a1",t[t.b1=57]="b1",t[t.c1=58]="c1",t[t.d1=59]="d1",t[t.e1=60]="e1",t[t.f1=61]="f1",t[t.g1=62]="g1",t[t.h1=63]="h1",t[t.no_sq=64]="no_sq"}(e||(e={})),function(t){t[t.White=0]="White",t[t.Black=1]="Black",t[t.Both=2]="Both"}(n||(n={})),function(t){t[t.rook=0]="rook",t[t.bishop=1]="bishop"}(h||(h={})),function(t){t[t.wk=1]="wk",t[t.wq=2]="wq",t[t.bk=4]="bk",t[t.bq=8]="bq"}(a||(a={})),function(t){t[t.P=0]="P",t[t.N=1]="N",t[t.B=2]="B",t[t.R=3]="R",t[t.Q=4]="Q",t[t.K=5]="K",t[t.p=6]="p",t[t.n=7]="n",t[t.b=8]="b",t[t.r=9]="r",t[t.q=10]="q",t[t.k=11]="k"}(o||(o={}));const r=[0,1,1,2,4,0,0,1,1,2,4,0],c=["a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1"],l=[7,15,15,15,3,15,15,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,12,15,15,14],d=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n,65n];let p=1804289383;function b(){let t=p;return t^=t<<13,t^=t>>>17,t^=t<<5,p=t,BigInt.asUintN(32,BigInt(t))}function k(){const t=BigInt.asUintN(64,0xffffn&b()),s=BigInt.asUintN(64,0xffffn&b()),i=BigInt.asUintN(64,0xffffn&b()),e=BigInt.asUintN(64,0xffffn&b());return BigInt.asUintN(64,BigInt(t|s<<16n|i<<32n|e<<48n))}class B{constructor(t){this.name="KhepriChess",this.version="1.0.0",this.author="Kurt Peters",this.bitboards=[0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n],this.occupancies=[0n,0n,0n],this.side=-1,this.enpassant=e.no_sq,this.castle=0,this.nodesCount=0,this.gamePhase=i.Opening,this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.asciiPieces="PNBRQKpnbrqk",this.unicodePieces=["♙","♘","♗","♖","♕","♔","♟︎","♞","♝","♜","♛","♚"],this.moveStack=[],this.pawnAttacks=Array.from(Array(2),(()=>new Array(64))),this.knightAttacks=Array(64),this.kingAttacks=Array(64),this.sliderRays=Array(64),this.bishopMasks=Array(64),this.bishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.bishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.rookMasks=Array(64),this.rookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.rookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.asciiEncodePieces={P:o.P,N:o.N,B:o.B,R:o.R,Q:o.Q,K:o.K,p:o.p,n:o.n,b:o.b,r:o.r,q:o.q,k:o.k},this.promotedPieces={[o.Q]:"q",[o.R]:"r",[o.B]:"b",[o.N]:"n",[o.q]:"q",[o.r]:"r",[o.b]:"b",[o.n]:"n"},this.rookMagicNumbers=[0x8a80104000800020n,0x140002000100040n,0x2801880a0017001n,0x100081001000420n,0x200020010080420n,0x3001c0002010008n,0x8480008002000100n,0x2080088004402900n,0x800098204000n,0x2024401000200040n,0x100802000801000n,0x120800800801000n,0x208808088000400n,0x2802200800400n,0x2200800100020080n,0x801000060821100n,0x80044006422000n,0x100808020004000n,0x12108a0010204200n,0x140848010000802n,0x481828014002800n,0x8094004002004100n,0x4010040010010802n,0x20008806104n,0x100400080208000n,0x2040002120081000n,0x21200680100081n,0x20100080080080n,0x2000a00200410n,0x20080800400n,0x80088400100102n,0x80004600042881n,0x4040008040800020n,0x440003000200801n,0x4200011004500n,0x188020010100100n,0x14800401802800n,0x2080040080800200n,0x124080204001001n,0x200046502000484n,0x480400080088020n,0x1000422010034000n,0x30200100110040n,0x100021010009n,0x2002080100110004n,0x202008004008002n,0x20020004010100n,0x2048440040820001n,0x101002200408200n,0x40802000401080n,0x4008142004410100n,0x2060820c0120200n,0x1001004080100n,0x20c020080040080n,0x2935610830022400n,0x44440041009200n,0x280001040802101n,0x2100190040002085n,0x80c0084100102001n,0x4024081001000421n,0x20030a0244872n,0x12001008414402n,0x2006104900a0804n,0x1004081002402n],this.bishopMagicNumbers=[0x40040844404084n,0x2004208a004208n,0x10190041080202n,0x108060845042010n,0x581104180800210n,0x2112080446200010n,0x1080820820060210n,0x3c0808410220200n,0x4050404440404n,0x21001420088n,0x24d0080801082102n,0x1020a0a020400n,0x40308200402n,0x4011002100800n,0x401484104104005n,0x801010402020200n,0x400210c3880100n,0x404022024108200n,0x810018200204102n,0x4002801a02003n,0x85040820080400n,0x810102c808880400n,0xe900410884800n,0x8002020480840102n,0x220200865090201n,0x2010100a02021202n,0x152048408022401n,0x20080002081110n,0x4001001021004000n,0x800040400a011002n,0xe4004081011002n,0x1c004001012080n,0x8004200962a00220n,0x8422100208500202n,0x2000402200300c08n,0x8646020080080080n,0x80020a0200100808n,0x2010004880111000n,0x623000a080011400n,0x42008c0340209202n,0x209188240001000n,0x400408a884001800n,0x110400a6080400n,0x1840060a44020800n,0x90080104000041n,0x201011000808101n,0x1a2208080504f080n,0x8012020600211212n,0x500861011240000n,0x180806108200800n,0x4000020e01040044n,0x300000261044000an,0x802241102020002n,0x20906061210001n,0x5a84841004010310n,0x4010801011c04n,0xa010109502200n,0x4a02012000n,0x500201010098b028n,0x8040002811040900n,0x28000010020204n,0x6000020202d0240n,0x8918844842082200n,0x4010011029020020n],this.pieceValue=[[90,320,350,475,950,15e3,-90,-320,-350,-475,-950,-15e3],[100,250,280,510,975,15e3,-100,-250,-280,-510,-975,-15e3]],this.pieceSquareValues=[[[0,0,0,0,0,0,0,0,-46,-48,-117,-21,-21,-48,-53,-117,5,-11,27,-10,20,88,-6,-11,0,-3,3,19,17,25,-5,-18,-18,-5,8,20,20,-7,-25,-40,-10,-10,10,2,12,-9,12,-2,-20,-5,-11,-13,-5,27,19,-2,0,0,0,0,0,0,0,0],[-227,-79,-67,-75,13,-113,-113,-131,-81,-56,41,25,73,41,6,-19,-26,4,25,73,73,113,68,13,5,8,5,38,20,46,8,13,-20,-10,17,5,19,22,8,-35,-30,-10,8,20,20,10,20,-35,-27,-35,-9,-5,-5,15,-18,-19,-37,-19,-51,-19,-35,-19,-19,-69],[-25,-41,-23,-41,-73,-41,5,-51,-41,3,-15,9,22,63,7,21,-13,-5,58,12,68,58,31,21,-25,-2,7,18,22,7,8,-9,-17,7,15,34,30,15,23,-25,21,31,10,17,17,26,23,21,-13,28,15,8,8,31,35,5,11,-17,0,-6,-17,-16,4,-14],[7,2,10,1,26,26,9,-9,-16,-21,-5,43,11,33,63,32,-9,-7,-8,5,5,21,21,21,-30,-17,5,5,-3,21,21,16,-30,-25,-25,-25,-17,-13,4,-30,-30,-25,-17,0,-3,-5,3,0,-30,-20,-20,-12,-12,2,2,-46,-10,-12,3,15,15,3,-46,-18],[-53,-10,20,31,31,78,0,-16,-48,-53,-21,-39,-11,78,30,142,-30,-25,5,21,53,73,73,73,-30,-13,-12,-3,5,21,5,21,-11,-3,-3,-3,5,5,21,2,-17,10,-2,10,2,10,10,-3,-17,5,12,12,14,20,21,11,11,-8,0,10,5,-16,-35,-6],[76,13,13,13,77,13,-19,13,13,13,13,11,13,13,-49,-19,-19,77,13,13,-22,13,13,-19,-19,-19,13,-9,-65,-35,-19,-51,-9,-9,-19,-39,-42,-55,-33,-41,-1,1,-45,-61,-45,-37,-15,-15,36,-5,-15,-73,-41,-9,17,20,-31,31,5,-61,10,-27,33,31]],[[0,0,0,0,0,0,0,0,66,61,63,15,-1,15,45,42,51,51,35,17,5,13,35,51,22,8,5,-11,-11,-8,7,14,9,3,-16,-22,-22,-8,6,3,-10,-3,-11,-3,-7,-3,-3,-10,2,-2,14,-6,-6,-2,2,-14,0,0,0,0,0,0,0,0],[21,-25,1,1,1,-15,-25,-75,-9,15,5,5,5,-3,-15,-25,-6,7,41,36,20,25,8,2,4,41,46,48,38,30,16,12,6,25,46,45,47,22,11,20,10,16,20,53,53,20,13,-1,0,4,5,27,22,21,5,11,-37,-39,1,1,1,33,-39,-37],[-5,-15,-7,5,9,1,-7,3,1,6,10,2,12,4,2,-31,6,20,22,25,17,30,12,15,15,20,25,28,31,13,20,-1,11,12,25,28,20,25,2,1,5,12,38,25,41,22,-11,-3,0,-11,10,15,30,12,10,-11,-17,9,-9,0,9,9,-15,3],[23,21,18,15,10,6,8,12,14,20,20,3,7,10,-6,-1,11,8,6,2,1,4,4,-5,7,2,3,0,-2,0,-7,-5,3,-2,2,2,2,-2,-10,-5,-12,-6,-6,-12,-16,-12,-20,-20,-12,-8,-6,-12,-12,-10,-12,-4,-13,-3,-7,-14,-22,-9,12,-33],[32,15,17,25,25,14,0,38,36,21,21,73,41,46,46,-112,-10,3,25,19,51,9,9,-28,-14,16,13,33,61,51,36,4,-11,8,13,45,37,27,20,0,-30,-26,24,-5,23,9,20,-10,-8,-3,-11,-9,-11,-24,-37,-37,-19,-33,-25,-29,-29,-33,-31,-53],[-57,-20,-23,-15,-15,1,-4,-45,-20,10,0,0,0,23,23,-4,-15,13,8,7,12,28,33,1,-29,1,13,15,23,23,15,1,-37,-7,13,19,20,22,7,-15,-33,-7,8,17,17,16,7,-15,-38,-13,3,7,7,9,-4,-28,-47,-38,-22,-15,-39,-17,-38,-201]]],this.hashKey=0n,this.pieceKeys=Array.from(Array(12),(()=>new Array(64))),this.enpassantKeys=[],this.castleKeys=[],this.sideKey=0n,this.hashSize=0,this.hashExact=0,this.hashAlpha=1,this.hashBeta=2,this.hashNoMove=0,this.hashTable={key:new BigUint64Array(this.hashSize),depth:new Uint8Array(this.hashSize),flag:new Uint8Array(this.hashSize),score:new Int32Array(this.hashSize),move:new Uint32Array(this.hashSize)},this.INFINITY=5e4,this.MATE_SCORE=49e3,this.maxPly=64,this.IS_MATE=this.MATE_SCORE-2*this.maxPly,this.ply=0,this.killerMoves=Array(2).fill(0).map((()=>Array(this.maxPly).fill(0))),this.historyMoves=Array(64).fill(0).map((()=>Array(64).fill(0))),this.pvLength=[],this.pvTable=Array(this.maxPly).fill(0).map((()=>Array(this.maxPly).fill(0))),this.followPv=!1,this.scorePv=!1,this.fileMasks=Array(64).fill(0n),this.rankMasks=Array(64).fill(0n),this.isolatedMasks=Array(64).fill(0n),this.wPassedMasks=Array(64).fill(0n),this.bPassedMasks=Array(64).fill(0n),this.MGdoubledPenalty=2,this.EGdoubledPenalty=15,this.MGisolatedPenalty=20,this.EGisolatedPenalty=2,this.MGpassedBonus=[0,5,1,3,15,30,100,0],this.EGpassedBonus=[0,0,4,10,25,60,120,0],this.fileSemiOpenScore=7,this.fileOpenScore=15,this.timing={startTime:0,moveTime:0},this.shouldStop=!1,this.totalMoves=0,this.InitJumperAttacks(),this.InitSliderAttacks(h.bishop),this.InitSliderAttacks(h.rook),this.InitSliderRays(),this.InitHashKeys(),this.InitHashTable(),this.InitEvalMasks(),t=t||B.positions.start,this.ParseFEN(t)}SetBit(t,s){return t|1n<<d[s]}RemoveBit(t,s){return t&~(1n<<d[s])}GetBit(t,s){return t&1n<<d[s]}CountBits(t){const s=Number(0xffffffffn&t),i=Number(t>>32n);function e(t){return 16843009*((t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135)>>24}return e(s)+e(i)}GetLS1B(t){return t?this.CountBits((t&-t)-1n):-1}SetOccupancy(t,s,i){let e=0n;for(let n=0;n<s;n++){const s=this.GetLS1B(i);i=this.RemoveBit(i,s),t&1<<n&&(e|=1n<<d[s])}return BigInt.asUintN(64,e)}PrintBitboard(t){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){const n=8*s+e;e||(i+=8-s+"  "),i+=" "+(this.GetBit(t,n)?"1":"0")}console.log(`${i} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${t}`)}PrintBoard(t=!1){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){let n=8*s+e,h=-1;e||(i+=8-s+" ");for(let t=o.P;t<=o.k;t++)this.GetBit(this.bitboards[t],n)&&(h=t);i+=t?-1===h?" . ":` ${this.unicodePieces[h]}`:-1===h?" . ":` ${this.asciiPieces[h]} `}console.log(`${i} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(0===this.side?"white":"black")),console.log(`En passant: ${this.enpassant!==e.no_sq?c[this.enpassant]:"no"}`),console.log(`Castling rights: ${this.castle&a.wk?"K":"-"}${this.castle&a.wq?"Q":"-"}${this.castle&a.bk?"k":"-"}${this.castle&a.bq?"q":"-"}`),console.log(`Hash key: ${this.hashKey.toString(16)}`),console.log("\r\n")}PrintAttackedSquares(t){for(let s=0;s<8;s++){let i="";for(let e=0;e<8;e++){const n=8*s+e;e||(i+=8-s+"  "),i+=` ${this.IsSquareAttacked(n,t)} `}console.log(`${i} \r\n`)}console.log("\r\n    a  b  c  d  e  f  g  h")}PrintMove(t){console.log(`${c[this.GetMoveSource(t)]}${c[this.GetMoveTarget(t)]}${this.GetMovePromoted(t)?this.promotedPieces[this.GetMovePromoted(t)]:""}`)}PrintMoveList(t){if(0===t.length)return void console.log("No moves in move list.");const s=[];for(let i=0;i<t.length;i++){const e=t[i];s.push({Move:`${c[this.GetMoveSource(e)]}${c[this.GetMoveTarget(e)]}${this.GetMovePromoted(e)?this.promotedPieces[this.GetMovePromoted(e)]:" "}`,Piece:`${this.unicodePieces[this.GetMovePiece(e)]}`,Capture:""+(this.GetMoveCapture(e)?1:0),Double:""+(this.GetMoveDouble(e)?1:0),EnPassant:""+(this.GetMoveEnPassant(e)?1:0),Castle:""+(this.GetMoveCastling(e)?1:0)})}console.table(s),console.log(`Total number of moves: ${t.length}`)}PrintMoveScores(t){const s=[];for(let i=0;i<t.length;i++)s.push({move:`${c[this.GetMoveSource(t[i])]}${c[this.GetMoveTarget(t[i])]}${this.GetMovePromoted(t[i])?this.promotedPieces[this.GetMovePromoted(t[i])]:" "}`,score:this.ScoreMove(t[i])});console.table(s)}ParseFEN(t){this.bitboards=[0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n,0n],this.occupancies=[0n,0n,0n],this.side=0,this.enpassant=e.no_sq,this.castle=0;let s=t.split(" ")[0].split("/");for(let t=0;t<8;t++){let i=s[t],e=0;for(const s of i){let i=8*t+e;if(s.toLocaleLowerCase()>="a"&&s.toLocaleLowerCase()<="z"){let t=this.asciiEncodePieces[s];this.bitboards[t]=this.SetBit(this.bitboards[t],i),e++}else s>="1"&&s<="8"?e+=parseInt(s,10):console.error(`Invalid FEN character: ${s}`)}}this.side="w"===t.split(" ")[1]?n.White:n.Black;const i=t.split(" ")[2].split("");for(const t of i)switch(t){case"K":this.castle|=a.wk;break;case"Q":this.castle|=a.wq;break;case"k":this.castle|=a.bk;break;case"q":this.castle|=a.bq}const h=t.split(" ")[3];if("-"!==h){const t="abcdefgh".indexOf(h.split("")[0]),s=8-parseInt(h[1],10);this.enpassant=8*s+t}else this.enpassant=e.no_sq;for(let t=o.P;t<=o.K;t++)this.occupancies[n.White]|=this.bitboards[t];for(let t=o.p;t<=o.k;t++)this.occupancies[n.Black]|=this.bitboards[t];this.occupancies[n.Both]|=this.occupancies[n.White]|this.occupancies[n.Black],this.hashKey=this.GenerateHashKeys()}InitHashKeys(){for(let t=o.P;t<=o.k;t++)for(let s=0;s<64;s++)this.pieceKeys[t][s]=k();for(let t=0;t<64;t++)this.enpassantKeys[t]=k();for(let t=0;t<16;t++)this.castleKeys[t]=k();this.sideKey=k()}GenerateHashKeys(){let t,s=0n;for(let i=o.P;i<=o.k;i++)for(t=this.bitboards[i];t;){const e=this.GetLS1B(t);s^=this.pieceKeys[i][e],t=this.RemoveBit(t,e)}return this.enpassant!==e.no_sq&&(s^=this.enpassantKeys[this.enpassant]),s^=this.castleKeys[this.castle],this.side===n.Black&&(s^=this.sideKey),s}MaskPawnAttacks(t,s){let i=0n,e=0n;return e=this.SetBit(e,s),t?(e<<7n&this.notHFile&&(i|=e<<7n),e<<9n&this.notAFile&&(i|=e<<9n)):(e>>7n&this.notAFile&&(i|=e>>7n),e>>9n&this.notHFile&&(i|=e>>9n)),BigInt.asUintN(64,i)}MaskKnightAttacks(t){let s=0n,i=0n;return i=this.SetBit(i,t),i>>17n&this.notHFile&&(s|=i>>17n),i>>15n&this.notAFile&&(s|=i>>15n),i>>10n&this.notHGFile&&(s|=i>>10n),i>>6n&this.notABFile&&(s|=i>>6n),i<<17n&this.notAFile&&(s|=i<<17n),i<<15n&this.notHFile&&(s|=i<<15n),i<<10n&this.notABFile&&(s|=i<<10n),i<<6n&this.notHGFile&&(s|=i<<6n),BigInt.asUintN(64,s)}MaskKingAttacks(t){let s=0n,i=0n;return i=this.SetBit(i,t),i>>8n&&(s|=i>>8n),i>>9n&this.notHFile&&(s|=i>>9n),i>>7n&this.notAFile&&(s|=i>>7n),i>>1n&this.notHFile&&(s|=i>>1n),i<<8n&&(s|=i<<8n),i<<9n&this.notAFile&&(s|=i<<9n),i<<7n&this.notHFile&&(s|=i<<7n),i<<1n&this.notAFile&&(s|=i<<1n),BigInt.asUintN(64,s)}MaskBishopAttacks(t){let s=0n;const i=Math.floor(t/8),e=t%8;for(let t=i+1,n=e+1;t<=6&&n<=6;t++,n++)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i-1,n=e+1;t>=1&&n<=6;t--,n++)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i+1,n=e-1;t<=6&&n>=1;t++,n--)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i-1,n=e-1;t>=1&&n>=1;t--,n--)s|=1n<<8n*BigInt(t)+BigInt(n);return BigInt.asUintN(64,s)}GenerateBishopAttacksFly(t,s){let i=0n;const e=Math.floor(t/8),n=t%8;for(let t=e+1,h=n+1;t<=7&&h<=7&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t++,h++);for(let t=e-1,h=n+1;t>=0&&h<=7&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t--,h++);for(let t=e+1,h=n-1;t<=7&&h>=0&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t++,h--);for(let t=e-1,h=n-1;t>=0&&h>=0&&(i|=1n<<8n*BigInt(t)+BigInt(h),!(1n<<8n*BigInt(t)+BigInt(h)&s));t--,h--);return BigInt.asUintN(64,i)}GetBishopAttacks(t,s){return s=BigInt.asUintN(64,s&this.bishopMasks[t]),s=BigInt.asUintN(64,s*this.bishopMagicNumbers[t]),s>>=64n-this.bishopRelevantBits[t],this.bishopAttacks[t][Number(s)]}MaskRookAttacks(t){let s=0n;const i=Math.floor(t/8),e=t%8;for(let t=i+1;t<=6;t++)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=i-1;t>=1;t--)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=e+1;t<=6;t++)s|=1n<<8n*BigInt(i)+BigInt(t);for(let t=e-1;t>=1;t--)s|=1n<<8n*BigInt(i)+BigInt(t);return BigInt.asUintN(64,s)}GenerateRookAttacksFly(t,s){let i=0n;const e=Math.floor(t/8),n=t%8;for(let t=e+1;t<=7&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t++);for(let t=e-1;t>=0&&(i|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&s));t--);for(let t=n+1;t<=7&&(i|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&s));t++);for(let t=n-1;t>=0&&(i|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&s));t--);return BigInt.asUintN(64,i)}GetRookAttacks(t,s){return s=BigInt.asUintN(64,s&this.rookMasks[t]),s=BigInt.asUintN(64,s*this.rookMagicNumbers[t]),s>>=64n-this.rookRelevantBits[t],this.rookAttacks[t][Number(s)]}GetQueenAttacks(t,s){return this.GetBishopAttacks(t,s)|this.GetRookAttacks(t,s)}InitSliderRays(){for(let t=0;t<64;t++){let s=0n;const i=Math.floor(t/8),e=t%8;for(let t=i+1,n=e+1;t<=7&&n<=7;t++,n++)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i-1,n=e+1;t>=0&&n<=7;t--,n++)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i+1,n=e-1;t<=7&&n>=0;t++,n--)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i-1,n=e-1;t>=0&&n>=0;t--,n--)s|=1n<<8n*BigInt(t)+BigInt(n);for(let t=i+1;t<=7;t++)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=i-1;t>=0;t--)s|=1n<<8n*BigInt(t)+BigInt(e);for(let t=e+1;t<=7;t++)s|=1n<<8n*BigInt(i)+BigInt(t);for(let t=e-1;t>=0;t--)s|=1n<<8n*BigInt(i)+BigInt(t);this.sliderRays[t]=BigInt.asUintN(64,s)}}InitSliderAttacks(t){for(let s=0;s<64;s++){this.bishopMasks[s]=this.MaskBishopAttacks(s),this.rookMasks[s]=this.MaskRookAttacks(s);const i=t?this.bishopMasks[s]:this.rookMasks[s],e=this.CountBits(i),n=1<<e;for(let h=0;h<n;h++)if(t){const t=this.SetOccupancy(h,e,i),n=BigInt.asUintN(64,t*this.bishopMagicNumbers[s])>>64n-this.bishopRelevantBits[s];this.bishopAttacks[s][Number(n)]=this.GenerateBishopAttacksFly(s,t)}else{const t=this.SetOccupancy(h,e,i),n=BigInt.asUintN(64,t*this.rookMagicNumbers[s])>>64n-this.rookRelevantBits[s];this.rookAttacks[s][Number(n)]=this.GenerateRookAttacksFly(s,t)}}}InitJumperAttacks(){for(let t=0;t<64;t++)this.pawnAttacks[n.White][t]=this.MaskPawnAttacks(n.White,t),this.pawnAttacks[n.Black][t]=this.MaskPawnAttacks(n.Black,t),this.knightAttacks[t]=this.MaskKnightAttacks(t),this.kingAttacks[t]=this.MaskKingAttacks(t)}IsSquareAttacked(t,s){let i,e,h,a,r;return s===n.White?(i=this.bitboards[o.B]|this.bitboards[o.Q],e=this.bitboards[o.R]|this.bitboards[o.Q],h=this.bitboards[o.P],a=this.bitboards[o.N],r=this.bitboards[o.K]):(i=this.bitboards[o.b]|this.bitboards[o.q],e=this.bitboards[o.r]|this.bitboards[o.q],h=this.bitboards[o.p],a=this.bitboards[o.n],r=this.bitboards[o.k]),this.pawnAttacks[1^s][t]&h||this.knightAttacks[t]&a||this.sliderRays[t]&i&&this.GetBishopAttacks(t,this.occupancies[n.Both])&i||this.sliderRays[t]&e&&this.GetRookAttacks(t,this.occupancies[n.Both])&e||this.kingAttacks[t]&r?1:0}FindMagicNumber(t,s,i){const e=new BigUint64Array(4096),n=new BigUint64Array(4096),h=new BigUint64Array(4096),a=i?this.MaskBishopAttacks(t):this.MaskRookAttacks(t),o=1n<<s;for(let s=0;s<o;s++)e[s]=this.SetOccupancy(s,Number(o),a),n[s]=i?this.GenerateBishopAttacksFly(t,e[s]):this.GenerateRookAttacksFly(t,e[s]);for(let t=0;t<1e8;t++){const t=BigInt.asUintN(64,k()&k()&k());if(this.CountBits(a*t&0xff00000000000000n)<6)continue;let i;for(let i=0,a=0;!a&&i<o;i++){const o=Number(BigInt.asIntN(16,e[i]*t>>64n-s));0n===h[o]?h[o]=n[i]:h[o]!==n[i]&&(a=1)}if(!i)return BigInt.asUintN(64,t)}return console.log("Magic number failed!"),0n}InitMagicNumbers(){for(let t=0;t<64;t++){let s=this.FindMagicNumber(t,this.bishopRelevantBits[t],h.bishop).toString(16);s.length%2&&(s="0"+s),console.log(`0x${s}n`)}}GeneratePawnMoves(t,s,i,h){const a=~this.occupancies[n.Both];let r,c=t===n.White?o.P:o.p;const l=(s,i)=>(t===n.White?i<<8n:i>>8n)&s,p=l(i,a),b=((s,i)=>{const e=t===n.White?0x000000ff00000000n:0x00000000ff000000n,h=(t===n.White?(i&e)<<8n:(i&e)>>8n)&i;return l(s,h)})(i,a);for(;i;){const a=this.GetLS1B(i),l=t===n.White?a-8:a+8;for(this.GetBit(i,a)&p&&((t===n.White?l<=e.h8:l>=e.a1)?(this.AddMove(s,this.EncodeMove(a,l,c,t===n.White?o.Q:o.q,0,0,0,0)),this.AddMove(s,this.EncodeMove(a,l,c,t===n.White?o.R:o.r,0,0,0,0)),this.AddMove(s,this.EncodeMove(a,l,c,t===n.White?o.B:o.b,0,0,0,0)),this.AddMove(s,this.EncodeMove(a,l,c,t===n.White?o.N:o.n,0,0,0,0))):h||this.AddMove(s,this.EncodeMove(a,l,c,0,0,0,0,0))),!h&&this.GetBit(i,a)&b&&this.AddMove(s,this.EncodeMove(a,t===n.White?a-16:a+16,c,0,0,1,0,0)),r=this.pawnAttacks[t][a]&this.occupancies[t===n.White?n.Black:n.White];r;){const i=this.GetLS1B(r);(t===n.White?i<=e.h8:i>=e.a1)?(this.AddMove(s,this.EncodeMove(a,i,c,t===n.White?o.Q:o.q,1,0,0,0)),this.AddMove(s,this.EncodeMove(a,i,c,t===n.White?o.R:o.r,1,0,0,0)),this.AddMove(s,this.EncodeMove(a,i,c,t===n.White?o.B:o.b,1,0,0,0)),this.AddMove(s,this.EncodeMove(a,i,c,t===n.White?o.N:o.n,1,0,0,0))):this.AddMove(s,this.EncodeMove(a,i,c,0,1,0,0,0)),r=this.RemoveBit(r,i)}if(this.enpassant!==e.no_sq){const t=this.pawnAttacks[this.side][a]&1n<<d[this.enpassant];if(t){const i=this.GetLS1B(t);this.AddMove(s,this.EncodeMove(a,i,c,0,1,0,1,0))}}i=this.RemoveBit(i,a)}}GenerateMoves(t,s=!1){let i;const h=this.bitboards[o.P],r=this.bitboards[o.p];this.GeneratePawnMoves(this.side,t,this.side===n.White?h:r,s);for(let h=o.P;h<=o.k;h++){if(i=this.bitboards[h],s||(this.side===n.White?h===o.K&&(this.castle&a.wk&&(this.GetBit(this.occupancies[n.Both],e.f1)||this.GetBit(this.occupancies[n.Both],e.g1)||this.IsSquareAttacked(e.e1,n.Black)||this.IsSquareAttacked(e.f1,n.Black)||this.AddMove(t,this.EncodeMove(e.e1,e.g1,h,0,0,0,0,1))),this.castle&a.wq&&(this.GetBit(this.occupancies[n.Both],e.d1)||this.GetBit(this.occupancies[n.Both],e.c1)||this.GetBit(this.occupancies[n.Both],e.b1)||this.IsSquareAttacked(e.e1,n.Black)||this.IsSquareAttacked(e.d1,n.Black)||this.AddMove(t,this.EncodeMove(e.e1,e.c1,h,0,0,0,0,1)))):h===o.k&&(this.castle&a.bk&&(this.GetBit(this.occupancies[n.Both],e.f8)||this.GetBit(this.occupancies[n.Both],e.g8)||this.IsSquareAttacked(e.e8,n.White)||this.IsSquareAttacked(e.f8,n.White)||this.AddMove(t,this.EncodeMove(e.e8,e.g8,h,0,0,0,0,1))),this.castle&a.bq&&(this.GetBit(this.occupancies[n.Both],e.d8)||this.GetBit(this.occupancies[n.Both],e.c8)||this.GetBit(this.occupancies[n.Both],e.b8)||this.IsSquareAttacked(e.e8,n.White)||this.IsSquareAttacked(e.d8,n.White)||this.AddMove(t,this.EncodeMove(e.e8,e.c8,h,0,0,0,0,1))))),this.side===n.White?h===o.N:h===o.n)for(;i;){const e=this.GetLS1B(i);let a=this.knightAttacks[e]&~this.occupancies[this.side];for(;a;){const i=this.GetLS1B(a),o=this.GetBit(this.side===n.White?this.occupancies[n.Black]:this.occupancies[n.White],i);s||o?o&&this.AddMove(t,this.EncodeMove(e,i,h,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,h,0,0,0,0,0)),a=this.RemoveBit(a,i)}i=this.RemoveBit(i,e)}if(this.side===n.White?h===o.B:h===o.b)for(;i;){const e=this.GetLS1B(i);let a=this.GetBishopAttacks(e,this.occupancies[n.Both])&~this.occupancies[this.side];for(;a;){const i=this.GetLS1B(a),o=this.GetBit(this.side===n.White?this.occupancies[n.Black]:this.occupancies[n.White],i);s||o?o&&this.AddMove(t,this.EncodeMove(e,i,h,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,h,0,0,0,0,0)),a=this.RemoveBit(a,i)}i=this.RemoveBit(i,e)}if(this.side===n.White?h===o.R:h===o.r)for(;i;){const e=this.GetLS1B(i);let a=this.GetRookAttacks(e,this.occupancies[n.Both])&~this.occupancies[this.side];for(;a;){const i=this.GetLS1B(a),o=this.GetBit(this.side===n.White?this.occupancies[n.Black]:this.occupancies[n.White],i);s||o?o&&this.AddMove(t,this.EncodeMove(e,i,h,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,h,0,0,0,0,0)),a=this.RemoveBit(a,i)}i=this.RemoveBit(i,e)}if(this.side===n.White?h===o.Q:h===o.q)for(;i;){const e=this.GetLS1B(i);let a=this.GetQueenAttacks(e,this.occupancies[n.Both])&~this.occupancies[this.side];for(;a;){const i=this.GetLS1B(a),o=this.GetBit(this.side===n.White?this.occupancies[n.Black]:this.occupancies[n.White],i);s||o?o&&this.AddMove(t,this.EncodeMove(e,i,h,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,h,0,0,0,0,0)),a=this.RemoveBit(a,i)}i=this.RemoveBit(i,e)}if(this.side===n.White?h===o.K:h===o.k)for(;i;){const e=this.GetLS1B(i);let a=this.kingAttacks[e]&~this.occupancies[this.side];for(;a;){const i=this.GetLS1B(a),o=this.GetBit(this.side===n.White?this.occupancies[n.Black]:this.occupancies[n.White],i);s||o?o&&this.AddMove(t,this.EncodeMove(e,i,h,0,1,0,0,0)):this.AddMove(t,this.EncodeMove(e,i,h,0,0,0,0,0)),a=this.RemoveBit(a,i)}i=this.RemoveBit(i,e)}}}EncodeMove(t,s,i,e,n,h,a,o){return t|s<<6|i<<12|e<<16|n<<20|h<<21|a<<22|o<<23}GetMoveSource(t){return 63&t}GetMoveTarget(t){return(4032&t)>>6}GetMovePiece(t){return(61440&t)>>12}GetMovePromoted(t){return(983040&t)>>16}GetMoveCapture(t){return 1048576&t}GetMoveDouble(t){return 2097152&t}GetMoveEnPassant(t){return 4194304&t}GetMoveCastling(t){return 8388608&t}AddMove(t,s){t.push(s)}TakeBack(){const t=this.moveStack.pop();this.bitboards=t.bitboards,this.occupancies=t.occupancies,this.side=t.side,this.enpassant=t.enpassant,this.castle=t.castle,this.hashKey=t.hashKey}MakeMove(t){this.moveStack.push({bitboards:this.bitboards.slice(0),occupancies:this.occupancies.slice(0),side:this.side,enpassant:this.enpassant,castle:this.castle,hashKey:this.hashKey});const s=63&t,i=(4032&t)>>6,h=(61440&t)>>12,a=(983040&t)>>16,r=1048576&t,c=2097152&t,d=4194304&t,p=8388608&t;if(this.bitboards[h]=this.RemoveBit(this.bitboards[h],s),this.bitboards[h]=this.SetBit(this.bitboards[h],i),this.hashKey^=this.pieceKeys[h][s],this.hashKey^=this.pieceKeys[h][i],r){let t,s;this.side===n.White?(t=o.p,s=o.k):(t=o.P,s=o.K);for(let e=t;e<=s;e++)if(this.GetBit(this.bitboards[e],i)){this.bitboards[e]=this.RemoveBit(this.bitboards[e],i),this.hashKey^=this.pieceKeys[e][i];break}}if(a&&(this.side===n.White?(this.bitboards[h]=this.RemoveBit(this.bitboards[o.P],i),this.hashKey^=this.pieceKeys[o.P][i]):(this.bitboards[h]=this.RemoveBit(this.bitboards[o.p],i),this.hashKey^=this.pieceKeys[o.p][i]),this.bitboards[a]=this.SetBit(this.bitboards[a],i),this.hashKey^=this.pieceKeys[a][i]),d&&(this.side===n.White?(this.bitboards[o.p]=this.RemoveBit(this.bitboards[o.p],i+8),this.hashKey^=this.pieceKeys[o.p][i+8]):(this.bitboards[o.P]=this.RemoveBit(this.bitboards[o.P],i-8),this.hashKey^=this.pieceKeys[o.P][i-8])),this.enpassant!==e.no_sq&&(this.hashKey^=this.enpassantKeys[this.enpassant]),this.enpassant=e.no_sq,c){const t=i+8*(-1)**this.side;this.enpassant=t,this.hashKey^=this.enpassantKeys[t]}if(p)switch(i){case e.g1:this.bitboards[o.R]=this.RemoveBit(this.bitboards[o.R],e.h1),this.bitboards[o.R]=this.SetBit(this.bitboards[o.R],e.f1),this.hashKey^=this.pieceKeys[o.R][e.h1],this.hashKey^=this.pieceKeys[o.R][e.f1];break;case e.c1:this.bitboards[o.R]=this.RemoveBit(this.bitboards[o.R],e.a1),this.bitboards[o.R]=this.SetBit(this.bitboards[o.R],e.d1),this.hashKey^=this.pieceKeys[o.R][e.a1],this.hashKey^=this.pieceKeys[o.R][e.d1];break;case e.g8:this.bitboards[o.r]=this.RemoveBit(this.bitboards[o.r],e.h8),this.bitboards[o.r]=this.SetBit(this.bitboards[o.r],e.f8),this.hashKey^=this.pieceKeys[o.r][e.h8],this.hashKey^=this.pieceKeys[o.r][e.f8];break;case e.c8:this.bitboards[o.r]=this.RemoveBit(this.bitboards[o.r],e.a8),this.bitboards[o.r]=this.SetBit(this.bitboards[o.r],e.d8),this.hashKey^=this.pieceKeys[o.r][e.a8],this.hashKey^=this.pieceKeys[o.r][e.d8]}return this.hashKey^=this.castleKeys[this.castle],this.castle&=l[s]&l[i],this.hashKey^=this.castleKeys[this.castle],this.occupancies=[0n,0n,0n],this.occupancies[n.White]=this.bitboards[o.P]|this.bitboards[o.N]|this.bitboards[o.B]|this.bitboards[o.R]|this.bitboards[o.Q]|this.bitboards[o.K],this.occupancies[n.Black]=this.bitboards[o.p]|this.bitboards[o.n]|this.bitboards[o.b]|this.bitboards[o.r]|this.bitboards[o.q]|this.bitboards[o.k],this.occupancies[n.Both]=this.occupancies[n.White]|this.occupancies[n.Black],this.side^=1,this.hashKey^=this.sideKey,this.IsSquareAttacked(this.side===n.White?this.GetLS1B(this.bitboards[o.k]):this.GetLS1B(this.bitboards[o.K]),this.side)?(this.TakeBack(),0):1}InitHashTable(t=16*this.hashSize/1048576||32){t>512||t<1?(this.hashSize=2097152,console.log(`Unable to set hash table size to ${t}. Setting to default of 32MB`)):(this.hashSize=1048576*t/16,console.log(`Hash table size set to: ${t}MB`)),this.hashTable={key:new BigUint64Array(this.hashSize),depth:new Uint8Array(this.hashSize),flag:new Uint8Array(this.hashSize),score:new Int32Array(this.hashSize),move:new Uint32Array(this.hashSize)}}WriteHash(t,s,i,e){const n=Number(this.hashKey%BigInt(this.hashSize));if(i>this.MATE_SCORE&&(i+=this.ply),i<-this.MATE_SCORE&&(i-=this.ply),this.hashTable.key[n]=this.hashKey,this.hashTable.key[n]<0n||0n===this.hashTable.key[n])throw new Error(`Bad hash key: ${this.hashTable.key[n]} (${this.hashKey})`);this.hashTable.score[n]=i,this.hashTable.flag[n]=s,this.hashTable.depth[n]=t,this.hashTable.move[n]=e}ProbeHash(){const t=Number(this.hashKey%BigInt(this.hashSize)),s={key:this.hashTable.key[t],depth:this.hashTable.depth[t],flag:this.hashTable.flag[t],score:this.hashTable.score[t],move:this.hashTable.move[t]};return s.key===this.hashKey?s:this.hashNoMove}SetFileRankMask(t,s){let i=0n;for(let e=0;e<8;e++)for(let n=0;n<8;n++){const h=8*e+n;-1!==t&&n===t&&(i|=this.SetBit(i,h)),-1!==s&&e===s&&(i|=this.SetBit(i,h))}return i}InitEvalMasks(){for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=8*t+s;this.fileMasks[i]|=this.SetFileRankMask(s,-1),this.rankMasks[i]|=this.SetFileRankMask(-1,t),this.isolatedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s+1,-1),this.wPassedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s,-1)|this.SetFileRankMask(s+1,-1),this.bPassedMasks[i]|=this.SetFileRankMask(s-1,-1)|this.SetFileRankMask(s,-1)|this.SetFileRankMask(s+1,-1)}for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=8*t+s;for(let t=i;t<63;t++)this.wPassedMasks[i]&=~this.rankMasks[t];for(let t=0;t<i;t++)this.bPassedMasks[i]&=~this.rankMasks[t]}}CheckTime(){const t=Date.now()-this.timing.startTime;this.timing.moveTime&&t>=this.timing.moveTime&&(this.shouldStop=!0)}Evaluate(){let t=[0,0],s=[0,0],e=24;for(let h=o.P;h<=o.k;h++){let a=this.bitboards[h];for(;a;){let c=this.GetLS1B(a);switch(h<=5?(t[n.White]+=this.pieceSquareValues[i.Opening][h][c],s[n.White]+=this.pieceSquareValues[i.Endgame][h][c],t[n.White]+=this.pieceValue[i.Opening][h],s[n.White]+=this.pieceValue[i.Endgame][h]):(t[n.Black]+=this.pieceSquareValues[i.Opening][h-6][56^c],s[n.Black]+=this.pieceSquareValues[i.Endgame][h-6][56^c],t[n.Black]+=this.pieceValue[i.Opening][h-6],s[n.Black]+=this.pieceValue[i.Endgame][h-6]),e-=r[h],h){case o.P:{const i=this.bitboards[o.P]&this.fileMasks[c];if(0n!==(i&i-1n)&&(t[n.White]-=this.MGdoubledPenalty,s[n.White]-=this.EGdoubledPenalty),0n===(this.bitboards[o.P]&this.isolatedMasks[c])&&(t[n.White]-=this.MGisolatedPenalty,s[n.White]-=this.EGisolatedPenalty),0n===(this.wPassedMasks[c]&this.bitboards[o.p])){const i=7-(c>>3);t[n.White]+=this.MGpassedBonus[i],s[n.White]+=this.EGpassedBonus[i]}break}case o.p:{const i=this.bitboards[o.p]&this.fileMasks[c];if(0n!==(i&i-1n)&&(t[n.Black]-=this.MGdoubledPenalty,s[n.Black]-=this.EGdoubledPenalty),0n===(this.bitboards[o.p]&this.isolatedMasks[c])&&(t[n.Black]-=this.MGisolatedPenalty,s[n.Black]-=this.EGisolatedPenalty),0n===(this.bPassedMasks[c]&this.bitboards[o.P])){const i=7-((56^c)>>3);t[n.Black]+=this.MGpassedBonus[i],s[n.Black]+=this.EGpassedBonus[i]}break}case o.R:0n===(this.bitboards[o.P]&this.fileMasks[c])&&(t[n.White]+=this.fileSemiOpenScore,s[n.White]+=this.fileSemiOpenScore),0n===((this.bitboards[o.P]|this.bitboards[o.p])&this.fileMasks[c])&&(t[n.White]+=this.fileOpenScore,s[n.White]+=this.fileOpenScore);break;case o.r:0n===(this.bitboards[o.p]&this.fileMasks[c])&&(t[n.Black]+=this.fileSemiOpenScore,s[n.Black]+=this.fileSemiOpenScore),0n===((this.bitboards[o.P]|this.bitboards[o.p])&this.fileMasks[c])&&(t[n.Black]+=this.fileOpenScore,s[n.Black]+=this.fileOpenScore)}a=this.RemoveBit(a,c)}}return e=(256*e+12)/24|0,((t[this.side]-t[1^this.side])*(256-e)+(s[this.side]-s[1^this.side])*e)/256|0}Search(t){this.followPv=!1,this.scorePv=!1,this.nodesCount=0,this.killerMoves=Array(2).fill(0).map((()=>Array(this.maxPly).fill(0))),this.historyMoves=Array(64).fill(0).map((()=>Array(64).fill(0))),this.pvLength=[],this.pvTable=Array(this.maxPly).fill(0).map((()=>Array(this.maxPly).fill(0))),this.timing.startTime=Date.now();let s="",i=-this.INFINITY,e=this.INFINITY,n=-this.INFINITY,h=-this.INFINITY;const a=()=>{const t=this.pvTable[0][0];return`${c[this.GetMoveSource(t)]}${c[this.GetMoveTarget(t)]}${this.GetMovePromoted(t)?this.promotedPieces[this.GetMovePromoted(t)]:""}`},o=()=>n<-this.IS_MATE?"mate "+(-this.MATE_SCORE-n)/2:n>this.IS_MATE?"mate "+(this.MATE_SCORE-n+1)/2:`cp ${n}`,r=()=>{let t="";for(let s=0;s<this.pvLength[0];s++)t+=`${c[this.GetMoveSource(this.pvTable[0][s])]}${c[this.GetMoveTarget(this.pvTable[0][s])]}${this.GetMovePromoted(this.pvTable[0][s])?this.promotedPieces[this.GetMovePromoted(this.pvTable[0][s])]:""}`,t+=" ";return t};t:for(let c=1;t<=this.maxPly&&c<=t;c++){for(this.followPv=!0,c>=4&&(h=50,i=Math.max(n-h,-this.INFINITY),e=Math.min(n+h,this.INFINITY));;){if(n=this.Negamax(i,e,c,!0),this.shouldStop){s=a();break t}if(n<=i)e=(i+e)/2,i=Math.max(n-h,-this.INFINITY);else{if(!(n>=e))break;e=Math.min(n+h,this.INFINITY)}h+=Math.floor(h/4)+5}if(s=a(),console.log(`info score ${o()} depth ${c} nodes ${this.nodesCount} time ${Date.now()-this.timing.startTime} pv ${r()}`),n>this.IS_MATE||n<-this.IS_MATE)break}return console.log(`bestmove ${s}`),s}Negamax(t,s,i,h){let a=0,r=-this.INFINITY,c=this.hashAlpha,l=0;const d=s>1+t;if(this.pvLength[this.ply]=this.ply,this.nodesCount++,this.CheckTime(),this.shouldStop)return 0;if(this.ply&&this.IsRepetition())return 0;if(0===i)return this.Quiescence(t,s,0);if(this.ply>=this.maxPly)return this.Evaluate();const p=this.IsSquareAttacked(this.side===n.White?this.GetLS1B(this.bitboards[o.K]):this.GetLS1B(this.bitboards[o.k]),1^this.side);p&&i++;const b=this.ProbeHash();if(l=b?b.move:this.hashNoMove,this.ply&&!d&&b){let e=b.score;if(b.depth>=i&&(e>this.MATE_SCORE&&(e-=this.ply),e<-this.MATE_SCORE&&(e+=this.ply),b.flag===this.hashExact||(b.flag===this.hashBeta?b.score>=s:b.score<=t)))return e}let k=this.MATE_SCORE-this.ply;if(k<s&&(s=k,t>=k))return k;if(k=-this.MATE_SCORE+this.ply,k>t&&(t=k,s<=k))return k;if(!p&&this.Evaluate()-90*i>=s)return s;if(h&&!p&&i>=3&&(this.moveStack.push({bitboards:this.bitboards.slice(0),occupancies:this.occupancies.slice(0),side:this.side,enpassant:this.enpassant,castle:this.castle,hashKey:this.hashKey}),this.enpassant!==e.no_sq&&(this.hashKey^=this.enpassantKeys[this.enpassant]),this.side^=1,this.enpassant=e.no_sq,this.hashKey^=this.sideKey,this.ply++,r=-this.Negamax(-s,1-s,i-3,!1),this.TakeBack(),this.ply--,r>=s))return r;if(i<=4&&t===s-1&&this.Evaluate()+150<s){const e=this.Quiescence(t,s,i);if(e<s)return e}let B=[];this.GenerateMoves(B),this.followPv&&this.EnabledPVScoring(B),B=this.SortMoves(B,l);for(let e=0;e<B.length;e++){this.ply++;const n=B[e];if(this.MakeMove(n)){if(a++,i>=3&&a>=4&&!p&&!this.GetMoveCapture(n)&&!this.GetMovePromoted(n)){const e=a<=6?1:Math.floor(i/3);r=-this.Negamax(-t-1,-t,i-1-e,!0),r>t&&(r=-this.Negamax(-s,-t,i-1,!0))}else r=-this.Negamax(-s,-t,i-1,!0);if(this.ply--,this.TakeBack(),this.shouldStop)return 0;if(r>t){c=this.hashExact,l=n,this.GetMoveCapture(n)||(this.historyMoves[this.GetMoveSource(n)][this.GetMoveTarget(n)]+=i*i),t=r,this.pvTable[this.ply][this.ply]=n;for(let t=this.ply+1;t<this.pvLength[this.ply+1];t++)this.pvTable[this.ply][t]=this.pvTable[this.ply+1][t];this.pvLength[this.ply]=this.pvLength[this.ply+1]}if(r>=s)return this.WriteHash(i,this.hashBeta,r,n),this.GetMoveCapture(n)||(this.killerMoves[1][this.ply]=this.killerMoves[0][this.ply],this.killerMoves[0][this.ply]=n),s}else this.ply--}return a?(this.WriteHash(i,c,r,l),t):p?-this.MATE_SCORE+this.ply:0}Quiescence(t,s,i){this.nodesCount++;const e=this.ProbeHash();if(this.ply&&"number"!=typeof e){let n=e.score;if(e.depth>=i&&(n>this.MATE_SCORE&&(n-=this.ply),n<-this.MATE_SCORE&&(n+=this.ply),e.flag===this.hashExact||(e.flag===this.hashBeta?e.score>=s:e.score<=t)))return n}if(this.ply>=this.maxPly)return this.Evaluate();const n=this.Evaluate();if(n>=s)return s;if(n<t-900)return t;t<n&&(t=n);let h=[];this.GenerateMoves(h,!0),h=this.SortMoves(h);for(let e=0;e<h.length;e++){if(this.ply++,!this.MakeMove(h[e])){this.ply--;continue}let n=-this.Quiescence(-s,-t,i);if(this.ply--,this.TakeBack(),this.shouldStop)return 0;if(n>t&&(t=n,n>=s))return s}return t}IsRepetition(){let t=0;for(let s=4;s<=this.moveStack.length;s+=2)this.moveStack[this.moveStack.length-s].hashKey===this.hashKey&&t++;return t>=2}EnabledPVScoring(t){this.followPv=!1;for(let s=0;s<t.length;s++)this.pvTable[0][this.ply]===t[s]&&(this.scorePv=!0,this.followPv=!0)}ScoreMove(t){if(this.scorePv&&this.pvTable[0][this.ply]===t)return this.scorePv=!1,this.INFINITY;if(this.GetMoveCapture(t)){let s,i,e=o.P;this.side===n.White?(s=o.p,i=o.k):(s=o.P,i=o.K);for(let n=s;n<=i;n++)if(this.GetBit(this.bitboards[n],this.GetMoveTarget(t))){e=n;break}let h=this.GetMovePiece(t);return h>5&&(h-=6),e>5&&(e-=6),this.pieceValue[this.gamePhase][e]-h+1e4}return this.killerMoves[0][this.ply]===t?9e3:this.killerMoves[1][this.ply]===t?8e3:this.historyMoves[this.GetMoveSource(t)][this.GetMoveTarget(t)]}SortMoves(t,s=0){const i=t.map(((t,i)=>{let e=0;return e=t===s?3e4:this.ScoreMove(t),{i,value:e}}));return i.sort(((t,s)=>t.value<s.value?1:t.value>s.value?-1:0)),i.map((s=>t[s.i]))}Perft(t,s=!1){return new Promise(((i,e)=>{const n=Date.now(),h=[];this.GenerateMoves(h);for(let i=0;i<h.length;i++){const e=h[i];if(!this.MakeMove(e))continue;let n=this.PerftDriver(t-1);s&&console.log(`${c[this.GetMoveSource(e)]}${c[this.GetMoveTarget(e)]}: ${n}`),this.TakeBack()}s&&(console.log(`Time taken: ${Date.now()-n} ms`),console.log(`Nodes: ${this.nodesCount.toLocaleString()}`)),i(this.nodesCount)}))}PerftDriver(t){let s=0;if(0===t)return this.nodesCount++,1;const i=[];this.GenerateMoves(i);for(let e=0;e<i.length;e++)this.MakeMove(i[e])&&(s+=this.PerftDriver(t-1),this.TakeBack());return s}ParseUCIMove(t){const s=[];this.GenerateMoves(s);for(let i=0;i<s.length;i++)if(c[this.GetMoveSource(s[i])]+c[this.GetMoveTarget(s[i])]+(this.GetMovePromoted(s[i])?this.promotedPieces[this.GetMovePromoted(s[i])]:"")===t)return s[i];return 0}ParseUCIPosition(t){const s=t.split(" ").slice(1).join(" ");s.startsWith("startpos")?this.ParseFEN(B.positions.start):s.startsWith("fen")?this.ParseFEN(s.split(" ").slice(1).join(" ")):this.ParseFEN(B.positions.start);const i=s.split("moves ").slice(1).join(" ").split(" ").filter((t=>""!=t));this.totalMoves=i.length;for(let s=0;s<i.length;s++){const e=this.ParseUCIMove(i[s]);if(!e){console.error("Unable to parse UCI command"),console.log(`Command: ${t}`),console.log(`Invalid move: ${i[s]}`);break}this.MakeMove(e)}this.PrintBoard(!0)}ParseUCIGo(t){this.timing.startTime=0,this.timing.moveTime=0,this.shouldStop=!1;let s=parseInt((t.match(/movetime (\d+)/)||[])[1])||0,i=parseInt((t.match(/depth (\d+)/)||[])[1])||64;if(!s){let i,e,h=parseInt((t.match(/movestogo (\d+)/)||[])[1])||35;this.side===n.White?(e=parseInt((t.match(/winc (\d+)/)||[])[1])||0,i=parseInt((t.match(/wtime (\d+)/)||[])[1])||0):(e=parseInt((t.match(/binc (\d+)/)||[])[1])||0,i=parseInt((t.match(/btime (\d+)/)||[])[1])||0),h=this.totalMoves<=20?45-this.totalMoves:25,s=i/h+e}return(i>64||i<=0)&&(i=64),console.log(`Move time: ${s}`),this.timing.moveTime=s,this.Search(i)}}B.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const f=B})(),Engine=s.default})();