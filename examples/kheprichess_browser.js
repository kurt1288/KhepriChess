var Engine;(()=>{"use strict";var t,i,s,e,o,n,h={d:(t,i)=>{for(var s in i)h.o(i,s)&&!h.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:i[s]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)},a={};h.d(a,{default:()=>c}),function(t){t[t.a8=0]="a8",t[t.b8=1]="b8",t[t.c8=2]="c8",t[t.d8=3]="d8",t[t.e8=4]="e8",t[t.f8=5]="f8",t[t.g8=6]="g8",t[t.h8=7]="h8",t[t.a7=8]="a7",t[t.b7=9]="b7",t[t.c7=10]="c7",t[t.d7=11]="d7",t[t.e7=12]="e7",t[t.f7=13]="f7",t[t.g7=14]="g7",t[t.h7=15]="h7",t[t.a6=16]="a6",t[t.b6=17]="b6",t[t.c6=18]="c6",t[t.d6=19]="d6",t[t.e6=20]="e6",t[t.f6=21]="f6",t[t.g6=22]="g6",t[t.h6=23]="h6",t[t.a5=24]="a5",t[t.b5=25]="b5",t[t.c5=26]="c5",t[t.d5=27]="d5",t[t.e5=28]="e5",t[t.f5=29]="f5",t[t.g5=30]="g5",t[t.h5=31]="h5",t[t.a4=32]="a4",t[t.b4=33]="b4",t[t.c4=34]="c4",t[t.d4=35]="d4",t[t.e4=36]="e4",t[t.f4=37]="f4",t[t.g4=38]="g4",t[t.h4=39]="h4",t[t.a3=40]="a3",t[t.b3=41]="b3",t[t.c3=42]="c3",t[t.d3=43]="d3",t[t.e3=44]="e3",t[t.f3=45]="f3",t[t.g3=46]="g3",t[t.h3=47]="h3",t[t.a2=48]="a2",t[t.b2=49]="b2",t[t.c2=50]="c2",t[t.d2=51]="d2",t[t.e2=52]="e2",t[t.f2=53]="f2",t[t.g2=54]="g2",t[t.h2=55]="h2",t[t.a1=56]="a1",t[t.b1=57]="b1",t[t.c1=58]="c1",t[t.d1=59]="d1",t[t.e1=60]="e1",t[t.f1=61]="f1",t[t.g1=62]="g1",t[t.h1=63]="h1",t[t.no_sq=64]="no_sq"}(t||(t={})),function(t){t[t.Pawn=0]="Pawn",t[t.Knight=1]="Knight",t[t.Bishop=2]="Bishop",t[t.Rook=3]="Rook",t[t.Queen=4]="Queen",t[t.King=5]="King"}(i||(i={})),function(t){t[t.White=0]="White",t[t.Black=1]="Black",t[t.Both=2]="Both"}(s||(s={})),function(t){t[t.WhiteKingside=1]="WhiteKingside",t[t.WhiteQueenside=2]="WhiteQueenside",t[t.BlackKingside=4]="BlackKingside",t[t.BlackQueenside=8]="BlackQueenside"}(e||(e={})),function(t){t[t.Quiet=0]="Quiet",t[t.DoublePawnPush=1]="DoublePawnPush",t[t.KingCastle=2]="KingCastle",t[t.QueenCastle=3]="QueenCastle",t[t.Capture=4]="Capture",t[t.EPCapture=5]="EPCapture",t[t.KnightPromotion=8]="KnightPromotion",t[t.BishopPromotion=9]="BishopPromotion",t[t.RookPromotion=10]="RookPromotion",t[t.QueenPromotion=11]="QueenPromotion",t[t.KnightPromoCapture=12]="KnightPromoCapture",t[t.BishopPromoCapture=13]="BishopPromoCapture",t[t.RookPromoCapture=14]="RookPromoCapture",t[t.QueenPromoCapture=15]="QueenPromoCapture"}(o||(o={})),function(t){t[t.Exact=0]="Exact",t[t.Alpha=1]="Alpha",t[t.Beta=2]="Beta"}(n||(n={}));class r{constructor(){this.name="KhepriChess",this.version="2.0.0",this.author="Kurt Peters",this.SquareBigInt=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n],this.Position={PiecesBB:[],OccupanciesBB:[0n,0n],Squares:[],CastlingRights:0,SideToMove:s.White,EnPassSq:0,HalfMoves:0,Ply:0,Hash:0n,PawnHash:0n},this.PositionHistory=[],this.CharToPiece={P:{Type:i.Pawn,Color:s.White},N:{Type:i.Knight,Color:s.White},B:{Type:i.Bishop,Color:s.White},R:{Type:i.Rook,Color:s.White},Q:{Type:i.Queen,Color:s.White},K:{Type:i.King,Color:s.White},p:{Type:i.Pawn,Color:s.Black},n:{Type:i.Knight,Color:s.Black},b:{Type:i.Bishop,Color:s.Black},r:{Type:i.Rook,Color:s.Black},q:{Type:i.Queen,Color:s.Black},k:{Type:i.King,Color:s.Black}},this.CastlingSquares=[7,15,15,15,3,15,15,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,12,15,15,14],this.stateCopy=[],this.rankMasks=[],this.fileMasks=[],this.diagMasks=[],this.antiDiagMasks=[],this.isolatedMasks=[],this.passedMasks=Array(2).fill(0).map((()=>Array(64).fill(0))),this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.PRNG_SEED=1n,this.Zobrist={Pieces:Array.from(Array(2),(()=>Array.from(Array(6),(()=>new Array(64))))),EnPassant:[],Castle:[],SideToMove:0n},this.HashNoMove=5e4,this.TranspositionTables={Entries:[],Size:0n},this.PawnHashTable={Entries:[],Size:0n},this.PawnAttacks=Array.from(Array(2),(()=>new Array(64))),this.KnightAttacks=[],this.KingAttacks=[],this.BishopMasks=Array(64),this.BishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.RookMasks=Array(64),this.RookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.BishopMagicNumbers=[0x40040844404084n,0x2004208a004208n,0x10190041080202n,0x108060845042010n,0x581104180800210n,0x2112080446200010n,0x1080820820060210n,0x3c0808410220200n,0x4050404440404n,0x21001420088n,0x24d0080801082102n,0x1020a0a020400n,0x40308200402n,0x4011002100800n,0x401484104104005n,0x801010402020200n,0x400210c3880100n,0x404022024108200n,0x810018200204102n,0x4002801a02003n,0x85040820080400n,0x810102c808880400n,0xe900410884800n,0x8002020480840102n,0x220200865090201n,0x2010100a02021202n,0x152048408022401n,0x20080002081110n,0x4001001021004000n,0x800040400a011002n,0xe4004081011002n,0x1c004001012080n,0x8004200962a00220n,0x8422100208500202n,0x2000402200300c08n,0x8646020080080080n,0x80020a0200100808n,0x2010004880111000n,0x623000a080011400n,0x42008c0340209202n,0x209188240001000n,0x400408a884001800n,0x110400a6080400n,0x1840060a44020800n,0x90080104000041n,0x201011000808101n,0x1a2208080504f080n,0x8012020600211212n,0x500861011240000n,0x180806108200800n,0x4000020e01040044n,0x300000261044000an,0x802241102020002n,0x20906061210001n,0x5a84841004010310n,0x4010801011c04n,0xa010109502200n,0x4a02012000n,0x500201010098b028n,0x8040002811040900n,0x28000010020204n,0x6000020202d0240n,0x8918844842082200n,0x4010011029020020n],this.RookMagicNumbers=[0x8a80104000800020n,0x140002000100040n,0x2801880a0017001n,0x100081001000420n,0x200020010080420n,0x3001c0002010008n,0x8480008002000100n,0x2080088004402900n,0x800098204000n,0x2024401000200040n,0x100802000801000n,0x120800800801000n,0x208808088000400n,0x2802200800400n,0x2200800100020080n,0x801000060821100n,0x80044006422000n,0x100808020004000n,0x12108a0010204200n,0x140848010000802n,0x481828014002800n,0x8094004002004100n,0x4010040010010802n,0x20008806104n,0x100400080208000n,0x2040002120081000n,0x21200680100081n,0x20100080080080n,0x2000a00200410n,0x20080800400n,0x80088400100102n,0x80004600042881n,0x4040008040800020n,0x440003000200801n,0x4200011004500n,0x188020010100100n,0x14800401802800n,0x2080040080800200n,0x124080204001001n,0x200046502000484n,0x480400080088020n,0x1000422010034000n,0x30200100110040n,0x100021010009n,0x2002080100110004n,0x202008004008002n,0x20020004010100n,0x2048440040820001n,0x101002200408200n,0x40802000401080n,0x4008142004410100n,0x2060820c0120200n,0x1001004080100n,0x20c020080040080n,0x2935610830022400n,0x44440041009200n,0x280001040802101n,0x2100190040002085n,0x80c0084100102001n,0x4024081001000421n,0x20030a0244872n,0x12001008414402n,0x2006104900a0804n,0x1004081002402n],this.BishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.RookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.MGPieceValue=[90,320,350,475,950,15e3],this.EGPieceValue=[100,250,280,510,975,15e3],this.PST=[[[0,0,0,0,0,0,0,0,-46,-48,-117,-21,-21,-48,-53,-117,5,-11,27,-10,20,88,-6,-11,0,-3,3,19,17,25,-5,-18,-18,-5,8,20,20,-7,-25,-40,-10,-10,10,2,12,-9,12,-2,-20,-5,-11,-13,-5,27,19,-2,0,0,0,0,0,0,0,0],[-227,-79,-67,-75,13,-113,-113,-131,-81,-56,41,25,73,41,6,-19,-26,4,25,73,73,113,68,13,5,8,5,38,20,46,8,13,-20,-10,17,5,19,22,8,-35,-30,-10,8,20,20,10,20,-35,-27,-35,-9,-5,-5,15,-18,-19,-37,-19,-51,-19,-35,-19,-19,-69],[-25,-41,-23,-41,-73,-41,5,-51,-41,3,-15,9,22,63,7,21,-13,-5,58,12,68,58,31,21,-25,-2,7,18,22,7,8,-9,-17,7,15,34,30,15,23,-25,21,31,10,17,17,26,23,21,-13,28,15,8,8,31,35,5,11,-17,0,-6,-17,-16,4,-14],[7,2,10,1,26,26,9,-9,-16,-21,-5,43,11,33,63,32,-9,-7,-8,5,5,21,21,21,-30,-17,5,5,-3,21,21,16,-30,-25,-25,-25,-17,-13,4,-30,-30,-25,-17,0,-3,-5,3,0,-30,-20,-20,-12,-12,2,2,-46,-10,-12,3,15,15,3,-46,-18],[-53,-10,20,31,31,78,0,-16,-48,-53,-21,-39,-11,78,30,142,-30,-25,5,21,53,73,73,73,-30,-13,-12,-3,5,21,5,21,-11,-3,-3,-3,5,5,21,2,-17,10,-2,10,2,10,10,-3,-17,5,12,12,14,20,21,11,11,-8,0,10,5,-16,-35,-6],[76,13,13,13,77,13,-19,13,13,13,13,11,13,13,-49,-19,-19,77,13,13,-22,13,13,-19,-19,-19,13,-9,-65,-35,-19,-51,-9,-9,-19,-39,-42,-55,-33,-41,-1,1,-45,-61,-45,-37,-15,-15,36,-5,-15,-73,-41,-9,17,20,-31,31,5,-61,10,-27,33,31]],[[0,0,0,0,0,0,0,0,66,61,63,15,-1,15,45,42,51,51,35,17,5,13,35,51,22,8,5,-11,-11,-8,7,14,9,3,-16,-22,-22,-8,6,3,-10,-3,-11,-3,-7,-3,-3,-10,2,-2,14,-6,-6,-2,2,-14,0,0,0,0,0,0,0,0],[21,-25,1,1,1,-15,-25,-75,-9,15,5,5,5,-3,-15,-25,-6,7,41,36,20,25,8,2,4,41,46,48,38,30,16,12,6,25,46,45,47,22,11,20,10,16,20,53,53,20,13,-1,0,4,5,27,22,21,5,11,-37,-39,1,1,1,33,-39,-37],[-5,-15,-7,5,9,1,-7,3,1,6,10,2,12,4,2,-31,6,20,22,25,17,30,12,15,15,20,25,28,31,13,20,-1,11,12,25,28,20,25,2,1,5,12,38,25,41,22,-11,-3,0,-11,10,15,30,12,10,-11,-17,9,-9,0,9,9,-15,3],[23,21,18,15,10,6,8,12,14,20,20,3,7,10,-6,-1,11,8,6,2,1,4,4,-5,7,2,3,0,-2,0,-7,-5,3,-2,2,2,2,-2,-10,-5,-12,-6,-6,-12,-16,-12,-20,-20,-12,-8,-6,-12,-12,-10,-12,-4,-13,-3,-7,-14,-22,-9,12,-33],[32,15,17,25,25,14,0,38,36,21,21,73,41,46,46,-112,-10,3,25,19,51,9,9,-28,-14,16,13,33,61,51,36,4,-11,8,13,45,37,27,20,0,-30,-26,24,-5,23,9,20,-10,-8,-3,-11,-9,-11,-24,-37,-37,-19,-33,-25,-29,-29,-33,-31,-53],[-57,-20,-23,-15,-15,1,-4,-45,-20,10,0,0,0,23,23,-4,-15,13,8,7,12,28,33,1,-29,1,13,15,23,23,15,1,-37,-7,13,19,20,22,7,-15,-33,-7,8,17,17,16,7,-15,-38,-13,3,7,7,9,-4,-28,-47,-38,-22,-15,-39,-17,-38,-201]]],this.PhaseValues=[0,1,1,2,4,0],this.MGdoubledPenalty=2,this.EGdoubledPenalty=15,this.MGisolatedPenalty=20,this.EGisolatedPenalty=2,this.fileSemiOpenScore=7,this.MGpassedBonus=[0,5,1,3,15,30,100,0],this.EGpassedBonus=[0,0,4,10,25,60,120,0],this.MaxPly=100,this.Checkmate=15e3,this.Inf=2e4,this.search={nodes:0,killers:Array(2).fill(0).map((()=>Array(this.MaxPly).fill(0))),history:Array(2).fill(0).map((()=>Array(64).fill(0).map((()=>Array(64).fill(0)))))},this.Timer={timeleft:-1,increment:0,depth:this.MaxPly,movestogo:0,startTime:0,stopTime:0,movetime:-1,stop:!1},this.totalNodes=0,this.InitRankMasks(),this.InitFileMasks(),this.InitDiagMasks(),this.InitAntiDiagMasks(),this.InitIsolatedMasks(),this.InitPassedMasks(),this.InitJumperAttacks(),this.InitBishopAttacks(),this.InitRookAttacks(),this.InitHashes(),this.SetTransTableSize()}SetBit(t,i){return t|1n<<this.SquareBigInt[i]}RemoveBit(t,i){return t&~(1n<<this.SquareBigInt[i])}GetBit(t,i){return t&1n<<this.SquareBigInt[i]}CountBits(t){const i=Number(0xffffffffn&t),s=Number(t>>32n);function e(t){return 16843009*((t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135)>>24}return e(i)+e(s)}GetLS1B(t){return t?this.CountBits((t&-t)-1n):-1}PrintBitboard(t){for(let i=0;i<8;i++){let s="";for(let e=0;e<8;e++){const o=8*i+e;e||(s+=8-i+"  "),s+=" "+(this.GetBit(t,o)?"1":"0")}console.log(`${s} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${t}`)}LoadFEN(i){this.Position.PiecesBB=[[0n,0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n,0n]],this.Position.OccupanciesBB=[0n,0n],this.Position.CastlingRights=0;const o=i.split(" ")[0].split("");let n=0;for(let t=0;t<o.length;t++){const i=o[t];switch(i){case"p":case"n":case"b":case"r":case"q":case"k":case"P":case"N":case"B":case"R":case"Q":case"K":{const t=this.CharToPiece[i];this.Position.PiecesBB[t.Color][t.Type]=this.SetBit(this.Position.PiecesBB[t.Color][t.Type],n),this.Position.Squares[n]=t,n++;break}case"1":case"2":case"3":case"4":case"4":case"5":case"6":case"7":case"8":n+=parseInt(i);break;case"/":break;default:throw new Error(`Unable to parse FEN character: ${i}`)}}this.Position.SideToMove="w"===i.split(" ")[1]?s.White:s.Black;const h=i.split(" ")[2].split("");for(const t of h)switch(t){case"K":this.Position.CastlingRights|=e.WhiteKingside;break;case"Q":this.Position.CastlingRights|=e.WhiteQueenside;break;case"k":this.Position.CastlingRights|=e.BlackKingside;break;case"q":this.Position.CastlingRights|=e.BlackQueenside}const a=i.split(" ")[3];if("-"!==a){const t="abcdefgh".indexOf(a.split("")[0]),i=8-parseInt(a[1],10);this.Position.EnPassSq=8*i+t}else this.Position.EnPassSq=t.no_sq;this.Position.Ply=2*parseInt(i.split(" ")[5])||0,this.Position.SideToMove===s.Black&&this.Position.Ply--,this.Position.HalfMoves=parseInt(i.split(" ")[4])||0;for(const t of this.Position.PiecesBB[s.White])this.Position.OccupanciesBB[s.White]|=t;for(const t of this.Position.PiecesBB[s.Black])this.Position.OccupanciesBB[s.Black]|=t;const{hash:r,pawnHash:c}=this.GenerateHashes();this.Position.Hash=r,this.Position.PawnHash=c,this.PositionHistory.length=0,this.PositionHistory[0]=this.Position.Hash}PrintBoard(){const i=[["♙","♘","♗","♖","♕","♔"],["♟︎","♞","♝","♜","♛","♚"]];for(let t=0;t<8;t++){let s="";for(let e=0;e<8;e++){let o=8*t+e,n=this.Position.Squares[o]??null;e||(s+=8-t+" "),s+=n?` ${i[n.Color][n.Type]}`:" . "}console.log(`${s} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(this.Position.SideToMove===s.White?"white":"black")),console.log(`En passant: ${this.Position.EnPassSq!==t.no_sq?t[this.Position.EnPassSq]:"no"}`),console.log(`Castling rights: ${this.Position.CastlingRights&e.WhiteKingside?"K":"-"}${this.Position.CastlingRights&e.WhiteQueenside?"Q":"-"}${this.Position.CastlingRights&e.BlackKingside?"k":"-"}${this.Position.CastlingRights&e.BlackQueenside?"q":"-"}`),console.log(`Plies: ${this.Position.Ply}`)}GenerateMoves(t=!1){const s=[];let e=-1n;t?(e=this.Position.OccupanciesBB[1^this.Position.SideToMove],this.GeneratePawnAttacks(s)):(this.GeneratePawnMoves(s),this.GenerateCastlingMoves(s));for(let t=i.Knight;t<=i.King;t++){let o=this.Position.PiecesBB[this.Position.SideToMove][t];for(;o;){const n=this.GetLS1B(o);switch(t){case i.Knight:this.GenerateKnightMoves(s,n,e);break;case i.Bishop:this.GenerateBishopMoves(s,n,e);break;case i.Rook:this.GenerateRookMoves(s,n,e);break;case i.Queen:this.GenerateQueenMoves(s,n,e);break;case i.King:this.GenerateKingMoves(s,n,e)}o=this.RemoveBit(o,n)}}return s}GeneratePawnMoves(e){let n=this.Position.PiecesBB[this.Position.SideToMove][i.Pawn];const h=~(this.Position.OccupanciesBB[s.White]|this.Position.OccupanciesBB[s.Black]);let a=(this.Position.SideToMove===s.White?n>>8n:n<<8n)&h,r=a>>8n&0x000000ff00000000n&h;for(this.Position.SideToMove===s.Black&&(r=a<<8n&0x00000000ff000000n&h);a;){const i=this.GetLS1B(a),n=this.Position.SideToMove===s.White?i+8:i-8;(this.Position.SideToMove===s.White?i<=t.h8:i>=t.a1)?(e.push(this.EncodeMove(n,i,o.KnightPromotion)),e.push(this.EncodeMove(n,i,o.BishopPromotion)),e.push(this.EncodeMove(n,i,o.RookPromotion)),e.push(this.EncodeMove(n,i,o.QueenPromotion))):e.push(this.EncodeMove(n,i,o.Quiet)),a=this.RemoveBit(a,i)}for(;r;){const t=this.GetLS1B(r),i=this.Position.SideToMove===s.White?t+16:t-16;e.push(this.EncodeMove(i,t,o.DoublePawnPush)),r=this.RemoveBit(r,t)}for(;n;){const i=this.GetLS1B(n);let h=this.PawnAttacks[this.Position.SideToMove][i]&this.Position.OccupanciesBB[1^this.Position.SideToMove];for(;h;){const n=this.GetLS1B(h);(this.Position.SideToMove===s.White?n<=t.h8:n>=t.a1)?(e.push(this.EncodeMove(i,n,o.KnightPromoCapture)),e.push(this.EncodeMove(i,n,o.BishopPromoCapture)),e.push(this.EncodeMove(i,n,o.RookPromoCapture)),e.push(this.EncodeMove(i,n,o.QueenPromoCapture))):e.push(this.EncodeMove(i,n,o.Capture)),h=this.RemoveBit(h,n)}if(this.Position.EnPassSq!==t.no_sq){const t=this.PawnAttacks[this.Position.SideToMove][i]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(t){const s=this.GetLS1B(t);e.push(this.EncodeMove(i,s,o.EPCapture))}}n=this.RemoveBit(n,i)}}GeneratePawnAttacks(e){let n=this.Position.PiecesBB[this.Position.SideToMove][i.Pawn];for(;n;){const i=this.GetLS1B(n);let h=this.PawnAttacks[this.Position.SideToMove][i]&this.Position.OccupanciesBB[1^this.Position.SideToMove];for(;h;){const n=this.GetLS1B(h);(this.Position.SideToMove===s.White?n<=t.h8:n>=t.a1)?(e.push(this.EncodeMove(i,n,o.KnightPromoCapture)),e.push(this.EncodeMove(i,n,o.BishopPromoCapture)),e.push(this.EncodeMove(i,n,o.RookPromoCapture)),e.push(this.EncodeMove(i,n,o.QueenPromoCapture))):e.push(this.EncodeMove(i,n,o.Capture)),h=this.RemoveBit(h,n)}if(this.Position.EnPassSq!==t.no_sq){const t=this.PawnAttacks[this.Position.SideToMove][i]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(t){const s=this.GetLS1B(t);e.push(this.EncodeMove(i,s,o.EPCapture))}}n=this.RemoveBit(n,i)}}GenerateCastlingMoves(i){const n=this.Position.OccupanciesBB[s.White]|this.Position.OccupanciesBB[s.Black];this.Position.SideToMove===s.White?(this.Position.CastlingRights&e.WhiteKingside&&0n===(6917529027641081856n&n)&&!this.IsSquareAttacked(t.e1,s.Black)&&!this.IsSquareAttacked(t.f1,s.Black)&&!this.IsSquareAttacked(t.g1,s.Black)&&i.push(this.EncodeMove(t.e1,t.g1,o.KingCastle)),this.Position.CastlingRights&e.WhiteQueenside&&0n===(1008806316530991104n&n)&&!this.IsSquareAttacked(t.e1,s.Black)&&!this.IsSquareAttacked(t.d1,s.Black)&&!this.IsSquareAttacked(t.c1,s.Black)&&i.push(this.EncodeMove(t.e1,t.c1,o.QueenCastle))):(this.Position.CastlingRights&e.BlackKingside&&0n===(96n&n)&&!this.IsSquareAttacked(t.e8,s.White)&&!this.IsSquareAttacked(t.f8,s.White)&&!this.IsSquareAttacked(t.g8,s.White)&&i.push(this.EncodeMove(t.e8,t.g8,o.KingCastle)),this.Position.CastlingRights&e.BlackQueenside&&0n===(14n&n)&&!this.IsSquareAttacked(t.e8,s.White)&&!this.IsSquareAttacked(t.d8,s.White)&&!this.IsSquareAttacked(t.c8,s.White)&&i.push(this.EncodeMove(t.e8,t.c8,o.QueenCastle)))}GenerateKnightMoves(t,i,s){let e=this.KnightAttacks[i]&~this.Position.OccupanciesBB[this.Position.SideToMove]&s;for(;e;){const s=this.GetLS1B(e);this.Position.Squares[s]&&this.Position.Squares[s].Color!==this.Position.SideToMove?t.push(this.EncodeMove(i,s,o.Capture)):t.push(this.EncodeMove(i,s,o.Quiet)),e=this.RemoveBit(e,s)}}GenerateBishopAttacks(t){let i=this.Position.OccupanciesBB[s.White]|this.Position.OccupanciesBB[s.Black];return i=BigInt.asUintN(64,i&this.BishopMasks[t]),i=BigInt.asUintN(64,i*this.BishopMagicNumbers[t]),i>>=64n-this.BishopRelevantBits[t],this.BishopAttacks[t][Number(i)]}GenerateBishopMoves(t,i,s){let e=this.GenerateBishopAttacks(i)&~this.Position.OccupanciesBB[this.Position.SideToMove]&s;for(;e;){const s=this.GetLS1B(e);this.Position.Squares[s]&&this.Position.Squares[s].Color!==this.Position.SideToMove?t.push(this.EncodeMove(i,s,o.Capture)):t.push(this.EncodeMove(i,s,o.Quiet)),e=this.RemoveBit(e,s)}}GenerateRookAttacks(t){let i=this.Position.OccupanciesBB[s.White]|this.Position.OccupanciesBB[s.Black];return i=BigInt.asUintN(64,i&this.RookMasks[t]),i=BigInt.asUintN(64,i*this.RookMagicNumbers[t]),i>>=64n-this.RookRelevantBits[t],this.RookAttacks[t][Number(i)]}GenerateRookMoves(t,i,s){let e=this.GenerateRookAttacks(i)&~this.Position.OccupanciesBB[this.Position.SideToMove]&s;for(;e;){const s=this.GetLS1B(e);this.Position.Squares[s]&&this.Position.Squares[s].Color!==this.Position.SideToMove?t.push(this.EncodeMove(i,s,o.Capture)):t.push(this.EncodeMove(i,s,o.Quiet)),e=this.RemoveBit(e,s)}}GenerateQueenMoves(t,i,s){let e=(this.GenerateBishopAttacks(i)|this.GenerateRookAttacks(i))&~this.Position.OccupanciesBB[this.Position.SideToMove]&s;for(;e;){const s=this.GetLS1B(e);this.Position.Squares[s]&&this.Position.Squares[s].Color!==this.Position.SideToMove?t.push(this.EncodeMove(i,s,o.Capture)):t.push(this.EncodeMove(i,s,o.Quiet)),e=this.RemoveBit(e,s)}}GenerateKingMoves(t,i,s){let e=this.KingAttacks[i]&~this.Position.OccupanciesBB[this.Position.SideToMove]&s;for(;e;){const s=this.GetLS1B(e);this.Position.Squares[s]&&this.Position.Squares[s].Color!==this.Position.SideToMove?t.push(this.EncodeMove(i,s,o.Capture)):t.push(this.EncodeMove(i,s,o.Quiet)),e=this.RemoveBit(e,s)}}EncodeMove(t,i,s){return t|i<<6|s<<12}MoveIsCapture(t){return void 0!==this.Position.Squares[(4032&t)>>6]}MoveIsPromotion(t){const i=t>>12;return i===o.KnightPromotion||i===o.BishopPromotion||i===o.RookPromotion||i===o.QueenPromotion||i===o.KnightPromoCapture||i===o.BishopPromoCapture||i===o.RookPromoCapture||i===o.QueenPromoCapture}IsSquareAttacked(t,s){const e=this.Position.PiecesBB[s][i.Bishop],o=this.Position.PiecesBB[s][i.Rook],n=this.Position.PiecesBB[s][i.Queen];if(this.PawnAttacks[1^s][t]&this.Position.PiecesBB[s][i.Pawn])return!0;if(this.KnightAttacks[t]&this.Position.PiecesBB[s][i.Knight])return!0;const h=e|n;if((this.diagMasks[t]|this.antiDiagMasks[t])&h&&this.GenerateBishopAttacks(t)&h)return!0;const a=o|n;return!!((this.rankMasks[t]|this.fileMasks[t])&a&&this.GenerateRookAttacks(t)&a)||!!(this.KingAttacks[t]&this.Position.PiecesBB[s][i.King])}MakeMove(e){const n=63&e,h=(4032&e)>>6,a=e>>12,r=this.Position.Squares[n];switch(this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Captured:this.Position.Squares[h],Hash:this.Position.Hash,PawnHash:this.Position.PawnHash,HalfMoves:this.Position.HalfMoves}),this.Position.Ply++,this.Position.HalfMoves++,this.Position.EnPassSq!==t.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=t.no_sq),this.RemovePiece(r.Type,r.Color,n),a){case o.Quiet:this.PlacePiece(r.Type,r.Color,h),r.Type===i.Pawn&&(this.Position.HalfMoves=0);break;case o.DoublePawnPush:this.PlacePiece(r.Type,r.Color,h),this.Position.SideToMove===s.White?this.Position.EnPassSq=h+8:this.Position.EnPassSq=h-8,this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.HalfMoves=0;break;case o.Capture:{let t=this.Position.Squares[h];this.RemovePiece(t.Type,t.Color,h),this.PlacePiece(r.Type,r.Color,h),this.Position.HalfMoves=0;break}case o.EPCapture:{const t=this.Position.SideToMove===s.White?h+8:h-8;let i=this.Position.Squares[t];this.stateCopy[this.stateCopy.length-1].Captured=i,this.RemovePiece(i.Type,i.Color,t),this.PlacePiece(r.Type,r.Color,h),this.Position.HalfMoves=0;break}case o.KnightPromotion:case o.BishopPromotion:case o.RookPromotion:case o.QueenPromotion:case o.KnightPromoCapture:case o.BishopPromoCapture:case o.RookPromoCapture:case o.QueenPromoCapture:{const t=this.Position.Squares[h];t&&this.RemovePiece(t.Type,t.Color,h),a===o.KnightPromotion||a===o.KnightPromoCapture?this.PlacePiece(i.Knight,r.Color,h):a===o.BishopPromotion||a===o.BishopPromoCapture?this.PlacePiece(i.Bishop,r.Color,h):a===o.RookPromotion||a===o.RookPromoCapture?this.PlacePiece(i.Rook,r.Color,h):a!==o.QueenPromotion&&a!==o.QueenPromoCapture||this.PlacePiece(i.Queen,r.Color,h),this.Position.HalfMoves=0;break}case o.KingCastle:case o.QueenCastle:this.PlacePiece(r.Type,r.Color,h),r.Color===s.White&&a===o.KingCastle?(this.RemovePiece(i.Rook,r.Color,t.h1),this.PlacePiece(i.Rook,r.Color,t.f1)):r.Color===s.White&&a===o.QueenCastle?(this.RemovePiece(i.Rook,r.Color,t.a1),this.PlacePiece(i.Rook,r.Color,t.d1)):r.Color===s.Black&&a===o.KingCastle?(this.RemovePiece(i.Rook,r.Color,t.h8),this.PlacePiece(i.Rook,r.Color,t.f8)):r.Color===s.Black&&a===o.QueenCastle&&(this.RemovePiece(i.Rook,r.Color,t.a8),this.PlacePiece(i.Rook,r.Color,t.d8))}return this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.CastlingRights&=this.CastlingSquares[n]&this.CastlingSquares[h],this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.Position.EnPassSq!==t.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq]),this.PositionHistory[this.PositionHistory.length]=this.Position.Hash,!this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[1^this.Position.SideToMove][i.King]),this.Position.SideToMove)}UnmakeMove(e){const n=this.stateCopy.pop();if(!n)throw new Error("Unable to get state for unmake move");this.Position.Ply--,this.PositionHistory.pop(),this.Position.CastlingRights=n.CastlingRights,this.Position.EnPassSq=n.EnPassSq,this.Position.HalfMoves=n.HalfMoves,this.Position.SideToMove^=1;const h=63&e,a=(4032&e)>>6,r=e>>12,c=this.Position.Squares[a];switch(this.PlacePiece(c.Type,c.Color,h),r){case o.Quiet:case o.DoublePawnPush:this.RemovePiece(c.Type,c.Color,a);break;case o.Capture:{let t=n.Captured;this.RemovePiece(c.Type,c.Color,a),this.PlacePiece(t.Type,t.Color,a);break}case o.EPCapture:{let t=n.Captured;this.RemovePiece(c.Type,c.Color,a);const i=this.Position.SideToMove===s.White?a+8:a-8;this.PlacePiece(t.Type,t.Color,i);break}case o.KnightPromotion:case o.BishopPromotion:case o.RookPromotion:case o.QueenPromotion:case o.KnightPromoCapture:case o.BishopPromoCapture:case o.RookPromoCapture:case o.QueenPromoCapture:{this.RemovePiece(c.Type,c.Color,a),this.RemovePiece(c.Type,c.Color,h),this.PlacePiece(i.Pawn,c.Color,h);const t=n.Captured;t&&this.PlacePiece(t.Type,t.Color,a);break}case o.KingCastle:case o.QueenCastle:this.RemovePiece(c.Type,c.Color,a),c.Color===s.White&&r===o.KingCastle?(this.RemovePiece(i.Rook,c.Color,t.f1),this.PlacePiece(i.Rook,c.Color,t.h1)):c.Color===s.White&&r===o.QueenCastle?(this.RemovePiece(i.Rook,c.Color,t.d1),this.PlacePiece(i.Rook,c.Color,t.a1)):c.Color===s.Black&&r===o.KingCastle?(this.RemovePiece(i.Rook,c.Color,t.f8),this.PlacePiece(i.Rook,c.Color,t.h8)):c.Color===s.Black&&r===o.QueenCastle&&(this.RemovePiece(i.Rook,c.Color,t.d8),this.PlacePiece(i.Rook,c.Color,t.a8))}this.Position.Hash=n.Hash,this.Position.PawnHash=n.PawnHash}MakeNullMove(){this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Hash:this.Position.Hash,HalfMoves:this.Position.HalfMoves,PawnHash:this.Position.PawnHash}),this.Position.EnPassSq!==t.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=t.no_sq),this.Position.HalfMoves=0,this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.Position.Ply++}UnmakeNullMove(){const t=this.stateCopy.pop();if(!t)throw new Error("Unable to get state for unmake move");this.Position.CastlingRights=t.CastlingRights,this.Position.EnPassSq=t.EnPassSq,this.Position.HalfMoves=t.HalfMoves,this.Position.SideToMove^=1,this.Position.Hash=t.Hash,this.Position.PawnHash=t.PawnHash,this.Position.Ply--}RemovePiece(t,s,e){this.Position.PiecesBB[s][t]=this.RemoveBit(this.Position.PiecesBB[s][t],e),this.Position.OccupanciesBB[s]=this.RemoveBit(this.Position.OccupanciesBB[s],e),this.Position.Hash^=this.Zobrist.Pieces[s][t][e],delete this.Position.Squares[e],t!==i.Pawn&&t!==i.King||(this.Position.PawnHash^=this.Zobrist.Pieces[s][t][e])}PlacePiece(t,s,e){this.Position.PiecesBB[s][t]=this.SetBit(this.Position.PiecesBB[s][t],e),this.Position.OccupanciesBB[s]=this.SetBit(this.Position.OccupanciesBB[s],e),this.Position.Hash^=this.Zobrist.Pieces[s][t][e],this.Position.Squares[e]={Type:t,Color:s},t!==i.Pawn&&t!==i.King||(this.Position.PawnHash^=this.Zobrist.Pieces[s][t][e])}PrettyPrintMove(i){let s=`${t[63&i]}${t[(4032&i)>>6]}`;if(i>>12!=0){const t=i>>12;t!==o.KnightPromotion&&t!==o.KnightPromoCapture||(s+="n"),t!==o.BishopPromotion&&t!==o.BishopPromoCapture||(s+="b"),t!==o.RookPromotion&&t!==o.RookPromoCapture||(s+="r"),t!==o.QueenPromotion&&t!==o.QueenPromoCapture||(s+="q")}return s}InitRankMasks(){for(let t=0;t<64;t++)this.rankMasks[t]=0xffn<<(56n&BigInt(t))}InitFileMasks(){for(let t=0;t<64;t++)this.fileMasks[t]=0x0101010101010101n<<(7n&BigInt(t))}InitDiagMasks(){for(let t=0;t<64;t++){const i=0x8040201008040201n,s=BigInt((7&t)-(t>>3));this.diagMasks[t]=s>=0?i>>8n*s:i<<8n*-s}}InitAntiDiagMasks(){for(let t=0;t<64;t++){const i=0x0102040810204080n,s=BigInt(7-(7&t)-(t>>3));this.antiDiagMasks[t]=s>=0?i>>8n*s:i<<8n*-s}}InitIsolatedMasks(){for(let t=0;t<64;t++)this.isolatedMasks[t]=this.fileMasks[t]<<1n|this.fileMasks[t]>>1n}InitPassedMasks(){for(let i=0;i<64;i++){let e=this.fileMasks[i]|(this.fileMasks[i]&this.notAFile)>>1n|(this.fileMasks[i]&this.notHFile)<<1n;this.passedMasks[s.White][i]=e,this.passedMasks[s.Black][56^i]=e;for(let e=i;e<=t.h1;e+=8)this.passedMasks[s.White][i]&=~this.rankMasks[e];for(let e=i;e>=t.a8;e-=8)this.passedMasks[s.Black][56^i]&=~this.rankMasks[e]}}InitJumperAttacks(){for(let t=0;t<64;t++)this.PawnAttacks[s.White][t]=this.MaskPawnAttacks(s.White,t),this.PawnAttacks[s.Black][t]=this.MaskPawnAttacks(s.Black,t),this.KnightAttacks[t]=this.MaskKnightAttacks(t),this.KingAttacks[t]=this.MaskKingAttacks(t)}InitBishopAttacks(){for(let t=0;t<64;t++){this.BishopMasks[t]=this.GenerateBishopMasks(t);const i=this.CountBits(this.BishopMasks[t]),s=1<<i;for(let e=0;e<s;e++){const s=this.SetOccupancy(e,i,this.BishopMasks[t]),o=BigInt.asUintN(64,s*this.BishopMagicNumbers[t])>>64n-this.BishopRelevantBits[t];this.BishopAttacks[t][Number(o)]=this.GenerateBishopAttacksFly(t,s)}}}InitRookAttacks(){for(let t=0;t<64;t++){this.RookMasks[t]=this.GenerateRookMasks(t);const i=this.CountBits(this.RookMasks[t]),s=1<<i;for(let e=0;e<s;e++){const s=this.SetOccupancy(e,i,this.RookMasks[t]),o=BigInt.asUintN(64,s*this.RookMagicNumbers[t])>>64n-this.RookRelevantBits[t];this.RookAttacks[t][Number(o)]=this.GenerateRookAttacksFly(t,s)}}}MaskPawnAttacks(t,i){let s=0n,e=0n;return e=this.SetBit(e,i),t?(e<<7n&this.notHFile&&(s|=e<<7n),e<<9n&this.notAFile&&(s|=e<<9n)):(e>>7n&this.notAFile&&(s|=e>>7n),e>>9n&this.notHFile&&(s|=e>>9n)),BigInt.asUintN(64,s)}MaskKnightAttacks(t){let i=0n,s=0n;return s=this.SetBit(s,t),s>>17n&this.notHFile&&(i|=s>>17n),s>>15n&this.notAFile&&(i|=s>>15n),s>>10n&this.notHGFile&&(i|=s>>10n),s>>6n&this.notABFile&&(i|=s>>6n),s<<17n&this.notAFile&&(i|=s<<17n),s<<15n&this.notHFile&&(i|=s<<15n),s<<10n&this.notABFile&&(i|=s<<10n),s<<6n&this.notHGFile&&(i|=s<<6n),BigInt.asUintN(64,i)}GenerateBishopMasks(t){let i=0n;const s=Math.floor(t/8),e=t%8;for(let t=s+1,o=e+1;t<=6&&o<=6;t++,o++)i|=1n<<8n*BigInt(t)+BigInt(o);for(let t=s-1,o=e+1;t>=1&&o<=6;t--,o++)i|=1n<<8n*BigInt(t)+BigInt(o);for(let t=s+1,o=e-1;t<=6&&o>=1;t++,o--)i|=1n<<8n*BigInt(t)+BigInt(o);for(let t=s-1,o=e-1;t>=1&&o>=1;t--,o--)i|=1n<<8n*BigInt(t)+BigInt(o);return BigInt.asUintN(64,i)}GenerateBishopAttacksFly(t,i){let s=0n;const e=Math.floor(t/8),o=t%8;for(let t=e+1,n=o+1;t<=7&&n<=7&&(s|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&i));t++,n++);for(let t=e-1,n=o+1;t>=0&&n<=7&&(s|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&i));t--,n++);for(let t=e+1,n=o-1;t<=7&&n>=0&&(s|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&i));t++,n--);for(let t=e-1,n=o-1;t>=0&&n>=0&&(s|=1n<<8n*BigInt(t)+BigInt(n),!(1n<<8n*BigInt(t)+BigInt(n)&i));t--,n--);return BigInt.asUintN(64,s)}GenerateRookMasks(t){let i=0n;const s=Math.floor(t/8),e=t%8;for(let t=s+1;t<=6;t++)i|=1n<<8n*BigInt(t)+BigInt(e);for(let t=s-1;t>=1;t--)i|=1n<<8n*BigInt(t)+BigInt(e);for(let t=e+1;t<=6;t++)i|=1n<<8n*BigInt(s)+BigInt(t);for(let t=e-1;t>=1;t--)i|=1n<<8n*BigInt(s)+BigInt(t);return BigInt.asUintN(64,i)}GenerateRookAttacksFly(t,i){let s=0n;const e=Math.floor(t/8),o=t%8;for(let t=e+1;t<=7&&(s|=1n<<8n*BigInt(t)+BigInt(o),!(1n<<8n*BigInt(t)+BigInt(o)&i));t++);for(let t=e-1;t>=0&&(s|=1n<<8n*BigInt(t)+BigInt(o),!(1n<<8n*BigInt(t)+BigInt(o)&i));t--);for(let t=o+1;t<=7&&(s|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&i));t++);for(let t=o-1;t>=0&&(s|=1n<<8n*BigInt(e)+BigInt(t),!(1n<<8n*BigInt(e)+BigInt(t)&i));t--);return BigInt.asUintN(64,s)}MaskKingAttacks(t){let i=0n,s=0n;return s=this.SetBit(s,t),s>>8n&&(i|=s>>8n),s>>9n&this.notHFile&&(i|=s>>9n),s>>7n&this.notAFile&&(i|=s>>7n),s>>1n&this.notHFile&&(i|=s>>1n),s<<8n&&(i|=s<<8n),s<<9n&this.notAFile&&(i|=s<<9n),s<<7n&this.notHFile&&(i|=s<<7n),s<<1n&this.notAFile&&(i|=s<<1n),BigInt.asUintN(64,i)}SetOccupancy(t,i,s){let e=0n;for(let o=0;o<i;o++){const i=this.GetLS1B(s);s=this.RemoveBit(s,i),t&1<<o&&(e|=1n<<this.SquareBigInt[i])}return BigInt.asUintN(64,e)}Random64(){let t=this.PRNG_SEED;return t^=t>>12n,t^=t<<25n,t^=t>>27n,this.PRNG_SEED=t,BigInt.asUintN(64,2685821657736338717n*t)}InitHashes(){for(let e=i.Pawn;e<=i.King;e++)for(let i=t.a8;i<=t.h1;i++)this.Zobrist.Pieces[s.White][e][i]=this.Random64(),this.Zobrist.Pieces[s.Black][e][i]=this.Random64();for(let i=t.a8;i<=t.h1;i++)this.Zobrist.EnPassant[i]=this.Random64();for(let t=0;t<16;t++)this.Zobrist.Castle[t]=this.Random64();this.Zobrist.SideToMove=this.Random64()}GenerateHashes(){let e=0n,o=0n;for(let s=t.a8;s<=t.h1;s++){const t=this.Position.Squares[s];t&&(e^=this.Zobrist.Pieces[t.Color][t.Type][s],t.Type===i.Pawn&&(o^=this.Zobrist.Pieces[t.Color][i.Pawn][s]))}return this.Position.EnPassSq!==t.no_sq&&(e^=this.Zobrist.EnPassant[this.Position.EnPassSq]),e^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.SideToMove===s.Black&&(e^=this.Zobrist.SideToMove),{hash:e,pawnHash:o}}SetTransTableSize(t=32){this.TranspositionTables.Size=BigInt(1024*t*1024/16),this.TranspositionTables.Entries.length=0,this.PawnHashTable.Size=BigInt(65536),this.PawnHashTable.Entries.length=0}WriteTT(t,i,s,e,o,n){const h=Number(t%this.TranspositionTables.Size);e>this.Checkmate&&(e+=n),e<-this.Checkmate&&(e-=n);const a={BestMove:o,Depth:i,Flag:s,Hash:t,Score:e};this.TranspositionTables.Entries[h]=a}ProbeTT(t,i,s,e,o){const h=this.TranspositionTables.Entries[Number(t%this.TranspositionTables.Size)];let a=this.HashNoMove;if(!h||h.Hash!==t)return{ttScore:a,ttMove:0};if(h.Depth>=i){let t=h.Score;t>this.Checkmate&&(t-=s),t<-this.Checkmate&&(t+=s),h.Flag===n.Exact&&(a=t),h.Flag===n.Alpha&&t<=e&&(a=t),h.Flag===n.Beta&&t>=o&&(a=t)}return{ttScore:a,ttMove:h.BestMove}}Evaluate(){let t=[0,0],e=[0,0],o=24,n=(this.Position.OccupanciesBB[s.White]|this.Position.OccupanciesBB[s.Black])&~(this.Position.PiecesBB[s.White][i.Pawn]|this.Position.PiecesBB[s.Black][i.Pawn]);const h=this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)];if(h&&h.hash===this.Position.PawnHash)t[s.White]+=h.wScore.mg,e[s.White]+=h.wScore.eg,t[s.Black]+=h.bScore.mg,e[s.Black]+=h.bScore.eg;else{const i=this.EvaluatePawns();t[s.White]+=i.mgScores[s.White],e[s.White]+=i.egScores[s.White],t[s.Black]+=i.mgScores[s.Black],e[s.Black]+=i.egScores[s.Black],this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)]={hash:this.Position.PawnHash,wScore:{mg:i.mgScores[s.White],eg:i.egScores[s.White]},bScore:{mg:i.mgScores[s.Black],eg:i.egScores[s.Black]}}}for(;n;){let h=this.GetLS1B(n);n=this.RemoveBit(n,h);const a=this.Position.Squares[h];switch(a.Color===s.Black&&(h^=56),o-=this.PhaseValues[a.Type],a.Type){case i.Knight:t[a.Color]+=this.PST[0][i.Knight][h]+this.MGPieceValue[i.Knight],e[a.Color]+=this.PST[1][i.Knight][h]+this.EGPieceValue[i.Knight];break;case i.Bishop:t[a.Color]+=this.PST[0][i.Bishop][h]+this.MGPieceValue[i.Bishop],e[a.Color]+=this.PST[1][i.Bishop][h]+this.EGPieceValue[i.Bishop];break;case i.Rook:t[a.Color]+=this.PST[0][i.Rook][h]+this.MGPieceValue[i.Rook],e[a.Color]+=this.PST[1][i.Rook][h]+this.EGPieceValue[i.Rook],0n===(this.Position.PiecesBB[a.Color][i.Pawn]&this.fileMasks[h])&&(t[a.Color]+=this.fileSemiOpenScore,e[a.Color]+=this.fileSemiOpenScore);break;case i.Queen:t[a.Color]+=this.PST[0][i.Queen][h]+this.MGPieceValue[i.Queen],e[a.Color]+=this.PST[1][i.Queen][h]+this.EGPieceValue[i.Queen];break;case i.King:t[a.Color]+=this.PST[0][i.King][h]+this.MGPieceValue[i.King],e[a.Color]+=this.PST[1][i.King][h]+this.EGPieceValue[i.King]}}return o=(256*o+12)/24|0,((t[this.Position.SideToMove]-t[1^this.Position.SideToMove])*(256-o)+(e[this.Position.SideToMove]-e[1^this.Position.SideToMove])*o)/256|0}EvaluatePawns(){let t=[0,0],e=[0,0],o=this.Position.PiecesBB[s.White][i.Pawn]|this.Position.PiecesBB[s.Black][i.Pawn];for(;o;){let n=this.GetLS1B(o);o=this.RemoveBit(o,n);const h=this.Position.Squares[n];h.Color===s.Black&&(n^=56),t[h.Color]+=this.PST[0][i.Pawn][n]+this.MGPieceValue[i.Pawn],e[h.Color]+=this.PST[1][i.Pawn][n]+this.EGPieceValue[i.Pawn];const a=this.Position.PiecesBB[h.Color][i.Pawn]&this.fileMasks[n];if(0n!==(a&a-1n)&&(t[h.Color]-=this.MGdoubledPenalty,e[h.Color]-=this.EGdoubledPenalty),0n===(this.Position.PiecesBB[h.Color][i.Pawn]&this.isolatedMasks[n])&&(t[h.Color]-=this.MGisolatedPenalty,e[h.Color]-=this.EGisolatedPenalty),0n===(this.passedMasks[h.Color][n]&this.Position.PiecesBB[1^h.Color][i.Pawn])){const i=7-(n>>3);t[h.Color]+=this.MGpassedBonus[i],e[h.Color]+=this.EGpassedBonus[i]}}return{mgScores:t,egScores:e}}Search(t){this.search.nodes=0;let i={moves:[]},s="";this.StartTimer();let e=-this.Inf,o=this.Inf,n=-this.Inf;this.AgeHistory();const h=Date.now(),a=()=>n<-this.Checkmate?"mate "+(-this.Inf-n)/2:n>this.Checkmate?"mate "+(this.Inf-n+1)/2:`cp ${n}`;for(let r=1;r<=t;r++){i.moves.length=0,n=this.Negamax(r,0,e,o,i);const t=Date.now();if(this.Timer.stop)break;if(n<=e)e=n-150,r--;else if(n>=o)o=n+150,r--;else if(e=n-50,o=n+50,s=this.PrettyPrintMove(i.moves[0]),console.log(`info depth ${r} score ${a()} nodes ${this.search.nodes} nps ${Math.round(this.search.nodes/(t-h)*1e3)} time ${t-h} pv ${i.moves.map((t=>this.PrettyPrintMove(t))).join(" ")}`),n>this.Checkmate||n<-this.Checkmate)break}return console.log(`bestmove ${s}`),s}Negamax(t,s,e,o,h,a=!0){let r=-this.Inf,c=0,P=n.Alpha,l=0,B=!1;const u=o-e>1,p=this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][i.King]),1^this.Position.SideToMove),k={moves:[]};if(this.search.nodes++,this.search.nodes%1e3==0&&this.CheckTime(),this.Timer.stop)return 0;if(p&&(t+=1),t<=0)return this.Quiescence(e,o,s);if(s>0&&this.IsRepetition())return 0;const{ttScore:g,ttMove:m}=this.ProbeTT(this.Position.Hash,t,s,e,o);if(g!==this.HashNoMove&&0!==s)return g;c=m;let M=g;const v=this.Evaluate();if(v+90*t<=e&&t<=3&&!p&&(B=!0),!u&&!p&&v-90*t>=o)return v-90*t;if(a&&!p&&t>=3){this.MakeNullMove();const i=1+Math.floor(t/3);if(M=-this.Negamax(t-1-i,s+1,-o,1-o,k,!1),this.UnmakeNullMove(),k.moves.length=0,M>=o)return o}let C=this.GenerateMoves();C=this.SortMoves(C,m,s);for(let i=0;i<C.length;i++){const a=C[i];if((!(!u&&t<=2&&l>3*t)||p||r>this.Checkmate||r<this.Checkmate)&&(!(B&&l>1)||this.MoveIsCapture(a)||this.MoveIsPromotion(a)))if(this.MakeMove(a)){if(l++,1===l)M=-this.Negamax(t-1,s+1,-o,-e,k);else{let i=0;t>=3&&l>=4&&!u&&!p&&(i=.45*Math.log(t*l**2)),M=-this.Negamax(t-1-i,s+1,-e-1,-e,k),M>e&&(M=-this.Negamax(t-1,s+1,-o,-e,k))}if(this.UnmakeMove(a),M>r&&(r=M,c=a),M>e&&(e=M,P=n.Exact,h.moves.length=0,h.moves.push(a),h.moves.push(...k.moves),this.MoveIsCapture(a)||(this.search.history[this.Position.SideToMove][63&a][(4032&a)>>6]+=t*t)),M>=o){P=n.Beta,this.MoveIsCapture(a)||(this.search.killers[1][s]=this.search.killers[0][s],this.search.killers[0][s]=a,this.search.history[this.Position.SideToMove][63&a][(4032&a)>>6]+=t*t);break}k.moves.length=0}else this.UnmakeMove(a)}return 0===l?p?-this.Inf+s:0:(this.WriteTT(this.Position.Hash,t,P,r,c,s),r)}Quiescence(t,i,s){this.search.nodes++;let e=n.Alpha,o=0,h=-this.Inf;if(this.search.nodes%1e3==0&&this.CheckTime(),this.Timer.stop)return 0;const{ttScore:a,ttMove:r}=this.ProbeTT(this.Position.Hash,0,s,t,i);if(a!==this.HashNoMove&&0!==s)return a;if(o=r,h=a,h!==-this.Inf&&h!==this.HashNoMove||(h=this.Evaluate()),h>=i)return h;h>t&&(t=h);let c=this.GenerateMoves(!0);c=this.SortMoves(c,this.HashNoMove,s);for(let a=0;a<c.length;a++){const r=c[a];if(!this.MakeMove(r)){this.UnmakeMove(r);continue}let P=-this.Quiescence(-i,-t,s);if(this.UnmakeMove(r),P>h&&(h=P),P>=i)return this.WriteTT(this.Position.Hash,0,n.Beta,h,o,s),h;P>t&&(e=n.Exact,t=P)}return this.WriteTT(this.Position.Hash,0,e,h,o,s),h}IsRepetition(){for(let t=this.PositionHistory.length-this.Position.HalfMoves;t<this.PositionHistory.length-1;t++)if(this.PositionHistory[t]===this.Position.Hash)return!0;return!1}AgeHistory(){for(let i=t.a8;i<=t.h1;i++)for(let s=t.a8;s<=t.h1;s++)this.search.history[this.Position.SideToMove][i][s]/=2}SortMoves(t,i,e){const n=[];for(let h=0;h<t.length;h++){const a=t[h];if(a===i)n.push({move:a,score:this.Inf});else if(this.MoveIsCapture(a)){const t=this.Position.Squares[63&a];let i=this.Position.Squares[(4032&a)>>6];a>>12===o.EPCapture&&(i=this.Position.Squares[this.Position.SideToMove===s.White?8+((4032&a)>>6):((4032&a)>>6)-8]);const e=this.MGPieceValue[i.Type]-t.Type+1e4;n.push({move:a,score:e})}else a===this.search.killers[0][e]?n.push({move:a,score:9e3}):a===this.search.killers[1][e]?n.push({move:a,score:8e3}):n.push({move:a,score:this.search.history[this.Position.SideToMove][63&a][(4032&a)>>6]})}const h=n.length;for(let t=1;t<h;t++){let i=n[t],s=t-1;for(;s>-1&&i.score>n[s].score;)n[s+1]=n[s],s--;n[s+1]=i}return n.map((({move:t})=>t))}See(t){const e=(4032&t)>>6,o=63&t,n=this.Position.Squares[o].Type;let h=this.Position.Squares[e]?.Type,a=1^this.Position.SideToMove;if(!h)return 0;const r=[];let c=0,P=this.SetBit(0n,o),l=this.AttacksTo(e),B=0n;const u=this.Position.PiecesBB[s.White][i.Pawn]|this.Position.PiecesBB[s.White][i.Bishop]|this.Position.PiecesBB[s.White][i.Rook]|this.Position.PiecesBB[s.White][i.Queen]|this.Position.PiecesBB[s.Black][i.Pawn]|this.Position.PiecesBB[s.Black][i.Bishop]|this.Position.PiecesBB[s.Black][i.Rook]|this.Position.PiecesBB[s.Black][i.Queen];for(r[c]=this.MGPieceValue[h];P&&(c++,r[c]=this.MGPieceValue[n]-r[c-1],!(Math.max(-r[c-1],r[c])<0));){l^=P,B|=P,P&u&&(l|=this.ConsiderXRays(e)&~B);const{bitboard:t,piece:i}=this.GetLeastValuablePiece(l,a,h);P=t,h=i,a^=1}for(;--c;)r[c-1]=-Math.max(-r[c-1],r[c]);return r[0]}AttacksTo(t){const e=this.Position.PiecesBB[s.White][i.Pawn]&this.PawnAttacks[s.Black][t]|this.Position.PiecesBB[s.Black][i.Pawn]&this.PawnAttacks[s.White][t],o=(this.Position.PiecesBB[s.White][i.Knight]|this.Position.PiecesBB[s.Black][i.Knight])&this.KnightAttacks[t],n=(this.Position.PiecesBB[s.White][i.King]|this.Position.PiecesBB[s.Black][i.King])&this.KingAttacks[t];let h=this.Position.PiecesBB[s.White][i.Bishop]|this.Position.PiecesBB[s.Black][i.Bishop]|this.Position.PiecesBB[s.White][i.Queen]|this.Position.PiecesBB[s.Black][i.Queen];h&=this.GenerateBishopAttacks(t);let a=this.Position.PiecesBB[s.White][i.Rook]|this.Position.PiecesBB[s.Black][i.Rook]|this.Position.PiecesBB[s.White][i.Queen]|this.Position.PiecesBB[s.Black][i.Queen];return a&=this.GenerateRookAttacks(t),e|o|n|h|a}ConsiderXRays(t){let e=this.Position.PiecesBB[s.White][i.Bishop]|this.Position.PiecesBB[s.Black][i.Bishop]|this.Position.PiecesBB[s.White][i.Queen]|this.Position.PiecesBB[s.Black][i.Queen];e&=this.GenerateBishopAttacks(t);let o=this.Position.PiecesBB[s.White][i.Rook]|this.Position.PiecesBB[s.Black][i.Rook]|this.Position.PiecesBB[s.White][i.Queen]|this.Position.PiecesBB[s.Black][i.Queen];return o&=this.GenerateRookAttacks(t),e|o}GetLeastValuablePiece(t,s,e){for(e=i.Pawn;e<=i.King;e++){let i=t&this.Position.PiecesBB[s][e];if(i)return{bitboard:i&-i,piece:e}}return{bitboard:0n,piece:0}}StartTimer(){let t=0;if(this.Timer.stop=!1,-1!==this.Timer.timeleft||-1!==this.Timer.movetime){if(0!==this.Timer.movestogo)t=this.Timer.timeleft/this.Timer.movestogo;else if(-1!==this.Timer.movetime)t=this.Timer.movetime;else{let i=0;i=this.Position.Ply<=20?45-this.Position.Ply:25,t=this.Timer.timeleft/i}t+=this.Timer.increment/2,t>=this.Timer.timeleft&&(t-=this.Timer.increment),t<=0&&(t=this.Timer.increment-1),this.Timer.startTime=Date.now(),this.Timer.stopTime=this.Timer.startTime+t}}CheckTime(){(this.Timer.stop||-1!==this.Timer.timeleft||-1!==this.Timer.movetime)&&Date.now()>this.Timer.stopTime&&(this.Timer.stop=!0)}ParseUCIPosition(t){const i=t.split(" ").slice(1).join(" ");i.startsWith("fen")?this.LoadFEN(i.split(" ").slice(1).join(" ")):this.LoadFEN(r.positions.start);const s=i.split("moves ").slice(1).join(" ").split(" ").filter((t=>""!=t));for(let i=0;i<s.length;i++){const e=this.ParseUCIMove(s[i]);if(!e){console.error("Unable to parse UCI command"),console.log(`Command: ${t}`),console.log(`Invalid move: ${s[i]}`);break}this.MakeMove(e)}}ParseUCIMove(t){const s=parseInt(t.charAt(0),36)-10,e=8*(7-(parseInt(t.charAt(1))-1))+s,n=parseInt(t.charAt(2),36)-10,h=8*(7-(parseInt(t.charAt(3))-1))+n,a=this.Position.Squares[e].Type;let r=0;if(5===t.length){const i=t.charAt(4);"n"===i?r=o.KnightPromotion:"b"===i?r=o.BishopPromotion:"r"===i?r=o.RookPromotion:"q"===i&&(r=o.QueenPromotion)}else r=a===i.Pawn&&16===Math.abs(e-h)?o.DoublePawnPush:"e1g1"!==t&&"e8g8"!==t||a!==i.King?"e1c1"!==t&&"e8c8"!==t||a!==i.King?h===this.Position.EnPassSq&&a===i.Pawn?o.EPCapture:this.Position.Squares[h]?o.Capture:o.Quiet:o.QueenCastle:o.KingCastle;return this.EncodeMove(e,h,r)}ParseUCIGo(t){const i=t.split(" "),e=this.Position.SideToMove===s.White?"w":"b";let o=-1,n=0,h=0,a=-1,r=this.MaxPly;for(let t=0;t<i.length;t++){const s=i[t];s===e+"time"?o=parseInt(i[t+1]):s===e+"inc"?n=parseInt(i[t+1]):"movestogo"===s?h=parseInt(i[t+1]):"depth"===s?r=Math.min(parseInt(i[t+1]),this.MaxPly):"movetime"===s&&(a=parseInt(i[t+1]))}return this.Timer.timeleft=o,this.Timer.increment=n,this.Timer.depth=r,this.Timer.movestogo=h,this.Timer.movetime=a,this.Search(r)}Perft(t){this.totalNodes=0;const i=performance.now(),s=this.GenerateMoves();for(let i=0;i<s.length;i++){const e=s[i];if(this.MakeMove(e)){let i=this.PerftDriver(t-1);console.log(`${this.PrettyPrintMove(e)}: ${i}`)}this.UnmakeMove(e)}const e=performance.now();return console.log(`Nodes: ${this.totalNodes.toLocaleString()}. Time taken: ${e-i}`),this.totalNodes}PerftDriver(t){let i=0;if(0===t)return this.totalNodes++,1;const s=this.GenerateMoves();for(let e=0;e<s.length;e++){const o=s[e];this.MakeMove(o)&&(i+=this.PerftDriver(t-1)),this.UnmakeMove(o)}return i}}r.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const c=r;Engine=a.default})();