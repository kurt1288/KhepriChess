var Engine;(()=>{"use strict";var s,i={d:(s,t)=>{for(var e in t)i.o(t,e)&&!i.o(s,e)&&Object.defineProperty(s,e,{enumerable:!0,get:t[e]})},o:(s,i)=>Object.prototype.hasOwnProperty.call(s,i)},t={};i.d(t,{default:()=>o}),function(s){s[s.a8=0]="a8",s[s.b8=1]="b8",s[s.c8=2]="c8",s[s.d8=3]="d8",s[s.e8=4]="e8",s[s.f8=5]="f8",s[s.g8=6]="g8",s[s.h8=7]="h8",s[s.a7=8]="a7",s[s.b7=9]="b7",s[s.c7=10]="c7",s[s.d7=11]="d7",s[s.e7=12]="e7",s[s.f7=13]="f7",s[s.g7=14]="g7",s[s.h7=15]="h7",s[s.a6=16]="a6",s[s.b6=17]="b6",s[s.c6=18]="c6",s[s.d6=19]="d6",s[s.e6=20]="e6",s[s.f6=21]="f6",s[s.g6=22]="g6",s[s.h6=23]="h6",s[s.a5=24]="a5",s[s.b5=25]="b5",s[s.c5=26]="c5",s[s.d5=27]="d5",s[s.e5=28]="e5",s[s.f5=29]="f5",s[s.g5=30]="g5",s[s.h5=31]="h5",s[s.a4=32]="a4",s[s.b4=33]="b4",s[s.c4=34]="c4",s[s.d4=35]="d4",s[s.e4=36]="e4",s[s.f4=37]="f4",s[s.g4=38]="g4",s[s.h4=39]="h4",s[s.a3=40]="a3",s[s.b3=41]="b3",s[s.c3=42]="c3",s[s.d3=43]="d3",s[s.e3=44]="e3",s[s.f3=45]="f3",s[s.g3=46]="g3",s[s.h3=47]="h3",s[s.a2=48]="a2",s[s.b2=49]="b2",s[s.c2=50]="c2",s[s.d2=51]="d2",s[s.e2=52]="e2",s[s.f2=53]="f2",s[s.g2=54]="g2",s[s.h2=55]="h2",s[s.a1=56]="a1",s[s.b1=57]="b1",s[s.c1=58]="c1",s[s.d1=59]="d1",s[s.e1=60]="e1",s[s.f1=61]="f1",s[s.g1=62]="g1",s[s.h1=63]="h1",s[s.no_sq=64]="no_sq"}(s||(s={}));class e{constructor(){this.name="KhepriChess",this.version="3.1.0",this.author="Kurt Peters",this.isChess960=!1,this.SquareBigInt=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n],this.Position={PiecesBB:[],OccupanciesBB:[0n,0n],Squares:[],CastlingRights:0,SideToMove:0,EnPassSq:0,HalfMoves:0,Ply:0,Hash:0n,PawnHash:0n,Phase:0,CastlingPaths:[],CastlingRookSquares:[],CastlingSquaresMask:[]},this.PositionHistory=[],this.CharToPiece=new Map([["P",{Type:0,Color:0}],["N",{Type:1,Color:0}],["B",{Type:2,Color:0}],["R",{Type:3,Color:0}],["Q",{Type:4,Color:0}],["K",{Type:5,Color:0}],["p",{Type:0,Color:1}],["n",{Type:1,Color:1}],["b",{Type:2,Color:1}],["r",{Type:3,Color:1}],["q",{Type:4,Color:1}],["k",{Type:5,Color:1}]]),this.stateCopy=[],this.rankMasks=[],this.fileMasks=[],this.isolatedMasks=[],this.passedMasks=Array(2).fill(0).map((()=>Array(64).fill(0))),this.betweenMasks=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.attackRays=Array.from(Array(3),(()=>new Array(64).fill(0n))),this.squareBB=[],this.distanceBetween=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.PRNG_SEED=1n,this.Zobrist={Pieces:Array.from(Array(2),(()=>Array.from(Array(6),(()=>new Array(64))))),EnPassant:[],Castle:[],SideToMove:0n},this.HashNoMove=5e4,this.TranspositionTables={Entries:[],Size:0n},this.PawnHashTable={Entries:[],Size:0n},this.PawnAttacks=Array.from(Array(2),(()=>new Array(64))),this.KnightAttacks=[],this.KingAttacks=[],this.BishopMasks=Array(64),this.BishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.RookMasks=Array(64),this.RookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.BishopMagicNumbers=[0x40040844404084n,0x2004208a004208n,0x10190041080202n,0x108060845042010n,0x581104180800210n,0x2112080446200010n,0x1080820820060210n,0x3c0808410220200n,0x4050404440404n,0x21001420088n,0x24d0080801082102n,0x1020a0a020400n,0x40308200402n,0x4011002100800n,0x401484104104005n,0x801010402020200n,0x400210c3880100n,0x404022024108200n,0x810018200204102n,0x4002801a02003n,0x85040820080400n,0x810102c808880400n,0xe900410884800n,0x8002020480840102n,0x220200865090201n,0x2010100a02021202n,0x152048408022401n,0x20080002081110n,0x4001001021004000n,0x800040400a011002n,0xe4004081011002n,0x1c004001012080n,0x8004200962a00220n,0x8422100208500202n,0x2000402200300c08n,0x8646020080080080n,0x80020a0200100808n,0x2010004880111000n,0x623000a080011400n,0x42008c0340209202n,0x209188240001000n,0x400408a884001800n,0x110400a6080400n,0x1840060a44020800n,0x90080104000041n,0x201011000808101n,0x1a2208080504f080n,0x8012020600211212n,0x500861011240000n,0x180806108200800n,0x4000020e01040044n,0x300000261044000an,0x802241102020002n,0x20906061210001n,0x5a84841004010310n,0x4010801011c04n,0xa010109502200n,0x4a02012000n,0x500201010098b028n,0x8040002811040900n,0x28000010020204n,0x6000020202d0240n,0x8918844842082200n,0x4010011029020020n],this.RookMagicNumbers=[0x8a80104000800020n,0x140002000100040n,0x2801880a0017001n,0x100081001000420n,0x200020010080420n,0x3001c0002010008n,0x8480008002000100n,0x2080088004402900n,0x800098204000n,0x2024401000200040n,0x100802000801000n,0x120800800801000n,0x208808088000400n,0x2802200800400n,0x2200800100020080n,0x801000060821100n,0x80044006422000n,0x100808020004000n,0x12108a0010204200n,0x140848010000802n,0x481828014002800n,0x8094004002004100n,0x4010040010010802n,0x20008806104n,0x100400080208000n,0x2040002120081000n,0x21200680100081n,0x20100080080080n,0x2000a00200410n,0x20080800400n,0x80088400100102n,0x80004600042881n,0x4040008040800020n,0x440003000200801n,0x4200011004500n,0x188020010100100n,0x14800401802800n,0x2080040080800200n,0x124080204001001n,0x200046502000484n,0x480400080088020n,0x1000422010034000n,0x30200100110040n,0x100021010009n,0x2002080100110004n,0x202008004008002n,0x20020004010100n,0x2048440040820001n,0x101002200408200n,0x40802000401080n,0x4008142004410100n,0x2060820c0120200n,0x1001004080100n,0x20c020080040080n,0x2935610830022400n,0x44440041009200n,0x280001040802101n,0x2100190040002085n,0x80c0084100102001n,0x4024081001000421n,0x20030a0244872n,0x12001008414402n,0x2006104900a0804n,0x1004081002402n],this.BishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.RookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.MGPieceValue=[80,321,328,447,912,15e3],this.EGPieceValue=[102,256,271,472,911,15e3],this.PST=[[[0,0,0,0,0,0,0,0,24,24,16,16,9,10,7,6,0,11,12,8,13,21,10,-6,-23,4,-5,12,16,3,5,-26,-28,-13,-6,3,6,0,0,-30,-24,-13,-9,-10,0,-2,21,-15,-28,-8,-25,-17,-12,11,28,-21,0,0,0,0,0,0,0,0],[-11,-2,-1,-1,1,-4,-1,-5,-9,-4,5,4,2,4,0,-2,-6,9,3,11,14,13,12,5,2,0,-1,18,6,20,9,18,0,-1,-3,-10,3,-3,8,8,-10,-14,-10,-5,6,-2,4,-6,-5,-5,-19,-1,-3,0,-1,4,-5,-2,-6,-5,0,3,-2,-3],[-4,0,-4,-2,-1,-1,-1,-1,-8,-3,-6,-4,2,1,-2,-13,-10,0,3,5,4,11,5,4,-8,-5,2,16,7,10,-1,-3,0,3,-4,7,13,-9,-5,8,-1,11,4,-2,-1,5,7,1,6,7,8,-4,0,9,22,-1,-11,1,-1,-4,2,-5,-3,-6],[4,4,3,6,6,2,3,4,3,3,10,9,9,8,4,5,-4,6,2,8,1,7,6,2,-8,-6,1,-1,3,8,-1,1,-17,-9,-9,-6,-5,-7,1,-12,-22,-14,-12,-9,-6,-4,-2,-12,-23,-11,-12,-5,-2,1,-1,-30,-3,-7,-4,4,9,12,-20,-3],[-5,2,4,2,6,3,3,5,-13,-23,2,6,4,10,5,12,-7,-6,-2,3,12,16,17,22,-10,-11,-5,-5,7,6,9,14,-5,-13,-9,-8,-1,3,8,5,-9,-5,-2,-5,-5,5,2,4,-14,-8,3,7,8,6,-7,2,-6,-10,-4,13,-3,-13,-5,-6],[-1,0,0,0,0,0,1,0,0,2,1,2,2,2,1,0,1,3,3,3,2,6,5,1,0,2,4,3,3,4,3,-3,-3,1,3,1,1,0,-3,-9,-2,0,1,-3,-2,-6,-2,-11,-2,-1,-3,-25,-25,-13,13,14,-14,14,10,-29,7,-27,30,9]],[[0,0,0,0,0,0,0,0,50,47,35,28,25,25,31,39,35,32,22,5,2,9,22,21,8,0,-11,-27,-27,-21,-8,-10,-4,-4,-19,-26,-26,-24,-17,-19,-14,-9,-19,-17,-18,-19,-24,-26,-7,-9,-5,-11,-8,-18,-22,-26,0,0,0,0,0,0,0,0],[-10,-3,0,-3,1,-6,-4,-7,-5,3,-3,6,1,-4,-2,-5,-5,-2,2,1,1,1,1,-3,1,7,7,5,7,5,8,5,-1,0,2,9,3,3,6,-1,-3,-3,-11,2,-4,-17,-4,-2,-3,-2,-7,-5,1,-7,0,-2,-5,-13,-4,0,-2,-4,-9,-4],[-4,-2,-4,-2,-1,-2,-2,-3,-3,-1,0,-7,0,-3,-4,-7,1,-1,0,0,0,3,1,2,-2,4,4,11,5,4,-1,1,-1,-2,7,9,2,3,-3,-1,1,0,2,5,6,-3,-1,1,-3,-11,-7,-1,1,-5,-7,-4,-9,-1,-6,-2,-2,-4,-4,-5],[11,9,11,13,11,7,9,7,12,13,14,13,9,7,8,8,5,7,5,5,0,1,2,-2,-2,0,5,-2,-1,2,-2,0,-1,-2,1,-4,-6,-8,-6,-8,-8,-5,-9,-7,-11,-13,-6,-10,-7,-7,-5,-6,-9,-9,-7,-8,-10,-3,0,-7,-12,-13,-3,-21],[-5,2,4,3,6,4,2,4,-8,-5,4,7,7,7,3,4,-5,-3,0,7,11,11,7,9,-6,-1,1,8,12,6,9,8,-7,-2,3,13,8,6,6,4,-5,-8,1,-3,0,1,3,2,-7,-7,-14,-11,-9,-5,-6,-1,-6,-8,-7,-17,-5,-9,-4,-5],[-3,-2,-2,-1,0,1,2,-2,-2,6,6,6,6,12,7,0,1,12,14,12,11,23,21,3,-4,9,18,23,17,21,14,-5,-11,-4,14,20,19,15,2,-18,-13,-5,7,14,15,9,0,-16,-16,-9,2,6,10,3,-11,-25,-22,-25,-16,-15,-25,-12,-35,-44]]],this.PhaseValues=[0,1,1,2,4,0],this.MGdoubledPenalty=3,this.EGdoubledPenalty=10,this.MGisolatedPenalty=16,this.EGisolatedPenalty=4,this.MGfileSemiOpenScore=17,this.MGfileOpenScore=34,this.MGpassedBonus=[0,1,-4,-7,11,37,55,0],this.EGpassedBonus=[0,-9,-3,17,35,53,67,0],this.MGrookQueenFileBonus=11,this.MGKnightOutpostBonus=23,this.EGKnightOutpostBonus=14,this.MGBishopOutpostBonus=21,this.EGBishopOutpostBonus=0,this.MGCorneredBishopPenalty=25,this.EGCorneredBishopPenalty=40,this.MGKingSemiOpenPenalty=6,this.MGBishopPairBonus=25,this.EGBishopPairBonus=30,this.MGKnightMobility=[0,0,-23,-11,-9,0,15,0,24],this.MGBishopMobility=[0,-2,-28,-15,-8,0,5,13,17,18,21,23,11,8],this.MGRookMobility=[0,0,-31,-25,-22,-17,-14,-12,-11,-8,-1,2,10,17,16],this.MGQueenMobility=[0,0,0,0,-1,-5,-10,-11,-13,-9,-8,-8,-5,-3,-2,0,4,5,6,6,9,11,12,12,10,7,2,2],this.EGKnightMobility=[0,0,-25,-32,-18,0,-6,0,11],this.EGBishopMobility=[0,-1,-28,-29,-21,-16,-6,-1,6,8,11,10,11,10],this.EGRookMobility=[0,0,-26,-29,-19,-13,-6,-2,4,6,7,10,9,11,8],this.EGQueenMobility=[0,0,0,0,0,-1,-2,-3,-7,-8,-13,-13,-16,-15,-8,-4,-3,4,9,9,15,11,16,16,11,9,3,2],this.PhaseTotal=4*this.PhaseValues[1]+4*this.PhaseValues[2]+4*this.PhaseValues[3]+2*this.PhaseValues[4],this.KingSquares=[0,0],this.MaxPly=100,this.Checkmate=15e3,this.Inf=2e4,this.search={nodes:0,killers:Array(2).fill(0).map((()=>Array(this.MaxPly).fill(0))),history:Array(2).fill(0).map((()=>Array(64).fill(0).map((()=>Array(64).fill(0))))),bestMove:{move:0,score:-this.Inf}},this.Timer={timeleft:-1,increment:0,depth:this.MaxPly,movestogo:0,startTime:0,stopTime:0,movetime:-1,stop:!1,extended:!1},this.totalNodes=0,this.Init(),this.InitHashes(),this.SetTransTableSize()}SetBit(s,i){return s|1n<<this.SquareBigInt[i]}RemoveBit(s,i){return s&~(1n<<this.SquareBigInt[i])}GetBit(s,i){return s&1n<<this.SquareBigInt[i]}CountBits(s){const i=Number(0xffffffffn&s),t=Number(s>>32n);function e(s){return 16843009*((s=(858993459&(s-=s>>1&1431655765))+(s>>2&858993459))+(s>>4)&252645135)>>24}return e(i)+e(t)}GetLS1B(s){return s?this.CountBits((s&-s)-1n):-1}PrintBitboard(s){for(let i=0;i<8;i++){let t="";for(let e=0;e<8;e++){const o=8*i+e;e||(t+=8-i+"  "),t+=" "+(this.GetBit(s,o)?"1":"0")}console.log(`${t} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${s}`)}LoadFEN(i){this.Position.PiecesBB=[[0n,0n,0n,0n,0n,0n],[0n,0n,0n,0n,0n,0n]],this.Position.OccupanciesBB=[0n,0n],this.Position.CastlingRights=0,this.Position.Squares=[],this.Position.EnPassSq=s.no_sq,this.Position.Phase=this.PhaseTotal,this.Position.CastlingSquaresMask=new Array(64).fill(15);const t=i.split(" ")[0].split("");let e=0;for(let s=0;s<t.length;s++){const i=t[s];switch(i){case"p":case"n":case"b":case"r":case"q":case"k":case"P":case"N":case"B":case"R":case"Q":case"K":{const s=this.CharToPiece.get(i);this.PlacePiece(s.Type,s.Color,e),this.Position.Phase-=this.PhaseValues[s.Type],e++;break}case"1":case"2":case"3":case"4":case"4":case"5":case"6":case"7":case"8":e+=parseInt(i);break;case"/":break;default:throw new Error(`Unable to parse FEN character: ${i}`)}}this.Position.SideToMove="w"===i.split(" ")[1]?0:1;const o=i.split(" ")[2].split("");for(const i of o){const t=i.toUpperCase()===i?0:1,e=this.GetLS1B(this.Position.PiecesBB[t][5]);if(this.Position.CastlingSquaresMask[e]=0===t?12:3,"K"===i.toUpperCase()){const i=this.Position.Squares.findIndex(((s,i)=>s&&3===s.Type&&s.Color===t&&i>e));0===t?(this.Position.CastlingRights|=1,this.Position.CastlingPaths[1]=(this.betweenMasks[e][s.g1]|this.betweenMasks[i][s.f1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[1]=i,this.Position.CastlingSquaresMask[i]=14):(this.Position.CastlingRights|=4,this.Position.CastlingPaths[4]=(this.betweenMasks[e][s.g8]|this.betweenMasks[i][s.f8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[4]=i,this.Position.CastlingSquaresMask[i]=11)}else if("Q"===i.toUpperCase()){const i=this.Position.Squares.findIndex(((s,i)=>s&&3===s.Type&&s.Color===t&&i<e));0===t?(this.Position.CastlingRights|=2,this.Position.CastlingPaths[2]=(this.betweenMasks[e][s.c1]|this.betweenMasks[i][s.d1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[2]=i,this.Position.CastlingSquaresMask[i]=13):(this.Position.CastlingRights|=8,this.Position.CastlingPaths[8]=(this.betweenMasks[e][s.c8]|this.betweenMasks[i][s.d8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[8]=i,this.Position.CastlingSquaresMask[i]=7)}else if(i.toUpperCase()>="A"&&i.toUpperCase()<="H")if(i.toUpperCase().charCodeAt(0)-65>(7&e)){const i=this.Position.Squares.findIndex(((s,i)=>s&&3===s.Type&&s.Color===t&&i>e));0===t?(this.Position.CastlingRights|=1,this.Position.CastlingPaths[1]=(this.betweenMasks[e][s.g1]|this.betweenMasks[i][s.f1]|this.squareBB[s.g1]|this.squareBB[s.f1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[1]=i,this.Position.CastlingSquaresMask[i]=14):(this.Position.CastlingRights|=4,this.Position.CastlingPaths[4]=(this.betweenMasks[e][s.g8]|this.betweenMasks[i][s.f8]|this.squareBB[s.g8]|this.squareBB[s.f8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[4]=i,this.Position.CastlingSquaresMask[i]=11)}else if(0===t){const i=this.Position.Squares.findIndex(((s,i)=>s&&3===s.Type&&s.Color===t&&i>=56&&i<e));this.Position.CastlingRights|=2,this.Position.CastlingPaths[2]=(this.betweenMasks[e][s.c1]|this.betweenMasks[i][s.d1]|this.squareBB[s.c1]|this.squareBB[s.d1])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[2]=i,this.Position.CastlingSquaresMask[i]=13}else{const i=this.Position.Squares.findIndex(((s,i)=>s&&3===s.Type&&s.Color===t&&i<e));this.Position.CastlingRights|=8,this.Position.CastlingPaths[8]=(this.betweenMasks[e][s.c8]|this.betweenMasks[i][s.d8]|this.squareBB[s.c8]|this.squareBB[s.d8])&~(this.Position.PiecesBB[t][5]|this.SetBit(0n,i)),this.Position.CastlingRookSquares[8]=i,this.Position.CastlingSquaresMask[i]=7}}const n=i.split(" ")[3];if("-"!==n){const s="abcdefgh".indexOf(n.split("")[0]),i=8*(8-parseInt(n[1],10))+s;this.PawnAttacks[1^this.Position.SideToMove][i]&this.Position.PiecesBB[this.Position.SideToMove][0]&&(this.Position.EnPassSq=i)}this.Position.Ply=2*parseInt(i.split(" ")[5])||0,1===this.Position.SideToMove&&this.Position.Ply--,this.Position.HalfMoves=parseInt(i.split(" ")[4])||0;const{hash:h,pawnHash:a}=this.GenerateHashes();this.Position.Hash=h,this.Position.PawnHash=a,this.PositionHistory.length=0,this.PositionHistory[0]=this.Position.Hash,this.KingSquares[0]=0,this.KingSquares[1]=0}PrintBoard(){const i=[["♙","♘","♗","♖","♕","♔"],["♟︎","♞","♝","♜","♛","♚"]];for(let s=0;s<8;s++){let t="";for(let e=0;e<8;e++){let o=8*s+e,n=this.Position.Squares[o]??null;e||(t+=8-s+" "),t+=n?` ${i[n.Color][n.Type]}`:" . "}console.log(`${t} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(0===this.Position.SideToMove?"white":"black")),console.log(`En passant: ${this.Position.EnPassSq!==s.no_sq?s[this.Position.EnPassSq]:"no"}`),console.log(`Castling rights: ${1&this.Position.CastlingRights?"K":"-"}${2&this.Position.CastlingRights?"Q":"-"}${4&this.Position.CastlingRights?"k":"-"}${8&this.Position.CastlingRights?"q":"-"}`),console.log(`Plies: ${this.Position.Ply}`)}GenerateMoves(s=!1){const i=[];let t=0xffffffffffffffffn;s?(t=this.Position.OccupanciesBB[1^this.Position.SideToMove],this.GeneratePawnAttacks(i)):(this.GeneratePawnMoves(i,t),this.GenerateCastlingMoves(i));for(let s=1;s<=5;s++){let e=this.Position.PiecesBB[this.Position.SideToMove][s];for(;e;){const o=this.GetLS1B(e);switch(s){case 1:this.GenerateKnightMoves(i,o,t);break;case 2:this.GenerateBishopMoves(i,o,t);break;case 3:this.GenerateRookMoves(i,o,t);break;case 4:this.GenerateQueenMoves(i,o,t);break;case 5:this.GenerateKingMoves(i,o,t)}e=this.RemoveBit(e,o)}}return i}GenerateEvasions(){const s=[];let i=0xffffffffffffffffn;const t=this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]);let e=this.AttacksToByColor(t,1^this.Position.SideToMove);if(this.GenerateKingMoves(s,t,i),this.CountBits(e)>1)return s;i=e;const o=this.GetLS1B(e);this.Position.Squares[o].Type>=2&&(i|=this.betweenMasks[t][o]),this.GeneratePawnMoves(s,i);for(let t=1;t<5;t++){let e=this.Position.PiecesBB[this.Position.SideToMove][t];for(;e;){const o=this.GetLS1B(e);switch(t){case 1:this.GenerateKnightMoves(s,o,i);break;case 2:this.GenerateBishopMoves(s,o,i);break;case 3:this.GenerateRookMoves(s,o,i);break;case 4:this.GenerateQueenMoves(s,o,i)}e=this.RemoveBit(e,o)}}return s}GeneratePawnMoves(i,t){let e=this.Position.PiecesBB[this.Position.SideToMove][0];const o=~(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1]);let n=(0===this.Position.SideToMove?e>>8n:e<<8n)&o,h=n>>8n&0x000000ff00000000n&o;for(1===this.Position.SideToMove&&(h=n<<8n&0x00000000ff000000n&o),n&=t,h&=t;n;){const t=this.GetLS1B(n),e=0===this.Position.SideToMove?t+8:t-8;(0===this.Position.SideToMove?t<=s.h8:t>=s.a1)?(i.push(this.EncodeMove(e,t,1,0)),i.push(this.EncodeMove(e,t,1,1)),i.push(this.EncodeMove(e,t,1,2)),i.push(this.EncodeMove(e,t,1,3))):i.push(this.EncodeMove(e,t,0)),n=this.RemoveBit(n,t)}for(;h;){const s=this.GetLS1B(h),t=0===this.Position.SideToMove?s+16:s-16;i.push(this.EncodeMove(t,s,0)),h=this.RemoveBit(h,s)}for(;e;){const o=this.GetLS1B(e);let n=this.PawnAttacks[this.Position.SideToMove][o]&this.Position.OccupanciesBB[1^this.Position.SideToMove]&t;for(;n;){const t=this.GetLS1B(n);(0===this.Position.SideToMove?t<=s.h8:t>=s.a1)?(i.push(this.EncodeMove(o,t,1,0)),i.push(this.EncodeMove(o,t,1,1)),i.push(this.EncodeMove(o,t,1,2)),i.push(this.EncodeMove(o,t,1,3))):i.push(this.EncodeMove(o,t,0)),n=this.RemoveBit(n,t)}if(this.Position.EnPassSq!==s.no_sq){const s=this.PawnAttacks[this.Position.SideToMove][o]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(s){const t=this.GetLS1B(s);i.push(this.EncodeMove(o,t,2))}}e=this.RemoveBit(e,o)}}GeneratePawnAttacks(i){let t=this.Position.PiecesBB[this.Position.SideToMove][0];for(;t;){const e=this.GetLS1B(t);let o=this.PawnAttacks[this.Position.SideToMove][e]&this.Position.OccupanciesBB[1^this.Position.SideToMove];for(;o;){const t=this.GetLS1B(o);(0===this.Position.SideToMove?t<=s.h8:t>=s.a1)?(i.push(this.EncodeMove(e,t,1,0)),i.push(this.EncodeMove(e,t,1,1)),i.push(this.EncodeMove(e,t,1,2)),i.push(this.EncodeMove(e,t,1,3))):i.push(this.EncodeMove(e,t,0)),o=this.RemoveBit(o,t)}if(this.Position.EnPassSq!==s.no_sq){const s=this.PawnAttacks[this.Position.SideToMove][e]&1n<<this.SquareBigInt[this.Position.EnPassSq];if(s){const t=this.GetLS1B(s);i.push(this.EncodeMove(e,t,2))}}t=this.RemoveBit(t,e)}}GenerateCastlingMoves(i){const t=this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]);if(this.IsSquareAttacked(t,1^this.Position.SideToMove))return;const e=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];if(0===this.Position.SideToMove){if(1&this.Position.CastlingRights){let o=this.betweenMasks[t][s.h1];if(0n===(this.Position.CastlingPaths[1]&e)){let s=!0;for(;s&&o;){const i=this.GetLS1B(o);o=this.RemoveBit(o,i),this.IsSquareAttacked(i,1^this.Position.SideToMove)&&(s=!1)}s&&i.push(this.EncodeMove(t,this.Position.CastlingRookSquares[1],3))}}if(2&this.Position.CastlingRights){let o=this.betweenMasks[t][s.c1];if(0n===(this.Position.CastlingPaths[2]&e)){let s=!0;for(;s&&o;){const i=this.GetLS1B(o);o=this.RemoveBit(o,i),this.IsSquareAttacked(i,1^this.Position.SideToMove)&&(s=!1)}s&&i.push(this.EncodeMove(t,this.Position.CastlingRookSquares[2],3))}}}else{if(4&this.Position.CastlingRights){let o=this.betweenMasks[t][s.h8];if(0n===(this.Position.CastlingPaths[4]&e)){let s=!0;for(;s&&o;){const i=this.GetLS1B(o);o=this.RemoveBit(o,i),this.IsSquareAttacked(i,1^this.Position.SideToMove)&&(s=!1)}s&&i.push(this.EncodeMove(t,this.Position.CastlingRookSquares[4],3))}}if(8&this.Position.CastlingRights){let o=this.betweenMasks[t][s.c8];if(0n===(this.Position.CastlingPaths[8]&e)){let s=!0;for(;s&&o;){const i=this.GetLS1B(o);o=this.RemoveBit(o,i),this.IsSquareAttacked(i,1^this.Position.SideToMove)&&(s=!1)}s&&i.push(this.EncodeMove(t,this.Position.CastlingRookSquares[8],3))}}}}GenerateKnightMoves(s,i,t){let e=this.KnightAttacks[i]&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;e;){const t=this.GetLS1B(e);s.push(this.EncodeMove(i,t,0)),e=this.RemoveBit(e,t)}}GenerateBishopAttacks(s,i){return s=BigInt.asUintN(64,s&this.BishopMasks[i]),s=BigInt.asUintN(64,s*this.BishopMagicNumbers[i]),s>>=64n-this.BishopRelevantBits[i],this.BishopAttacks[i][Number(s)]}GenerateBishopMoves(s,i,t){let e=this.GenerateBishopAttacks(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],i)&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;e;){const t=this.GetLS1B(e);s.push(this.EncodeMove(i,t,0)),e=this.RemoveBit(e,t)}}GenerateRookAttacks(s,i){return s=BigInt.asUintN(64,s&this.RookMasks[i]),s=BigInt.asUintN(64,s*this.RookMagicNumbers[i]),s>>=64n-this.RookRelevantBits[i],this.RookAttacks[i][Number(s)]}GenerateRookMoves(s,i,t){let e=this.GenerateRookAttacks(this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],i)&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;e;){const t=this.GetLS1B(e);s.push(this.EncodeMove(i,t,0)),e=this.RemoveBit(e,t)}}GenerateQueenMoves(s,i,t){const e=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let o=(this.GenerateBishopAttacks(e,i)|this.GenerateRookAttacks(e,i))&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;o;){const t=this.GetLS1B(o);s.push(this.EncodeMove(i,t,0)),o=this.RemoveBit(o,t)}}GenerateKingMoves(s,i,t){let e=this.KingAttacks[i]&~this.Position.OccupanciesBB[this.Position.SideToMove]&t;for(;e;){const t=this.GetLS1B(e);s.push(this.EncodeMove(i,t,0)),e=this.RemoveBit(e,t)}}EncodeMove(s,i,t,e=0){return s|i<<6|t<<12|e<<14}MoveIsCapture(s){const i=(16256&s)>>12;return 3!==i&&void 0!==this.Position.Squares[(4032&s)>>6]||2===i}MoveIsPromotion(s){return(16256&s)>>12==1}IsSquareAttacked(s,i){const t=this.Position.PiecesBB[i][2],e=this.Position.PiecesBB[i][3],o=this.Position.PiecesBB[i][4];if(this.PawnAttacks[1^i][s]&this.Position.PiecesBB[i][0])return!0;if(this.KnightAttacks[s]&this.Position.PiecesBB[i][1])return!0;const n=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1],h=t|o;if(this.attackRays[0][s]&h&&this.GenerateBishopAttacks(n,s)&h)return!0;const a=e|o;return!!(this.attackRays[1][s]&a&&this.GenerateRookAttacks(n,s)&a)||!!(this.KingAttacks[s]&this.Position.PiecesBB[i][5])}MakeMove(i){const t=63&i,e=(4032&i)>>6,o=(16256&i)>>12,n=this.Position.Squares[t];let h=2===o?{Type:0,Color:1^this.Position.SideToMove}:this.Position.Squares[e];if(this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Captured:h,Hash:this.Position.Hash,PawnHash:this.Position.PawnHash,HalfMoves:this.Position.HalfMoves,Phase:this.Position.Phase}),this.Position.Ply++,this.Position.HalfMoves++,this.Position.EnPassSq!==s.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=s.no_sq),3===o)this.DoCastle(n,t,e);else{if(void 0!==h||2===o){let s=e;2===o&&(s=0===n.Color?e+8:e-8),this.RemovePiece(h.Type,h.Color,s),this.Position.HalfMoves=0,this.Position.Hash^=this.Zobrist.Pieces[h.Color][h.Type][e],this.Position.Phase+=this.PhaseValues[h.Type],0===h.Type&&(this.Position.PawnHash^=this.Zobrist.Pieces[h.Color][h.Type][e])}if(this.MovePiece(n,t,e),this.Position.Hash^=this.Zobrist.Pieces[n.Color][n.Type][t]^this.Zobrist.Pieces[n.Color][n.Type][e],0===n.Type)if(this.Position.HalfMoves=0,this.Position.PawnHash^=this.Zobrist.Pieces[n.Color][n.Type][t]^this.Zobrist.Pieces[n.Color][n.Type][e],1===o){const s={Type:1+(i>>14),Color:n.Color};this.RemovePiece(n.Type,n.Color,e),this.PlacePiece(s.Type,s.Color,e),this.Position.Phase+=this.PhaseValues[0],this.Position.Phase-=this.PhaseValues[s.Type],this.Position.Hash^=this.Zobrist.Pieces[n.Color][n.Type][e]^this.Zobrist.Pieces[s.Color][s.Type][e],this.Position.PawnHash^=this.Zobrist.Pieces[n.Color][n.Type][e]}else 16==(e^t)&&(this.Position.EnPassSq=0===n.Color?e+8:e-8,this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq])}return this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.CastlingRights&=this.Position.CastlingSquaresMask[t]&this.Position.CastlingSquaresMask[e],this.Position.Hash^=this.Zobrist.Castle[this.Position.CastlingRights],this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.PositionHistory[this.PositionHistory.length]=this.Position.Hash,!this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[1^this.Position.SideToMove][5]),this.Position.SideToMove)}UnmakeMove(s){const i=this.stateCopy.pop();this.Position.Ply--,this.PositionHistory.pop(),this.Position.CastlingRights=i.CastlingRights,this.Position.EnPassSq=i.EnPassSq,this.Position.HalfMoves=i.HalfMoves,this.Position.Phase=i.Phase,this.Position.SideToMove^=1;const t=63&s,e=(4032&s)>>6,o=(16256&s)>>12,n=this.Position.Squares[e];if(3===o)this.UndoCastle(t,e);else if(1===o)this.RemovePiece(n.Type,n.Color,e),this.PlacePiece(0,n.Color,t),i.Captured&&this.PlacePiece(i.Captured.Type,i.Captured.Color,e);else if(this.MovePiece(n,e,t),i.Captured){let s=e,t=i.Captured;2===o&&(s=0===n.Color?e+8:e-8),this.PlacePiece(t.Type,t.Color,s)}this.Position.Hash=i.Hash,this.Position.PawnHash=i.PawnHash}DoCastle(i,t,e){const o=e>t;let n=s.g1^56*i.Color,h=s.f1^56*i.Color;o||(n=s.c1^56*i.Color,h=s.d1^56*i.Color);const a=e;this.RemovePiece(3,i.Color,a),this.RemovePiece(i.Type,i.Color,t),this.PlacePiece(3,i.Color,h),this.PlacePiece(i.Type,i.Color,n),this.Position.Hash^=this.Zobrist.Pieces[i.Color][3][a]^this.Zobrist.Pieces[i.Color][3][h]}UndoCastle(i,t){const e=this.Position.SideToMove,o=t>i;let n=s.g1^56*e,h=s.f1^56*e;o||(n=s.c1^56*e,h=s.d1^56*e);const a=t;this.RemovePiece(3,e,h),this.RemovePiece(5,e,n),this.PlacePiece(3,e,a),this.PlacePiece(5,e,i)}MakeNullMove(){this.stateCopy.push({CastlingRights:this.Position.CastlingRights,EnPassSq:this.Position.EnPassSq,Hash:this.Position.Hash,HalfMoves:this.Position.HalfMoves,PawnHash:this.Position.PawnHash,Phase:this.Position.Phase}),this.Position.EnPassSq!==s.no_sq&&(this.Position.Hash^=this.Zobrist.EnPassant[this.Position.EnPassSq],this.Position.EnPassSq=s.no_sq),this.Position.HalfMoves=0,this.Position.SideToMove^=1,this.Position.Hash^=this.Zobrist.SideToMove,this.Position.Ply++}UnmakeNullMove(){const s=this.stateCopy.pop();this.Position.CastlingRights=s.CastlingRights,this.Position.EnPassSq=s.EnPassSq,this.Position.HalfMoves=s.HalfMoves,this.Position.SideToMove^=1,this.Position.Hash=s.Hash,this.Position.PawnHash=s.PawnHash,this.Position.Ply--,this.Position.Phase=s.Phase}MovePiece(s,i,t){const e=this.squareBB[i]|this.squareBB[t];this.Position.PiecesBB[s.Color][s.Type]^=e,this.Position.OccupanciesBB[s.Color]^=e,delete this.Position.Squares[i],this.Position.Squares[t]=s}RemovePiece(s,i,t){this.Position.PiecesBB[i][s]=this.RemoveBit(this.Position.PiecesBB[i][s],t),this.Position.OccupanciesBB[i]=this.RemoveBit(this.Position.OccupanciesBB[i],t),delete this.Position.Squares[t]}PlacePiece(s,i,t){this.Position.PiecesBB[i][s]=this.SetBit(this.Position.PiecesBB[i][s],t),this.Position.OccupanciesBB[i]=this.SetBit(this.Position.OccupanciesBB[i],t),this.Position.Squares[t]={Type:s,Color:i}}PrettyPrintMove(i){const t=63&i;let e=(4032&i)>>6;const o=(16256&i)>>12;3!==o||this.isChess960||(e=e>t?e-1:e+2);let n=`${s[t]}${s[e]}`;if(1===o){const s=i>>14;0===s&&(n+="n"),1===s&&(n+="b"),2===s&&(n+="r"),3===s&&(n+="q")}return n}Init(){const i=-1n,t=0x0001010101010100n,e=0x0040201008040200n,o=0x0002040810204080n;let n,h,a,r;for(let P=s.a8;P<=s.h1;P++){this.squareBB[P]=this.SetBit(0n,P),this.rankMasks[P]=0xffn<<(56n&BigInt(P)),this.fileMasks[P]=0x0101010101010101n<<(7n&BigInt(P)),this.isolatedMasks[P]=this.fileMasks[P]<<1n|this.fileMasks[P]>>1n,this.PawnAttacks[0][P]=this.MaskPawnAttacks(0,P),this.PawnAttacks[1][P]=this.MaskPawnAttacks(1,P),this.KnightAttacks[P]=this.MaskKnightAttacks(P),this.KingAttacks[P]=this.MaskKingAttacks(P),this.BishopMasks[P]=this.GenerateBishopMasks(P);let s=this.CountBits(this.BishopMasks[P]),c=1<<s;for(let i=0;i<c;i++){const t=this.SetOccupancy(i,s,this.BishopMasks[P]),e=BigInt.asUintN(64,t*this.BishopMagicNumbers[P])>>64n-this.BishopRelevantBits[P];this.BishopAttacks[P][Number(e)]=this.GenerateBishopAttacksFly(P,t)}this.RookMasks[P]=this.GenerateRookMasks(P),s=this.CountBits(this.RookMasks[P]),c=1<<s;for(let i=0;i<c;i++){const t=this.SetOccupancy(i,s,this.RookMasks[P]),e=BigInt.asUintN(64,t*this.RookMagicNumbers[P])>>64n-this.RookRelevantBits[P];this.RookAttacks[P][Number(e)]=this.GenerateRookAttacksFly(P,t)}this.attackRays[0][P]=this.GenerateBishopAttacks(0n,P),this.attackRays[2][P]|=this.attackRays[0][P],this.attackRays[1][P]=this.GenerateRookAttacks(0n,P),this.attackRays[2][P]|=this.attackRays[1][P];let l=this.fileMasks[P]|(this.fileMasks[P]&this.notAFile)>>1n|(this.fileMasks[P]&this.notHFile)<<1n;this.passedMasks[0][P]=l,this.passedMasks[1][56^P]=l;for(let s=0;s<64;s++){const c=P>>3,l=s>>3,B=7&P,p=7&s;this.distanceBetween[P][s]=Math.max(Math.abs(l-c),Math.abs(p-B)),n=i<<BigInt(P)^i<<BigInt(s),r=(7n&BigInt(s))-(7n&BigInt(P)),a=(7n|BigInt(s))-BigInt(P)>>3n,h=(7n&r)-1n&t,h+=2n*((7n&a)-1n>>58n),h+=(a-r&15n)-1n&e,h+=(a+r&15n)-1n&o,h*=n&-n,this.betweenMasks[P][s]=BigInt.asUintN(64,h&n)}}for(let i=s.a8;i<=s.h1;i++){for(let t=i;t<=s.h1;t+=8)this.passedMasks[0][i]&=~this.rankMasks[t];for(let t=i;t>=s.a8;t-=8)this.passedMasks[1][56^i]&=~this.rankMasks[t]}}MaskPawnAttacks(s,i){let t=0n,e=0n;return e=this.SetBit(e,i),s?(e<<7n&this.notHFile&&(t|=e<<7n),e<<9n&this.notAFile&&(t|=e<<9n)):(e>>7n&this.notAFile&&(t|=e>>7n),e>>9n&this.notHFile&&(t|=e>>9n)),BigInt.asUintN(64,t)}MaskKnightAttacks(s){let i=0n,t=0n;return t=this.SetBit(t,s),t>>17n&this.notHFile&&(i|=t>>17n),t>>15n&this.notAFile&&(i|=t>>15n),t>>10n&this.notHGFile&&(i|=t>>10n),t>>6n&this.notABFile&&(i|=t>>6n),t<<17n&this.notAFile&&(i|=t<<17n),t<<15n&this.notHFile&&(i|=t<<15n),t<<10n&this.notABFile&&(i|=t<<10n),t<<6n&this.notHGFile&&(i|=t<<6n),BigInt.asUintN(64,i)}GenerateBishopMasks(s){let i=0n;const t=Math.floor(s/8),e=s%8;for(let s=t+1,o=e+1;s<=6&&o<=6;s++,o++)i|=1n<<8n*BigInt(s)+BigInt(o);for(let s=t-1,o=e+1;s>=1&&o<=6;s--,o++)i|=1n<<8n*BigInt(s)+BigInt(o);for(let s=t+1,o=e-1;s<=6&&o>=1;s++,o--)i|=1n<<8n*BigInt(s)+BigInt(o);for(let s=t-1,o=e-1;s>=1&&o>=1;s--,o--)i|=1n<<8n*BigInt(s)+BigInt(o);return BigInt.asUintN(64,i)}GenerateBishopAttacksFly(s,i){let t=0n;const e=Math.floor(s/8),o=s%8;for(let s=e+1,n=o+1;s<=7&&n<=7&&(t|=1n<<8n*BigInt(s)+BigInt(n),!(1n<<8n*BigInt(s)+BigInt(n)&i));s++,n++);for(let s=e-1,n=o+1;s>=0&&n<=7&&(t|=1n<<8n*BigInt(s)+BigInt(n),!(1n<<8n*BigInt(s)+BigInt(n)&i));s--,n++);for(let s=e+1,n=o-1;s<=7&&n>=0&&(t|=1n<<8n*BigInt(s)+BigInt(n),!(1n<<8n*BigInt(s)+BigInt(n)&i));s++,n--);for(let s=e-1,n=o-1;s>=0&&n>=0&&(t|=1n<<8n*BigInt(s)+BigInt(n),!(1n<<8n*BigInt(s)+BigInt(n)&i));s--,n--);return BigInt.asUintN(64,t)}GenerateRookMasks(s){let i=0n;const t=Math.floor(s/8),e=s%8;for(let s=t+1;s<=6;s++)i|=1n<<8n*BigInt(s)+BigInt(e);for(let s=t-1;s>=1;s--)i|=1n<<8n*BigInt(s)+BigInt(e);for(let s=e+1;s<=6;s++)i|=1n<<8n*BigInt(t)+BigInt(s);for(let s=e-1;s>=1;s--)i|=1n<<8n*BigInt(t)+BigInt(s);return BigInt.asUintN(64,i)}GenerateRookAttacksFly(s,i){let t=0n;const e=Math.floor(s/8),o=s%8;for(let s=e+1;s<=7&&(t|=1n<<8n*BigInt(s)+BigInt(o),!(1n<<8n*BigInt(s)+BigInt(o)&i));s++);for(let s=e-1;s>=0&&(t|=1n<<8n*BigInt(s)+BigInt(o),!(1n<<8n*BigInt(s)+BigInt(o)&i));s--);for(let s=o+1;s<=7&&(t|=1n<<8n*BigInt(e)+BigInt(s),!(1n<<8n*BigInt(e)+BigInt(s)&i));s++);for(let s=o-1;s>=0&&(t|=1n<<8n*BigInt(e)+BigInt(s),!(1n<<8n*BigInt(e)+BigInt(s)&i));s--);return BigInt.asUintN(64,t)}MaskKingAttacks(s){let i=0n,t=0n;return t=this.SetBit(t,s),t>>8n&&(i|=t>>8n),t>>9n&this.notHFile&&(i|=t>>9n),t>>7n&this.notAFile&&(i|=t>>7n),t>>1n&this.notHFile&&(i|=t>>1n),t<<8n&&(i|=t<<8n),t<<9n&this.notAFile&&(i|=t<<9n),t<<7n&this.notHFile&&(i|=t<<7n),t<<1n&this.notAFile&&(i|=t<<1n),BigInt.asUintN(64,i)}SetOccupancy(s,i,t){let e=0n;for(let o=0;o<i;o++){const i=this.GetLS1B(t);t=this.RemoveBit(t,i),s&1<<o&&(e|=1n<<this.SquareBigInt[i])}return BigInt.asUintN(64,e)}Random64(){let s=this.PRNG_SEED;return s^=s>>12n,s^=s<<25n,s^=s>>27n,this.PRNG_SEED=s,BigInt.asUintN(64,2685821657736338717n*s)}InitHashes(){for(let i=0;i<=5;i++)for(let t=s.a8;t<=s.h1;t++)this.Zobrist.Pieces[0][i][t]=this.Random64(),this.Zobrist.Pieces[1][i][t]=this.Random64();for(let i=s.a8;i<=s.h1;i++)this.Zobrist.EnPassant[i]=this.Random64();for(let s=0;s<16;s++)this.Zobrist.Castle[s]=this.Random64();this.Zobrist.SideToMove=this.Random64()}GenerateHashes(){let i=0n,t=0n;for(let e=s.a8;e<=s.h1;e++){const s=this.Position.Squares[e];s&&(i^=this.Zobrist.Pieces[s.Color][s.Type][e],0===s.Type&&(t^=this.Zobrist.Pieces[s.Color][0][e]))}return this.Position.EnPassSq!==s.no_sq&&(i^=this.Zobrist.EnPassant[this.Position.EnPassSq]),i^=this.Zobrist.Castle[this.Position.CastlingRights],1===this.Position.SideToMove&&(i^=this.Zobrist.SideToMove),{hash:i,pawnHash:t}}SetTransTableSize(s=32){this.TranspositionTables.Size=BigInt(1024*s*1024/16),this.TranspositionTables.Entries.length=0,this.PawnHashTable.Size=BigInt(65536),this.PawnHashTable.Entries.length=0}WriteTT(s,i,t,e){const o=Number(this.Position.Hash%this.TranspositionTables.Size);t>this.Checkmate&&(t+=this.Position.Ply),t<-this.Checkmate&&(t-=this.Position.Ply),this.TranspositionTables.Entries[o]={BestMove:e,Depth:s,Flag:i,Hash:this.Position.Hash,Score:t}}ProbeTT(s,i,t){const e=this.TranspositionTables.Entries[Number(this.Position.Hash%this.TranspositionTables.Size)];let o=this.HashNoMove;if(!e||e.Hash!==this.Position.Hash)return{ttScore:o,ttMove:0};if(e.Depth>=s){let s=e.Score;s>this.Checkmate&&(s-=this.Position.Ply),s<-this.Checkmate&&(s+=this.Position.Ply),0===e.Flag&&(o=s),1===e.Flag&&s<=i&&(o=s),2===e.Flag&&s>=t&&(o=s)}return{ttScore:o,ttMove:e.BestMove}}Evaluate(){let i=[0,0],t=[0,0],e=this.Position.Phase;const o=[0,0],n=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let h=n&~(this.Position.PiecesBB[0][0]|this.Position.PiecesBB[1][0]);const a=this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)];if(a&&a.hash===this.Position.PawnHash)i[0]+=a.wScore.mg,t[0]+=a.wScore.eg,i[1]+=a.bScore.mg,t[1]+=a.bScore.eg;else{const s=this.EvaluatePawns();i[0]+=s.mgScores[0],t[0]+=s.egScores[0],i[1]+=s.mgScores[1],t[1]+=s.egScores[1],this.PawnHashTable.Entries[Number(this.Position.PawnHash%this.PawnHashTable.Size)]={hash:this.Position.PawnHash,wScore:{mg:s.mgScores[0],eg:s.egScores[0]},bScore:{mg:s.mgScores[1],eg:s.egScores[1]}}}const r=[this.rankMasks[s.a4]|this.rankMasks[s.a5]|this.rankMasks[s.a6],this.rankMasks[s.a3]|this.rankMasks[s.a4]|this.rankMasks[s.a5]];for(;h;){let e=this.GetLS1B(h),a=e;h=this.RemoveBit(h,e);const P=this.Position.Squares[e];switch(1===P.Color&&(e^=56),i[P.Color]+=this.PST[0][P.Type][e]+this.MGPieceValue[P.Type],t[P.Color]+=this.PST[1][P.Type][e]+this.EGPieceValue[P.Type],P.Type){case 1:{r[P.Color]&this.squareBB[a]&&0n===(this.passedMasks[P.Color][a]&~this.fileMasks[a]&this.Position.PiecesBB[1^P.Color][0])&&this.PawnAttacks[1^P.Color][a]&this.Position.PiecesBB[P.Color][0]&&(i[P.Color]+=this.MGKnightOutpostBonus,t[P.Color]+=this.EGKnightOutpostBonus);const s=this.KnightAttacks[a],e=this.CountBits(s);i[P.Color]+=this.MGKnightMobility[e],t[P.Color]+=this.EGKnightMobility[e];break}case 2:{o[P.Color]++;const h=this.GenerateBishopAttacks(n,a),c=this.CountBits(h);if(i[P.Color]+=this.MGBishopMobility[c],t[P.Color]+=this.EGBishopMobility[c],r[P.Color]&this.squareBB[a]&&0n===(this.passedMasks[P.Color][a]&~this.fileMasks[a]&this.Position.PiecesBB[1^P.Color][0])&&this.PawnAttacks[1^P.Color][a]&this.Position.PiecesBB[P.Color][0]&&(i[P.Color]+=this.MGBishopOutpostBonus,t[P.Color]+=this.EGBishopOutpostBonus),this.isChess960&&(e===s.a1||e===s.h1)){let s=0==(7&e)?1n<<49n:1n<<54n;1===P.Color&&(s>>=40n),0n!==(s&this.Position.PiecesBB[P.Color][0])&&(i[P.Color]-=this.MGCorneredBishopPenalty,t[P.Color]-=this.EGCorneredBishopPenalty)}break}case 3:{const s=this.GenerateRookAttacks(n,a),o=this.CountBits(s);i[P.Color]+=this.MGRookMobility[o],t[P.Color]+=this.EGRookMobility[o],0n===(this.Position.PiecesBB[P.Color][0]&this.fileMasks[e])&&(0n===(this.Position.PiecesBB[1^P.Color][0]&this.fileMasks[e])?i[P.Color]+=this.MGfileOpenScore:i[P.Color]+=this.MGfileSemiOpenScore),this.fileMasks[e]&this.Position.PiecesBB[1^P.Color][4]&&(i[P.Color]+=this.MGrookQueenFileBonus);break}case 4:{const s=this.GenerateBishopAttacks(n,a)|this.GenerateRookAttacks(n,a),e=this.CountBits(s);i[P.Color]+=this.MGQueenMobility[e],t[P.Color]+=this.EGQueenMobility[e];break}case 5:if(a!==this.KingSquares[P.Color]){this.KingSquares[P.Color]=a;const s=Math.min(Math.max(7&e,1),6);let t=1;for(let e=s-1;e<=s+1;e++)0n===(this.fileMasks[e]&this.Position.PiecesBB[P.Color][0])&&(i[P.Color]-=this.MGKingSemiOpenPenalty*t*t,t++)}}}return o[0]>=2&&(i[0]+=this.MGBishopPairBonus,t[0]+=this.EGBishopPairBonus),o[1]>=2&&(i[1]+=this.MGBishopPairBonus,t[1]+=this.EGBishopPairBonus),e=(256*e+this.PhaseTotal/2)/this.PhaseTotal|0,((i[this.Position.SideToMove]-i[1^this.Position.SideToMove])*(256-e)+(t[this.Position.SideToMove]-t[1^this.Position.SideToMove])*e)/256|0}EvaluatePawns(){let s=[0,0],i=[0,0],t=this.Position.PiecesBB[0][0]|this.Position.PiecesBB[1][0];for(;t;){let e=this.GetLS1B(t);t=this.RemoveBit(t,e);const o=this.Position.Squares[e];1===o.Color&&(e^=56),s[o.Color]+=this.PST[0][0][e]+this.MGPieceValue[0],i[o.Color]+=this.PST[1][0][e]+this.EGPieceValue[0];const n=this.Position.PiecesBB[o.Color][0]&this.fileMasks[e];if(0n!==(n&n-1n)&&(s[o.Color]-=this.MGdoubledPenalty,i[o.Color]-=this.EGdoubledPenalty),0n===(this.Position.PiecesBB[o.Color][0]&this.isolatedMasks[e])&&(s[o.Color]-=this.MGisolatedPenalty,i[o.Color]-=this.EGisolatedPenalty),0n===(this.passedMasks[o.Color][e]&this.Position.PiecesBB[1^o.Color][0])){const t=7-(e>>3);s[o.Color]+=this.MGpassedBonus[t],i[o.Color]+=this.EGpassedBonus[t]}}return{mgScores:s,egScores:i}}Search(s){this.search.nodes=0;let i={moves:[]},t="";this.StartTimer();let e=-this.Inf,o=this.Inf,n=-this.Inf;this.AgeHistory();const h=Date.now(),a=()=>n<-this.Checkmate?"mate "+(-this.Inf-n)/2:n>this.Checkmate?"mate "+(this.Inf-n+1)/2:`cp ${n}`;this.Position.Ply=0;for(let r=1;r<=s;r++){i.moves.length=0;let s=10;for(r>=4&&(e=Math.max(n-s,-this.Inf),o=Math.min(n+s,this.Inf));n=this.Negamax(r,e,o,i),!this.Timer.stop;){if(n<=e)e=Math.max(n-s,-this.Inf),o=(e+o)/2;else{if(!(n>=o))break;o=Math.min(n+s,this.Inf)}s+=s/5+2}const P=Date.now();if(this.Timer.stop)break;t=this.PrettyPrintMove(i.moves[0]),console.log(`info depth ${r} score ${a()} nodes ${this.search.nodes} nps ${1e3*this.search.nodes/(P-h)|0} time ${P-h} pv ${i.moves.map((s=>this.PrettyPrintMove(s))).join(" ")}`)}return console.log(`bestmove ${t}`),t}Negamax(s,i,t,e,o=!0){let n=-this.Inf,h=1,a=0,r=!1;const P=t-i>1,c=0===this.Position.Ply,l={moves:[]};if(this.search.nodes%1e3==0&&(this.CheckTime(),this.Timer.stop))return 0;if(this.search.nodes++,!c&&(this.IsRepetition()||this.Position.HalfMoves>=100))return 0;if(s<=0)return this.Quiescence(i,t);const B=this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]),1^this.Position.SideToMove);B&&(s+=1);const{ttScore:p,ttMove:M}=this.ProbeTT(s,i,t);if(p!==this.HashNoMove&&!P)return p;let u=M;if(!c&&!B){const e=this.Evaluate();if(s<=2&&e+150*s<i){const s=this.Quiescence(i,t);if(s<i)return s}if(!P&&s<=6&&e-50*s>=t&&Math.abs(e)<this.Checkmate)return e;if(!P&&o&&s>=2&&e>=t){this.MakeNullMove();const i=3+Math.floor(s/5);let e=-this.Negamax(s-1-i,-t,1-t,l,!1);if(this.UnmakeNullMove(),l.moves.length=0,e>=t)return Math.abs(e)>this.Checkmate?t:e}s<=4&&e+300*s<=i&&(r=!0)}let g=B?this.GenerateEvasions():this.GenerateMoves();g=this.SortMoves(g,M);for(let o=0;o<g.length;o++){const P=g[o],c=this.MoveIsCapture(P),p=this.MoveIsPromotion(P);if(!c&&!p&&n>-this.Checkmate){if(s<=2&&a>5*s)continue;if(r&&a>1)continue}if(!B&&c&&this.See(P)<-300*s)continue;if(!this.MakeMove(P)){this.UnmakeMove(P);continue}a++;let M=0,f=.45*Math.log(s*a**2)|0;if(a>1?(M=-this.Negamax(s-f-1,-i-1,-i,l),M>i&&f>0&&(M=-this.Negamax(s-1,-t,-i,l))):M=-this.Negamax(s-1,-t,-i,l),this.UnmakeMove(P),M>n){if(n=M,M>i){if(u=P,e.moves.length=0,e.moves.push(P),e.moves.push(...l.moves),this.Timer.extended=s>1&&M<this.search.bestMove.score-30,this.search.bestMove={move:u,score:n},!(M<t))return h=2,c||(this.search.killers[1][this.Position.Ply]=this.search.killers[0][this.Position.Ply],this.search.killers[0][this.Position.Ply]=P,this.search.history[this.Position.SideToMove][63&P][(4032&P)>>6]+=s*s),this.WriteTT(s,h,n,u),t;i=M,h=0}}else c||this.search.history[this.Position.SideToMove][63&P][(4032&P)>>6]>0&&(this.search.history[this.Position.SideToMove][63&P][(4032&P)>>6]-=1);l.moves.length=0}return 0===a?B?-this.Inf+this.Position.Ply:0:(this.WriteTT(s,h,n,u),n)}Quiescence(s,i){if(this.search.nodes%1e3==0&&(this.CheckTime(),this.Timer.stop))return 0;let t=1;this.search.nodes++;const{ttScore:e,ttMove:o}=this.ProbeTT(0,s,i);if(e!==this.HashNoMove)return e;let n=o,h=e,a=h;const r=this.IsSquareAttacked(this.GetLS1B(this.Position.PiecesBB[this.Position.SideToMove][5]),1^this.Position.SideToMove);if(r)h=-this.Inf,a=h;else{if(h===this.HashNoMove&&(h=this.Evaluate()),h>=i)return h;h>s&&(s=h),a=h+150}let P=r?this.GenerateEvasions():this.GenerateMoves(!0);P=this.SortMoves(P,n);for(let e=0;e<P.length;e++){const o=P[e];if(!r&&!this.MoveIsPromotion(o)){const i=a+this.EGPieceValue[this.Position.Squares[(4032&o)>>6]?.Type??0];if(i<=s){h<i&&(h=i);continue}}if(this.See(o)<0)continue;if(!this.MakeMove(o)){this.UnmakeMove(o);continue}let c=-this.Quiescence(-i,-s);if(this.UnmakeMove(o),c>h&&(h=c,n=o),c>=i)return this.WriteTT(0,2,h,n),h;c>s&&(t=0,s=c)}return r&&h===-this.Inf?-this.Inf+this.Position.Ply:(this.WriteTT(0,t,h,n),h)}IsRepetition(){for(let s=this.PositionHistory.length-this.Position.HalfMoves;s<this.PositionHistory.length-1;s++)if(this.PositionHistory[s]===this.Position.Hash)return!0;return!1}AgeHistory(){for(let i=s.a8;i<=s.h1;i++)for(let t=s.a8;t<=s.h1;t++)this.search.history[this.Position.SideToMove][i][t]/=2}SortMoves(s,i){const t=[];for(let e=0;e<s.length;e++){const o=s[e];if(o===i)t.push({move:o,score:this.Inf});else if(this.MoveIsCapture(o)){const s=this.Position.Squares[63&o];let i=this.Position.Squares[(4032&o)>>6];if((16256&o)>>12==2&&(i=this.Position.Squares[0===this.Position.SideToMove?8+((4032&o)>>6):((4032&o)>>6)-8]),s.Type>i.Type){const e=this.MGPieceValue[i.Type]-s.Type+7e3;t.push({move:o,score:e})}else{const e=this.MGPieceValue[i.Type]-s.Type+1e4;t.push({move:o,score:e})}}else o===this.search.killers[0][this.Position.Ply]?t.push({move:o,score:9e3}):o===this.search.killers[1][this.Position.Ply]?t.push({move:o,score:8e3}):t.push({move:o,score:this.search.history[this.Position.SideToMove][63&o][(4032&o)>>6]})}const e=t.length;for(let s=1;s<e;s++){let i=t[s],e=s-1;for(;e>-1&&i.score>t[e].score;)t[e+1]=t[e],e--;t[e+1]=i}return t.map((({move:s})=>s))}See(s){const i=(4032&s)>>6,t=63&s,e=this.Position.Squares[t].Type;let o=this.Position.Squares[i]?.Type,n=1^this.Position.SideToMove;if(void 0===o)return 0;const h=[];let a=0,r=this.SetBit(0n,t),P=this.AttacksTo(i),c=0n;const l=this.Position.PiecesBB[0][0]|this.Position.PiecesBB[0][2]|this.Position.PiecesBB[0][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][0]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[1][4];for(h[a]=this.MGPieceValue[o];r&&(a++,h[a]=this.MGPieceValue[e]-h[a-1],!(Math.max(-h[a-1],h[a])<0));){P^=r,c|=r,r&l&&(P|=this.ConsiderXRays(i)&~c);const{bitboard:s,piece:t}=this.GetLeastValuablePiece(P,n,o);r=s,o=t,n^=1}for(;--a;)h[a-1]=-Math.max(-h[a-1],h[a]);return h[0]}AttacksTo(s){const i=this.Position.PiecesBB[0][0]&this.PawnAttacks[1][s]|this.Position.PiecesBB[1][0]&this.PawnAttacks[0][s],t=(this.Position.PiecesBB[0][1]|this.Position.PiecesBB[1][1])&this.KnightAttacks[s],e=(this.Position.PiecesBB[0][5]|this.Position.PiecesBB[1][5])&this.KingAttacks[s],o=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let n=this.Position.PiecesBB[0][2]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];n&=this.GenerateBishopAttacks(o,s);let h=this.Position.PiecesBB[0][3]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];return h&=this.GenerateRookAttacks(o,s),i|t|e|n|h}AttacksToByColor(s,i){const t=this.Position.PiecesBB[i][0]&this.PawnAttacks[1^i][s],e=this.Position.PiecesBB[i][1]&this.KnightAttacks[s],o=this.Position.PiecesBB[i][5]&this.KingAttacks[s],n=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let h=this.Position.PiecesBB[i][2]|this.Position.PiecesBB[i][4];h&=this.GenerateBishopAttacks(n,s);let a=this.Position.PiecesBB[i][3]|this.Position.PiecesBB[i][4];return a&=this.GenerateRookAttacks(n,s),t|e|o|h|a}ConsiderXRays(s){const i=this.Position.OccupanciesBB[0]|this.Position.OccupanciesBB[1];let t=this.Position.PiecesBB[0][2]|this.Position.PiecesBB[1][2]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];t&=this.GenerateBishopAttacks(i,s);let e=this.Position.PiecesBB[0][3]|this.Position.PiecesBB[1][3]|this.Position.PiecesBB[0][4]|this.Position.PiecesBB[1][4];return e&=this.GenerateRookAttacks(i,s),t|e}GetLeastValuablePiece(s,i,t){for(t=0;t<=5;t++){let e=s&this.Position.PiecesBB[i][t];if(e)return{bitboard:e&-e,piece:t}}return{bitboard:0n,piece:0}}StartTimer(){let s=0;if(this.Timer.stop=!1,this.Timer.extended=!1,-1!==this.Timer.timeleft||-1!==this.Timer.movetime){if(0!==this.Timer.movestogo)s=this.Timer.timeleft/this.Timer.movestogo;else if(-1!==this.Timer.movetime)s=this.Timer.movetime;else{let i=0;i=this.Position.Ply<=20?45-this.Position.Ply:25,s=this.Timer.timeleft/i}s+=this.Timer.increment/2,s>=this.Timer.timeleft&&(s-=this.Timer.increment),s<=0&&(s=this.Timer.increment-1),this.Timer.startTime=Date.now(),this.Timer.stopTime=this.Timer.startTime+s}}CheckTime(){(this.Timer.stop||-1!==this.Timer.timeleft||-1!==this.Timer.movetime)&&Date.now()>this.Timer.stopTime&&(!this.Timer.extended||Date.now()-this.Timer.startTime>=.75*this.Timer.timeleft)&&(this.Timer.stop=!0)}ParseUCIPosition(s){const i=s.split(" ").slice(1).join(" ");i.startsWith("fen")?this.LoadFEN(i.split(" ").slice(1).join(" ")):this.LoadFEN(e.positions.start);const t=i.split("moves ").slice(1).join(" ").split(" ").filter((s=>""!=s));for(let i=0;i<t.length;i++){const e=this.ParseUCIMove(t[i]);if(!e){console.error("Unable to parse UCI command"),console.log(`Command: ${s}`),console.log(`Invalid move: ${t[i]}`);break}this.MakeMove(e)}}ParseUCIMove(i){const t=parseInt(i.charAt(0),36)-10,e=8*(7-(parseInt(i.charAt(1))-1))+t,o=parseInt(i.charAt(2),36)-10;let n=8*(7-(parseInt(i.charAt(3))-1))+o;const h=this.Position.Squares[e];let a=0,r=0;if(5===i.length){const s=i.charAt(4);a=1,"n"===s?r=0:"b"===s?r=1:"r"===s?r=2:"q"===s&&(r=3)}return 5===h.Type?this.isChess960||"e1g1"!==i&&"e1c1"!==i&&"e8g8"!==i&&"e8c8"!==i?(n===this.Position.CastlingRookSquares[1]&&1&this.Position.CastlingRights||n===this.Position.CastlingRookSquares[4]&&4&this.Position.CastlingRights||n===this.Position.CastlingRookSquares[2]&&2&this.Position.CastlingRights||n===this.Position.CastlingRookSquares[8]&&8&this.Position.CastlingRights)&&(a=3):(a=3,n=(n>e?s.h1:s.a1)^56*h.Color):n===this.Position.EnPassSq&&0===h.Type&&(a=2),this.EncodeMove(e,n,a,r)}ParseUCIGo(s){const i=s.split(" "),t=0===this.Position.SideToMove?"w":"b";let e=-1,o=0,n=0,h=-1,a=this.MaxPly;for(let s=0;s<i.length;s++){const r=i[s];r===t+"time"?e=parseInt(i[s+1]):r===t+"inc"?o=parseInt(i[s+1]):"movestogo"===r?n=parseInt(i[s+1]):"depth"===r?a=Math.min(parseInt(i[s+1]),this.MaxPly):"movetime"===r&&(h=parseInt(i[s+1]))}return this.Timer.timeleft=e,this.Timer.increment=o,this.Timer.depth=a,this.Timer.movestogo=n,this.Timer.movetime=h,this.Search(a)}Perft(s,i=!1){this.totalNodes=0;const t=performance.now(),e=this.GenerateMoves();for(let t=0;t<e.length;t++){const o=e[t];if(this.MakeMove(o)){let t=this.PerftDriver(s-1);i&&console.log(`${this.PrettyPrintMove(o)}: ${t}`)}this.UnmakeMove(o)}const o=performance.now();return i&&console.log(`Nodes: ${this.totalNodes.toLocaleString()}. Time taken: ${o-t}`),this.totalNodes}PerftDriver(s){let i=0;if(0===s)return this.totalNodes++,1;const t=this.GenerateMoves();for(let e=0;e<t.length;e++){const o=t[e];this.MakeMove(o)&&(i+=this.PerftDriver(s-1)),this.UnmakeMove(o)}return i}}e.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const o=e;Engine=t.default})();